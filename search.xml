<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2017-10-16 The unit test and mock in python</title>
      <link href="/2017/10/16/2017-10-16-The-unit-test-and-mock-in-python/"/>
      <url>/2017/10/16/2017-10-16-The-unit-test-and-mock-in-python/</url>
      
        <content type="html"><![CDATA[<h3 id="mock-功效"><a href="#mock-功效" class="headerlink" title="mock 功效"></a>mock 功效</h3><a id="more"></a><h4 id="完成功能测试"><a href="#完成功能测试" class="headerlink" title="完成功能测试"></a>完成功能测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># module.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Count</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> mock</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> Count</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockDemo</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_add</span><span class="params">(self)</span>:</span></span><br><span class="line">        count = Count()</span><br><span class="line">        count.add = mock.Mock(return_value=<span class="number">13</span>, side_effect=count.add)       </span><br><span class="line"><span class="comment"># side_effect参数和return_value是相反的。它给mock分配了可替换的结果，覆盖了return_value。简单的说，一个模拟工厂调用将返回side_effect值，而不是return_value；所以，设置side_effect参数为Count类add()方法，那么return_value的作用失效。</span></span><br><span class="line">        result = count.add(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">        print(result)</span><br><span class="line"><span class="comment"># 将会真正的调用add()方法，得到的返回值为16（8+8）。通过print打印结果。</span></span><br><span class="line">        count.add.assert_called_with(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># 检查mock方法是否获得了正确的参数。</span></span><br><span class="line">        self.assertEqual(result, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="解决测试依赖"><a href="#解决测试依赖" class="headerlink" title="解决测试依赖"></a>解决测试依赖</h4><blockquote><p>例如，我们要测试A模块，然后A模块依赖于B模块的调用。但是，由于B模块的改变，导致了A模块返回结果的改变，从而使A模块的测试用例失败。其实，对于A模块，以及A模块的用例来说，并没有变化，不应该失败才对。这个时候就是mock发挥作用的时候了。通过mock模拟掉影响A模块的部分（B模块）。至于mock掉的部分（B模块）应该由其它用例来测试。</p></blockquote><blockquote><p>add_and_multiply()函数依赖了multiply()函数的返回值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># function.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_and_multiply</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    addition = x + y</span><br><span class="line">    multiple = multiply(x, y)</span><br><span class="line">    <span class="keyword">return</span> (addition, multiple)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_add_and_multiply</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="number">3</span></span><br><span class="line">        y = <span class="number">5</span></span><br><span class="line">        addition, multiple = function.add_and_multiply(x, y)</span><br><span class="line">        self.assertEqual(<span class="number">8</span>, addition)</span><br><span class="line">        self.assertEqual(<span class="number">15</span>, multiple)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>修改multiply()函数的代码，这样测试会失败<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y + <span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>把 multiply()函数mock掉，解决依赖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> unittest.mock <span class="keyword">import</span> patch</span><br><span class="line"><span class="keyword">import</span> function</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @patch("function.multiply")</span></span><br><span class="line"><span class="comment"># patch()装饰/上下文管理器可以很容易地模拟类或对象在模块测试。在测试过程中，您指定的对象将被替换为一个模拟（或其他对象），并在测试结束时还原。这里模拟function.py文件中multiply()函数。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_add_and_multiply2</span><span class="params">(self, mock_multiply)</span>:</span></span><br><span class="line"><span class="comment"># 在定义测试用例中，将mock的multiply()函数（对象）重命名为 mock_multiply对象。</span></span><br><span class="line">        x = <span class="number">3</span></span><br><span class="line">        y = <span class="number">5</span></span><br><span class="line">        mock_multiply.return_value = <span class="number">15</span></span><br><span class="line"><span class="comment"># 设定mock_multiply对象的返回值为固定的15。</span></span><br><span class="line">        addition, multiple = function.add_and_multiply(x, y)</span><br><span class="line">        mock_multiply.assert_called_once_with(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 检查mock_multiply方法的参数是否正确。</span></span><br><span class="line"></span><br><span class="line">        self.assertEqual(<span class="number">8</span>, addition)</span><br><span class="line">        self.assertEqual(<span class="number">15</span>, multiple)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Mock-attributes-in-Python-mock"><a href="#Mock-attributes-in-Python-mock" class="headerlink" title="Mock attributes in Python mock?"></a>Mock attributes in Python mock?</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> patch(<span class="string">'requests.post'</span>) <span class="keyword">as</span> patched_post:</span><br><span class="line">    type(patched_post.return_value).ok = PropertyMock(return_value=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Mock-session-in-requests-library？"><a href="#Mock-session-in-requests-library？" class="headerlink" title="Mock session in requests library？"></a>Mock session in requests library？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_session_get</span><span class="params">()</span>:</span></span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="keyword">return</span> session.get(<span class="string">'foo'</span>).status_code</span><br><span class="line"></span><br><span class="line"><span class="comment"># tests.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> mock</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> do_session_get</span><br><span class="line"></span><br><span class="line"><span class="comment"># The module of we mock, return the exact data that we expected</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mocked_requests</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="comment"># print args</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MockResponse</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, status_code, text, json_data=None, content=None)</span>:</span></span><br><span class="line">            self.json_data = json_data</span><br><span class="line">            self.status_code = status_code</span><br><span class="line">            self.text = text</span><br><span class="line">            self.content = content</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">json</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.json_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args[<span class="number">0</span>] == <span class="string">'foo'</span>:</span><br><span class="line">        <span class="keyword">return</span> MockResponse(<span class="number">200</span>, <span class="string">'success'</span>)</span><br><span class="line">    <span class="keyword">elif</span> args[<span class="number">0</span>] == <span class="string">'http://someurl.com/'</span>:</span><br><span class="line">        <span class="keyword">return</span> MockResponse(<span class="number">200</span>, <span class="string">'success'</span>)</span><br><span class="line">    <span class="keyword">return</span> MockResponse(<span class="number">404</span>, <span class="string">'-1'</span>)</span><br><span class="line"><span class="comment"># from main import do_session_get</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDoSessionGet</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @mock.patch('requests.session')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_should_mock_session_get</span><span class="params">(self, mocked_session)</span>:</span></span><br><span class="line">        mocked_session.return_value = mock.MagicMock(get=mock.MagicMock(side_effect=mocked_requests))</span><br><span class="line">        <span class="comment"># print do_session_get()</span></span><br><span class="line">        self.assertEqual(do_session_get(), <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="assert-常用断言速查"><a href="#assert-常用断言速查" class="headerlink" title="assert 常用断言速查"></a>assert 常用断言速查</h3><table><thead><tr><th>项目</th><th>举例</th></tr></thead><tbody><tr><td>assertEqual(a, b)</td><td>a == b</td></tr><tr><td>assertNotEqual(a, b)</td><td>a != b</td></tr><tr><td>assertGreater(a, b)</td><td>a &gt; b</td></tr><tr><td>assertGreaterEqual(a, b)</td><td>a &gt;= b</td></tr><tr><td>assertLess(a, b)</td><td>a &lt; b</td></tr><tr><td>assertLessEqual(a, b)</td><td>a &lt;= b</td></tr><tr><td>assertTrue(x)</td><td>bool(x) is True</td></tr><tr><td>assertFalse(x)</td><td>bool(x) is False</td></tr><tr><td>assertIs(a, b)</td><td>a is b</td></tr><tr><td>assertIsNot(a, b)</td><td>a is not b</td></tr><tr><td>assertIsNone(x)</td><td>x is None</td></tr><tr><td>assertIsNotNone(x)</td><td>x is not None</td></tr><tr><td>assertIn(a, b)</td><td>a in b</td></tr><tr><td>assertNotIn(a, b)</td><td>a not in b</td></tr><tr><td>assertIsInstance(a, b)</td><td>isinstance(a, b)</td></tr><tr><td>assertNotIsInstance(a, b)</td><td>not isinstance(a, b)</td></tr></tbody></table><h3 id="干货：mock模板（requests）"><a href="#干货：mock模板（requests）" class="headerlink" title="干货：mock模板（requests）"></a>干货：mock模板（requests）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common_test.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> mock</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">If the module is import from others files, like:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from my.great.package import FlowType</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Then, we should do this, below:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Now we must patch 'my.great.package.requests.get'</span></span><br><span class="line"><span class="string">@mock.patch('my.great.package.requests.get', side_effect=mocked_requests)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">instead of "@mock.patch('common_test.requests.get', side_effect=mocked_requests)"</span></span><br><span class="line"><span class="string">because the requests module was imported in that file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># The module that need unittest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlowType</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flow_type</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">'http://chihweihsu.com/'</span></span><br><span class="line">        resp = requests.get(url)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="comment"># The data of we mock</span></span><br><span class="line">mock_status_code = <span class="number">200</span></span><br><span class="line">mock_text = <span class="string">'You are my sunshine!'</span></span><br><span class="line">mock_json = &#123;<span class="string">'data'</span>: <span class="string">'You are my sunshine!'</span>&#125;</span><br><span class="line">mock_content = <span class="string">'You are my sunshine!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The module of we mock, return the exact data that we expected</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mocked_requests</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MockResponse</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, status_code, text, json_data=None, content=None)</span>:</span></span><br><span class="line">            self.json_data = json_data</span><br><span class="line">            self.status_code = status_code</span><br><span class="line">            self.text = text</span><br><span class="line">            self.content = content</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">json</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.json_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args[<span class="number">0</span>] == <span class="string">'http://chihweihsu.com/'</span>:</span><br><span class="line">        <span class="keyword">return</span> MockResponse(mock_status_code, mock_text, json_data=mock_json, content=mock_content)</span><br><span class="line">    <span class="keyword">elif</span> args[<span class="number">0</span>] == <span class="string">'http://someurl.com/'</span>:</span><br><span class="line">        <span class="keyword">return</span> MockResponse(<span class="number">200</span>, <span class="string">'success'</span>)</span><br><span class="line">    <span class="keyword">return</span> MockResponse(<span class="number">404</span>, <span class="string">'-1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The whole test case module</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCommon</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># We patch 'common_test.requests.get' with our own method. The mock object is passed in to our test case method.</span></span><br><span class="line"><span class="meta">    @mock.patch('common_test.requests.get', side_effect=mocked_requests)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_flow_type</span><span class="params">(self, mocked_get)</span>:</span></span><br><span class="line">        f = FlowType()</span><br><span class="line">        resp = f.flow_type()</span><br><span class="line">        self.assertIsNotNone(resp)</span><br><span class="line">        self.assertEqual(resp.status_code, mock_status_code)</span><br><span class="line">        self.assertIs(resp.text, mock_text)</span><br><span class="line">        self.assertIn(resp.content, mock_content)</span><br><span class="line">        self.assertDictEqual(resp.json(), mock_json)</span><br><span class="line">        self.assertIsInstance(resp.json(), dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> unittest </tag>
            
            <tag> mock </tag>
            
            <tag> 单元测试 </tag>
            
            <tag> 挡板 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-10-16 描述统计学笔记（Udacity）</title>
      <link href="/2017/10/16/2017-10-16-%E6%8F%8F%E8%BF%B0%E7%BB%9F%E8%AE%A1%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88Udacity%EF%BC%89/"/>
      <url>/2017/10/16/2017-10-16-%E6%8F%8F%E8%BF%B0%E7%BB%9F%E8%AE%A1%E5%AD%A6%E7%AC%94%E8%AE%B0%EF%BC%88Udacity%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="how-would-you-measure-memory"><a href="#how-would-you-measure-memory" class="headerlink" title="how would you measure memory?"></a>how would you measure memory?</h3><blockquote><ol><li>maybe can ask some question like what’s food you eat yesterday,2 days ago, 5 days ago, 10days ago…</li><li>give you a article,test how much time you take to keep in mind the whole article</li><li>give you 1 hours, test how many words that you keep in mind<a id="more"></a></li></ol></blockquote><p>### </p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> 描述统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-9-28 Python 编码之禅</title>
      <link href="/2017/09/28/2017-9-28-Python-%E7%BC%96%E7%A0%81%E4%B9%8B%E7%A6%85/"/>
      <url>/2017/09/28/2017-9-28-Python-%E7%BC%96%E7%A0%81%E4%B9%8B%E7%A6%85/</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote><p>平时工作中经常碰到编码、解码、乱码……类似的问题不胜其烦，如街边小广告一般异常讨厌，需要花时间好好整理一番，“一”绝后患。</p></blockquote><a id="more"></a><p>str(s)与unicode(s)</p><blockquote><p>str(s)和unicode(s)是两个工厂方法，分别返回str字符串对象和unicode字符串对象；<br>str(s)是s.encode(‘ascii’)的简写；<br>unicode(s)是s.decode(‘ascii’)的简写；</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">str</span><br><span class="line">str(object=<span class="string">''</span>)</span><br><span class="line">str(object=<span class="string">b''</span>, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'strict'</span>)</span><br><span class="line"></span><br><span class="line">object - object whose informal representation <span class="keyword">is</span> to be returned</span><br><span class="line">encoding - Defaults of UTF<span class="number">-8.</span> Encoding of the given object</span><br><span class="line">errors - response when decoding fails. There are six types of error response：</span><br><span class="line">strict - default response which raises a UnicodeDecodeError exception on failure</span><br><span class="line">ignore - ignores the unencodable unicode <span class="keyword">from</span> the result</span><br><span class="line">replace - replaces the unencodable unicode to a question mark ?</span><br><span class="line">xmlcharrefreplace - inserts XML character reference instead of unencodable unicode</span><br><span class="line">backslashreplace - inserts a \uNNNN espace sequence instead of unencodable unicode</span><br><span class="line">namereplace - inserts a \N&#123;...&#125; escape sequence instead of unencodable unicode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3 = <span class="string">u"你好"</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3 </span><br><span class="line"><span class="string">u'\u4f60\u597d'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(s3) </span><br><span class="line">Traceback (most recent call last): </span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt; </span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上面s3是unicode类型的字符串，str(s3)相当于是执行s3.encode(‘ascii’)因为“你好”两个汉字不能用ascii码来表示，所以就报错了，指定正确的编码：s3.encode(‘gbk’)或者s3.encode("utf-8")就不会出现这个问题了。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类似的unicode有同样的错误：</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; s4 = "你好" </span></span><br><span class="line"><span class="string">&gt;&gt;&gt; unicode(s4) </span></span><br><span class="line"><span class="string">Traceback (most recent call last): </span></span><br><span class="line"><span class="string">File "&lt;stdin&gt;", line 1, in &lt;module&gt; </span></span><br><span class="line"><span class="string">UnicodeDecodeError: '</span>ascii<span class="string">' codec can'</span>t decode byte <span class="number">0xc4</span> <span class="keyword">in</span> position <span class="number">0</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> range(<span class="number">128</span>) </span><br><span class="line"></span><br><span class="line">unicode(s4)等效于s4.decode(‘ascii’)，因此要正确的转换就要正确指定其编码s4.decode(‘gbk’)或者s4.decode(<span class="string">"utf-8"</span>)。</span><br></pre></td></tr></table></figure><p>### </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: <span class="string">'中文'</span></span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="string">u'中文'</span></span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">u'\u4e2d\u6587'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: <span class="keyword">print</span> <span class="string">'中文'</span></span><br><span class="line">中文</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="keyword">print</span> <span class="string">u'中文'</span></span><br><span class="line">中文</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: <span class="keyword">print</span> <span class="string">'\u4e2d\u6587'</span></span><br><span class="line">\u4e2d\u6587</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: <span class="keyword">print</span> <span class="string">u'\u4e2d\u6587'</span></span><br><span class="line">中文</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="string">u'中文'</span>.encode(<span class="string">'gb2312'</span>)</span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'\xd6\xd0\xce\xc4'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: <span class="string">u'中文'</span>.encode(<span class="string">'gbk'</span>)</span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">'\xd6\xd0\xce\xc4'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: <span class="string">u'中文'</span>.encode(<span class="string">'utf8'</span>)</span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure><p>问题：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: <span class="string">'中文'</span>.encode(<span class="string">'utf8'</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnicodeDecodeError                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-41</span><span class="number">-94</span>bb800b6371&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 '中文'.encode('utf8')</span><br><span class="line"></span><br><span class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure></p><p>解决办法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> decode </tag>
            
            <tag> encode </tag>
            
            <tag> 总结 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-9-14 通过__slots__节省内存</title>
      <link href="/2017/09/14/2017-9-14-%E9%80%9A%E8%BF%87-slots-%E8%8A%82%E7%9C%81%E5%86%85%E5%AD%98/"/>
      <url>/2017/09/14/2017-9-14-%E9%80%9A%E8%BF%87-slots-%E8%8A%82%E7%9C%81%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><a href="http://www.datadependence.com/2016/07/pythonic-code-video-series-slots/" target="_blank" rel="noopener">见原文</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Measurement</span>:</span></span><br><span class="line">    __slots__ = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'val'</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, value)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.val = value</span><br></pre></td></tr></table></figure></p><blockquote><p>merge dict </p></blockquote><p><a href="http://www.datadependence.com/2016/08/pythonic-code-video-series-merging-dictionaries/" target="_blank" rel="noopener">merged_dict</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_merged = &#123;**a, **b, **c&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 内存 </tag>
            
            <tag> slots </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-9-12 str() vs json.dumps()</title>
      <link href="/2017/09/12/2017-9-12-str-vs-json-dumps/"/>
      <url>/2017/09/12/2017-9-12-str-vs-json-dumps/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="str-与-json-dumps-的区别"><a href="#str-与-json-dumps-的区别" class="headerlink" title="str() 与 json.dumps()的区别"></a>str() 与 json.dumps()的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'jsonKey'</span>: <span class="string">'jsonValue'</span>,<span class="string">"title"</span>: <span class="string">"hello world"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"jsonKey"</span>: <span class="string">"jsonValue"</span>, <span class="string">"title"</span>: <span class="string">"hello world"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> str(data)</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'jsonKey'</span>: <span class="string">'jsonValue'</span>, <span class="string">'title'</span>: <span class="string">'hello world'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(data)</span><br><span class="line"></span><br><span class="line"><span class="string">'&#123;"jsonKey": "jsonValue", "title": "hello world"&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(data)</span><br><span class="line"></span><br><span class="line"><span class="string">"&#123;'jsonKey': 'jsonValue', 'title': 'hello world'&#125;"</span></span><br></pre></td></tr></table></figure><blockquote><p>In fact, I am more interested in their difference in single quote and double quote in output strings. It seems that I already know one difference between them (mentioned above) and whether json.loads() can load the output string. </p></blockquote><blockquote><p>json.dumps() is much more than just making a string out of a Python object, it would always produce a valid JSON string (assuming everything inside the object is serializable) following the Type Conversion Table.</p></blockquote><blockquote><p>For instance, if one of the values is None, the str() would produce an invalid JSON which cannot be loaded:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'jsonKey'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(data)</span><br><span class="line"><span class="string">"&#123;'jsonKey': None&#125;"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(str(data))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py"</span>, line <span class="number">338</span>, <span class="keyword">in</span> loads</span><br><span class="line">    <span class="keyword">return</span> _default_decoder.decode(s)</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py"</span>, line <span class="number">366</span>, <span class="keyword">in</span> decode</span><br><span class="line">    obj, end = self.raw_decode(s, idx=_w(s, <span class="number">0</span>).end())</span><br><span class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py"</span>, line <span class="number">382</span>, <span class="keyword">in</span> raw_decode</span><br><span class="line">    obj, end = self.scan_once(s, idx)</span><br><span class="line">ValueError: Expecting property name: line <span class="number">1</span> column <span class="number">2</span> (char <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>But the dumps() would convert None into null making a valid JSON string that can be loaded:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'jsonKey'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(data)</span><br><span class="line"><span class="string">'&#123;"jsonKey": null&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(json.dumps(data))</span><br><span class="line">&#123;<span class="string">u'jsonKey'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>In fact in (I believe most) implementations of Python, str(object) wraps strings in single quotes, which is not valid JSON.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">An example:</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="keyword">print</span> str(&#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;)</span><br><span class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br><span class="line">str(boolean) <span class="keyword">is</span> also <span class="keyword">not</span> valid JSON:</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="keyword">print</span> str(<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">__str__, can, however, be overridden <span class="keyword">in</span> user defined classes to ensure that objects <span class="keyword">return</span> JSON representations of themselves.</span><br></pre></td></tr></table></figure><blockquote><p>字典转字符串（dict to str）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If your dictionary isn't too big maybe str + eval can do the work:</span></span><br><span class="line">dict1 = &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>, <span class="string">'three'</span>: &#123;<span class="string">'three.1'</span>: <span class="number">3.1</span>, <span class="string">'three.2'</span>: <span class="number">3.2</span> &#125;&#125;</span><br><span class="line">str1 = str(dict1)</span><br><span class="line"></span><br><span class="line">dict2 = eval(str1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> dict1==dict2</span><br><span class="line"><span class="comment"># You can use ast.literal_eval instead of eval for additional security if the source is untrusted.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to string</span></span><br><span class="line">input = json.dumps(&#123;<span class="string">'id'</span>: id &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load to dict</span></span><br><span class="line">my_dict = json.loads(input)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>字符串转字典（str to dict）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># str to dict</span></span><br><span class="line">In [<span class="number">33</span>]: <span class="keyword">import</span> ast</span><br><span class="line">In [<span class="number">34</span>]: ast.literal_eval(<span class="string">"&#123;'x':1, 'y':2&#125;"</span>)</span><br><span class="line">Out[<span class="number">34</span>]: &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>转换已转义的字符串转字典（str to dict）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'&#123;\\"name\\":\\"michael\\"&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a</span><br><span class="line">&#123;\<span class="string">"name\":\"michael\"&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; type(json.loads('“' + a + '”'))</span></span><br><span class="line"><span class="string">&lt;type 'unicode'&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; type(json.loads(json.loads('“' + a + '”')))</span></span><br><span class="line"><span class="string">&lt;type 'dict'&gt;</span></span><br><span class="line"><span class="string"># 第一次json.loads是将里面的\"这样的字符串转为"</span>(只有一个双引号)，第二次再将其转为一个字典，记得不要漏掉前面先加双引号。</span><br></pre></td></tr></table></figure><blockquote><p><code>pymongo</code> 根据ObjectId进行查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dbm.neo_nodes.find(&#123;<span class="string">"_id"</span>: ObjectId(obj_id_to_find)&#125;)]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>float nan</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=float(<span class="string">'nan'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>math.isnan(x)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The usual way to test for a NaN is to see if it's equal to itself, since nan isn't equal anything.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNaN</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num != num</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> string </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-9-7 机器学习分类</title>
      <link href="/2017/09/07/2017-9-7-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB/"/>
      <url>/2017/09/07/2017-9-7-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="机器学习："><a href="#机器学习：" class="headerlink" title="机器学习："></a>机器学习：</h4><a id="more"></a><blockquote><ul><li>线性回归<ul><li>岭回归</li><li>LASSO</li><li>弹性网络</li></ul></li><li>逻辑回归<ul><li>Softmax 回归</li></ul></li><li>决策树<ul><li>ID3</li><li>C4.5</li><li>CART</li></ul></li><li>神经网络<ul><li>普通网络</li><li>CNN</li><li>RNN</li><li>GAN</li></ul></li></ul></blockquote><h4 id="架构总览："><a href="#架构总览：" class="headerlink" title="架构总览："></a>架构总览：</h4><blockquote><p>数据仓库</p><ul><li>SparkStreaming<ul><li>tensorflow</li><li>scikit-learn<br>模型库</li></ul></li><li>django<ul><li>xgboost</li><li>SparkMLLib<br>特征库</li></ul></li><li>redis<ul><li>numpy</li><li>pandas</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-9-7 机器学习路线</title>
      <link href="/2017/09/07/2017-9-7-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2017/09/07/2017-9-7-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="准备知识："><a href="#准备知识：" class="headerlink" title="准备知识："></a>准备知识：</h3><blockquote><p>编程语言：Python，C++，Spark（大数据环境下）；<br>知识储备：英语、线性代数、概率论、图论、神经科学。</p></blockquote><a id="more"></a><h4 id="第一步-统领大局："><a href="#第一步-统领大局：" class="headerlink" title="第一步 统领大局："></a>第一步 统领大局：</h4><blockquote><p>建立大局观，是入门第一要务； 从宏观了解机器学习的全貌；<br>机器学习：根据已有特征，选择模型，训练模型，预测未知数据；<br>推荐书籍：<br>-《图解机器学习》：通俗易懂，算法图解，入门必备；<br>-《集体智慧编程》：代码实现，一个字“敲”；<br>-《机器学习（周志华西瓜书）》：系统严谨，数学推导；</p></blockquote><h4 id="第二步-了解算法："><a href="#第二步-了解算法：" class="headerlink" title="第二步 了解算法："></a>第二步 了解算法：</h4><blockquote><p>看遍所有算法原理，主要书籍：《机器学习（周志华）》；<br><code>coursera</code> 上Andrew NG的机器学习公开课，网易云也开了；<br>邹博的《机器学习实战》；<br>李沐《一起动手学习深度学习》；<br>必学：线性回归，Logistics回归，决策树。</p></blockquote><h4 id="第三步-利用框架："><a href="#第三步-利用框架：" class="headerlink" title="第三步 利用框架："></a>第三步 利用框架：</h4><blockquote><p>利用<code>scikit-learn</code>实现所学的算法（推荐鸢尾花分类、MNIST分类）</p></blockquote><h4 id="第四步-神经网络："><a href="#第四步-神经网络：" class="headerlink" title="第四步 神经网络："></a>第四步 神经网络：</h4><blockquote><p>看懂<code>Tensorflow</code>官网demo：RNN、CNN、GAN；<br>莫凡<code>Tensorflow</code>；</p></blockquote><h4 id="第五步-实操演练："><a href="#第五步-实操演练：" class="headerlink" title="第五步 实操演练："></a>第五步 实操演练：</h4><blockquote><p>注册<code>kangle</code>，奋斗吧！<br>上线一个小模型（django+scikit-learn）</p></blockquote><h4 id="第六步-关注落地："><a href="#第六步-关注落地：" class="headerlink" title="第六步 关注落地："></a>第六步 关注落地：</h4><blockquote><p>机器学习MVP开发；<br>针对小规模，有质量、已标注的数据进行训练；<br>明确需求、特征量化、目标量化、特征清洗、模型选型、模型训练、线下验证、模型上线、特征清洗、模型预测、结果应用、运行监控；</p></blockquote><blockquote><p>实例一：客户动用率预测：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">明确需求：与业务同事讨论本次需求的目标是什么，这里说的就是动用率预测；</span><br><span class="line">特征量化：选出可能有影响的特征，如：年龄，性别，近三个月是否动用等；</span><br><span class="line">目标量化：选择是否动用为目标；</span><br><span class="line">特征清洗：样本筛选，缺失值补全，利用先验知识去掉明显不符合常理的数据；</span><br><span class="line">模型选择：直接丢个逻辑回归试试看；</span><br><span class="line">模型训练：看训练集和测试集，讨论出一个精准度即可；</span><br><span class="line">模型上线：丢上线去跑跑看，看看结果，暂时不接入关键流程即可。</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实例二：客户逾期率预测：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">明确需求：与业务同事讨论本次需求的目标是什么，这里说的就是逾期率预测；</span><br><span class="line">特征量化：选出可能有影响的特征，如：年龄，性别，近三个月是否逾期等；</span><br><span class="line">目标量化：选择客户是否逾期作为目标；</span><br><span class="line">特征清洗：样本筛选，缺失值补全，利用先验知识去掉明显不符合常理的数据；</span><br><span class="line">模型选择：直接丢个softmax回归试试看；</span><br><span class="line">模型训练：看训练集和测试集，讨论出一个精准度即可；</span><br><span class="line">模型上线：丢上线去跑跑看，看看结果，暂时不接入关键流程即可。</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实例三：客户风险级别预测：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">明确需求：与业务同事讨论本次需求的目标是什么，这里说的就是风险级别预测；</span><br><span class="line">特征量化：选出可能有影响的特征，如：年龄，性别，近三个月是否逾期等；</span><br><span class="line">目标量化：选择预期风险等级作为目标；</span><br><span class="line">特征清洗：样本筛选，缺失值补全，利用先验知识去掉明显不符合常理的数据；</span><br><span class="line">模型选择：直接丢个决策树试试看；</span><br><span class="line">模型训练：看训练集和测试集，讨论出一个精准度即可；</span><br><span class="line">模型上线：丢上线去跑跑看，看看结果，暂时不接入关键流程即可。</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="第七步-补充数学："><a href="#第七步-补充数学：" class="headerlink" title="第七步 补充数学："></a>第七步 补充数学：</h4><blockquote><p>《概率论与数理统计》陈希孺<br>《线性代数应该这样学》</p></blockquote><h4 id="第八步-特征工程："><a href="#第八步-特征工程：" class="headerlink" title="第八步 特征工程："></a>第八步 特征工程：</h4><blockquote><p>好的特征决是成功的一半；<br>特征选择，特征清洗，决定模型的上限，算法和优化只是不断趋近这个上限；<br>特征工程非常重要。</p></blockquote><h4 id="第九步-深入前沿："><a href="#第九步-深入前沿：" class="headerlink" title="第九步 深入前沿："></a>第九步 深入前沿：</h4><blockquote><p>深入了解前沿的底层原理<br>阅读实践优秀论文，如：MapReduce原理的，李沐Parameter原理的，GAN原理的，LPA原理的……</p></blockquote><h4 id="书单："><a href="#书单：" class="headerlink" title="书单："></a>书单：</h4><blockquote><p>《深入浅出统计学》<br>《深入浅出数据分析》<br>《大数据智能》<br>《深度学习》<br>《优雅的理性》<br>《创新者的窘境》<br>《数学之美》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-9-5 计算体脂率</title>
      <link href="/2017/09/05/2017-9-5-%E8%AE%A1%E7%AE%97%E4%BD%93%E8%84%82%E7%8E%87/"/>
      <url>/2017/09/05/2017-9-5-%E8%AE%A1%E7%AE%97%E4%BD%93%E8%84%82%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote><p>用来计算一个人的体脂率</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_BFR</span><span class="params">(weight, height, age, gender)</span>:</span></span><br><span class="line"><span class="string">"""计算BMI及体脂率</span></span><br><span class="line"><span class="string">:param weight: 体重（kg）</span></span><br><span class="line"><span class="string">:param height: 身高（m）</span></span><br><span class="line"><span class="string">:param age: 年龄（岁）</span></span><br><span class="line"><span class="string">:param gender: 性别（男--1，女--0）</span></span><br><span class="line"><span class="string">:returns: 体脂率，float</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># BMI</span></span><br><span class="line">BMI = weight /(height*height)</span><br><span class="line"><span class="comment"># 体脂率 </span></span><br><span class="line">BFR = <span class="number">1.2</span>*BMI + <span class="number">0.23</span>*age - <span class="number">5.4</span> - <span class="number">10.8</span>*gender</span><br><span class="line"><span class="keyword">return</span> BFR</span><br><span class="line"></span><br><span class="line">get_BFR(<span class="number">55</span>, <span class="number">1.7</span>, <span class="number">26</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 12.61737024221453</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-9-5 python  list 排序 sort、sorted</title>
      <link href="/2017/09/05/2017-9-5-python-list-%E6%8E%92%E5%BA%8F-sort%E3%80%81sorted/"/>
      <url>/2017/09/05/2017-9-5-python-list-%E6%8E%92%E5%BA%8F-sort%E3%80%81sorted/</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote><p>项目中，有一个list，list内部组成元素为dict，现需要根据dict中某个键的值来进行排序。</p></blockquote><a id="more"></a><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><blockquote><p> <code>reverse</code>: False–默认，正序；True–逆序，由大到小；<br> <code>key</code>: 可以根据<code>key</code>值自定义排序；<br> <code>sort</code>与<code>sorted</code>区别: <code>sort</code>list自身发生改变；<code>sorted</code>list本身不发生改变。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">6</span>]        </span><br><span class="line"> </span><br><span class="line"> <span class="comment"># sorted 用法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a)                  <span class="comment">#将a从小到大排序,不影响a本身结构 </span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a,reverse = <span class="keyword">True</span>)   <span class="comment">#将a从大到小排序,不影响a本身结构 </span></span><br><span class="line">[<span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>] </span><br><span class="line"> </span><br><span class="line"> <span class="comment"># sort 用法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()                   <span class="comment">#将a从小到大排序,影响a本身结构 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort(reverse = <span class="keyword">True</span>)     <span class="comment">#将a从大到小排序,影响a本身结构 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a </span><br><span class="line">[<span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>] </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注意，a.sort() 已改变其结构，b = a.sort() 是错误的写法! </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非数字排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">'aa'</span>,<span class="string">'BB'</span>,<span class="string">'bb'</span>,<span class="string">'zz'</span>,<span class="string">'CC'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(b) </span><br><span class="line">[<span class="string">'BB'</span>, <span class="string">'CC'</span>, <span class="string">'aa'</span>, <span class="string">'bb'</span>, <span class="string">'zz'</span>]    <span class="comment">#按列表中元素每个字母的ascii码从小到大排序,如果要从大到小,请用sorted(b,reverse=True)下同 </span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 根据key值自定义排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c =[<span class="string">'CCC'</span>, <span class="string">'bb'</span>, <span class="string">'ffff'</span>, <span class="string">'z'</span>]  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(c,key=len)             <span class="comment">#按列表的元素的长度排序 </span></span><br><span class="line">[<span class="string">'z'</span>, <span class="string">'bb'</span>, <span class="string">'CCC'</span>, <span class="string">'ffff'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d =[<span class="string">'CCC'</span>, <span class="string">'bb'</span>, <span class="string">'ffff'</span>, <span class="string">'z'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(d,key = str.lower )    <span class="comment">#将列表中的每个元素变为小写，再按每个元素中的每个字母的ascii码从小到大排序 </span></span><br><span class="line">[<span class="string">'bb'</span>, <span class="string">'CCC'</span>, <span class="string">'ffff'</span>, <span class="string">'z'</span>] </span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">lastchar</span><span class="params">(s)</span>:</span> </span><br><span class="line">       <span class="keyword">return</span> s[<span class="number">-1</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = [<span class="string">'abc'</span>,<span class="string">'b'</span>,<span class="string">'AAz'</span>,<span class="string">'ef'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(e,key = lastchar)      <span class="comment">#自定义函数排序,lastchar为函数名，这个函数返回列表e中每个元素的最后一个字母 </span></span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'abc'</span>, <span class="string">'ef'</span>, <span class="string">'AAz'</span>]         <span class="comment">#sorted(e,key=lastchar)作用就是 按列表e中每个元素的最后一个字母的ascii码从小到大排序 </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = [&#123;<span class="string">'name'</span>:<span class="string">'abc'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'def'</span>,<span class="string">'age'</span>:<span class="number">30</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'ghi'</span>,<span class="string">'age'</span>:<span class="number">25</span>&#125;]     <span class="comment">#列表中的元素为字典 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(s)</span>:</span> </span><br><span class="line">       <span class="keyword">return</span> s[<span class="string">'age'</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ff = sorted(f,key = age)      <span class="comment">#自定义函数按列表f中字典的age从小到大排序  </span></span><br><span class="line">[&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'abc'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">25</span>, <span class="string">'name'</span>: <span class="string">'ghi'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'name'</span>: <span class="string">'def'</span>&#125;] </span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = sorted(f,key = <span class="keyword">lambda</span> x:x[<span class="string">'age'</span>])    <span class="comment">#如果觉得上面定义一个函数代码不美观，可以用lambda的形式来定义函数,效果[&#123;'age': 20, 'name': 'abc'&#125;, &#123;'age': 25, 'name': 'ghi'&#125;, &#123;'age': 30, 'name': 'def'&#125;]</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> list </tag>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-31 自动 生成注释文档（docstring）</title>
      <link href="/2017/08/31/2017-8-31-python-%E8%87%AA%E5%8A%A8-%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E6%96%87%E6%A1%A3%EF%BC%88docstring%EF%BC%89/"/>
      <url>/2017/08/31/2017-8-31-python-%E8%87%AA%E5%8A%A8-%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E6%96%87%E6%A1%A3%EF%BC%88docstring%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote><p>项目中，发现很多函数、类没有注释说明，一个个弄比较繁琐，所以……</p></blockquote><a id="more"></a><h3 id="docstring定义："><a href="#docstring定义：" class="headerlink" title="docstring定义："></a><code>docstring</code>定义：</h3><blockquote><p>官方：A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition. Such a docstring becomes the <strong>doc</strong> special attribute of that object；<br>人话：“出现在模块、函数、类、方法里的第一个语句，就叫做<code>docsting</code>”；<br>调用：使用<code>__doc__</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="string">""" This is function foo"""</span></span><br><span class="line"></span><br><span class="line">foo.__doc__</span><br><span class="line"><span class="comment">#  This is function foo</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="docstring风格："><a href="#docstring风格：" class="headerlink" title="docstring风格："></a><code>docstring</code>风格：</h3><blockquote><p>主要四种：<code>javadoc</code>(<code>Epytext</code>), <code>reST</code>, <code>numpydoc</code>, <code>google</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Epytext</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">This is a javadoc style.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">@param param1: this is a first param</span></span><br><span class="line"><span class="string">@param param2: this is a second param</span></span><br><span class="line"><span class="string">@return: this is a description of what is returned</span></span><br><span class="line"><span class="string">@raise keyError: raises an exception</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reST（推荐，reST风格，Sphinx的御用格式）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">This is a reST style.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">:param param1: this is a first param</span></span><br><span class="line"><span class="string">:param param2: this is a second param</span></span><br><span class="line"><span class="string">:returns: this is a description of what is returned</span></span><br><span class="line"><span class="string">:raises keyError: raises an exception</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">This is a groups style docs.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Parameters:</span></span><br><span class="line"><span class="string">  param1 - this is the first param</span></span><br><span class="line"><span class="string">  param2 - this is a second param</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">  This is a description of what is returned</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Raises:</span></span><br><span class="line"><span class="string">  KeyError - raises an exception</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Numpydoc (Numpy风格)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">My numpydoc description of a kind</span></span><br><span class="line"><span class="string">of very exhautive numpydoc format docstring.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Parameters</span></span><br><span class="line"><span class="string">----------</span></span><br><span class="line"><span class="string">first : array_like</span></span><br><span class="line"><span class="string">  the 1st param name `first`</span></span><br><span class="line"><span class="string">second :</span></span><br><span class="line"><span class="string">  the 2nd param</span></span><br><span class="line"><span class="string">third : &#123;'value', 'other'&#125;, optional</span></span><br><span class="line"><span class="string">  the 3rd param, by default 'value'</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Returns</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">string</span></span><br><span class="line"><span class="string">  a value in a string</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Raises</span></span><br><span class="line"><span class="string">------</span></span><br><span class="line"><span class="string">KeyError</span></span><br><span class="line"><span class="string">  when a key error</span></span><br><span class="line"><span class="string">OtherError</span></span><br><span class="line"><span class="string">  when an other error</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="转换工具pyment"><a href="#转换工具pyment" class="headerlink" title="转换工具pyment"></a>转换工具<a href="https://github.com/dadadel/pyment" target="_blank" rel="noopener"><code>pyment</code></a></h3><blockquote><p>用来创建、转换<code>docsting</code>，<a href="https://github.com/dadadel/pyment" target="_blank" rel="noopener">点击查看安装</a><br>centos中可能使用不了<code>patch</code>，<a href="http://centos-packages.com/7/package/patch/" target="_blank" rel="noopener">点击下载安装包</a><br><code>pyment</code>命令帮助：<code>pyment -h</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pyment</span></span><br><span class="line">$ git clone https://github.com/dadadel/pyment.git  <span class="comment"># or git@github.com:dadadel/pyment.git</span></span><br><span class="line">$ cd pyment</span><br><span class="line">$ python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装patch</span></span><br><span class="line"><span class="comment"># 下载安装包：http://centos-packages.com/7/package/patch/</span></span><br><span class="line">rpm -i patch<span class="number">-2.7</span><span class="number">.1</span><span class="number">-8.</span>el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法</span></span><br><span class="line">$ pyment test.py      <span class="comment">#生成patch</span></span><br><span class="line">$ patch -p1 &lt; test.py.patch <span class="comment">#打patch</span></span><br></pre></td></tr></table></figure><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><blockquote><p>注释前<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(param1=True, param2=<span class="string">'default val'</span>)</span>:</span></span><br><span class="line">    <span class="string">'''Description of func with docstring groups style.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Params:</span></span><br><span class="line"><span class="string">        param1 - descr of param1 that has True for default value.</span></span><br><span class="line"><span class="string">        param2 - descr of param2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        some value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        keyError: raises key exception</span></span><br><span class="line"><span class="string">        TypeError: raises type exception</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, param1, param2=None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行<code>pyment test.py</code>，得到<code>patch</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># Patch generated by Pyment v0.2.0</span><br><span class="line"></span><br><span class="line">--- a/test.py</span><br><span class="line">+++ b/test.py</span><br><span class="line">@@ -1,20 +1,22 @@</span><br><span class="line"> def func(param1=True, param2=&apos;default val&apos;):</span><br><span class="line">-    &apos;&apos;&apos;Description of func with docstring groups style.</span><br><span class="line">+    &quot;&quot;&quot;Description of func with docstring groups style.</span><br><span class="line"></span><br><span class="line">-    Params:</span><br><span class="line">-        param1 - descr of param1 that has True for default value.</span><br><span class="line">-        param2 - descr of param2</span><br><span class="line">+    :param param1: descr of param1 that has True for default value</span><br><span class="line">+    :param param2: descr of param2 (Default value = &apos;default val&apos;)</span><br><span class="line">+    :returns: some value</span><br><span class="line">+    :raises keyError: raises key exception</span><br><span class="line">+    :raises TypeError: raises type exception</span><br><span class="line"></span><br><span class="line">-    Returns:</span><br><span class="line">-        some value</span><br><span class="line">-</span><br><span class="line">-    Raises:</span><br><span class="line">-        keyError: raises key exception</span><br><span class="line">-        TypeError: raises type exception</span><br><span class="line">-</span><br><span class="line">-    &apos;&apos;&apos;</span><br><span class="line">+    &quot;&quot;&quot;</span><br><span class="line">     pass</span><br><span class="line"></span><br><span class="line"> class A:</span><br><span class="line">+    &quot;&quot;&quot; &quot;&quot;&quot;</span><br><span class="line">     def method(self, param1, param2=None):</span><br><span class="line">+        &quot;&quot;&quot;</span><br><span class="line">+</span><br><span class="line">+        :param param1:</span><br><span class="line">+        :param param2:  (Default value = None)</span><br><span class="line">+</span><br><span class="line">+        &quot;&quot;&quot;</span><br><span class="line">         pass</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>执行<code>patch -p1 &lt; test.py.patch</code>，注释后得到</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(param1=True, param2=<span class="string">'default val'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Description of func with docstring groups style.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param param1: descr of param1 that has True for default value</span></span><br><span class="line"><span class="string">    :param param2: descr of param2 (Default value = 'default val')</span></span><br><span class="line"><span class="string">    :returns: some value</span></span><br><span class="line"><span class="string">    :raises keyError: raises key exception</span></span><br><span class="line"><span class="string">    :raises TypeError: raises type exception</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="string">""" """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, param1, param2=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param param1:</span></span><br><span class="line"><span class="string">        :param param2:  (Default value = None)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><blockquote><p>使用<code>sphinx</code>的<code>autodoc</code>自动从<code>docstring</code>生产api文档, 避免重复工作，再娄一遍Api文档。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> Docstring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-31 python  two sum 问题</title>
      <link href="/2017/08/31/2017-8-31-python-two-sum-%E9%97%AE%E9%A2%98/"/>
      <url>/2017/08/31/2017-8-31-python-two-sum-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><blockquote><p>来自<code>LeetCode</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Time:  O(n)</span><br><span class="line"># Space: O(n)</span><br><span class="line"></span><br><span class="line"># Given an array of integers, return indices of the two numbers</span><br><span class="line"># such that they add up to a specific target.</span><br><span class="line">#</span><br><span class="line"># You may assume that each input would have exactly one solution.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line"># Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line">#</span><br><span class="line"># Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line"># return [0, 1].</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Python-解法："><a href="#Python-解法：" class="headerlink" title="Python 解法："></a>Python 解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        lookup = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> lookup:</span><br><span class="line">                <span class="keyword">return</span> [lookup[target - num], i]</span><br><span class="line">            lookup[num] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum2</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            j = target - i</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            tmp_nums = nums[k:]</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">in</span> tmp_nums:</span><br><span class="line">                <span class="keyword">return</span> [k - <span class="number">1</span>, tmp_nums.index(j) + k]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> Solution().twoSum((<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>), <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="comment"># med = a[int(len(a)/2)]</span></span><br><span class="line">    c=[<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(a):</span><br><span class="line">        <span class="keyword">for</span> j,k <span class="keyword">in</span> enumerate(a[i+<span class="number">1</span>:]):</span><br><span class="line">            c = [i, i+j+<span class="number">1</span>] <span class="keyword">if</span> v+k==b <span class="keyword">else</span> c</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main2</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    dict 存放查值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    c = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        <span class="keyword">if</span> b - a[i] <span class="keyword">in</span> c:</span><br><span class="line">            <span class="keyword">return</span> [c[b-a[i]], i]</span><br><span class="line">        c[a[i]] = i</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_number</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    dict 存放差值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> len(a) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    c = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        <span class="keyword">if</span> a[i] <span class="keyword">in</span> c:</span><br><span class="line">            <span class="keyword">return</span> [c[a[i]], i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c[b - a[i]] = i</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main3</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        <span class="keyword">if</span> (b - a[len(a)-i<span class="number">-1</span>]) <span class="keyword">in</span> a[:len(a)-i<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> [a.index((b - a[len(a)-i<span class="number">-1</span>])),len(a)-i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main4</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># print [[a.index((b - a[len(a)-i-1])),len(a)-i-1] for i in range(len(a)) if (b - a[len(a)-i-1]) in a[:len(a)-i-1]]</span></span><br><span class="line">        <span class="keyword">return</span> [[a.index((b - a[len(a)-i<span class="number">-1</span>])),len(a)-i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)) <span class="keyword">if</span> (b - a[len(a)-i<span class="number">-1</span>]) <span class="keyword">in</span> a[:len(a)-i<span class="number">-1</span>]][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main5</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[a.index((b - a[len(a)-i<span class="number">-1</span>])),len(a)-i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)) <span class="keyword">if</span> (b - a[len(a)-i<span class="number">-1</span>]) <span class="keyword">in</span> a[:len(a)-i<span class="number">-1</span>]].pop()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main6</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [[a.index(b-j), i] <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(a) <span class="keyword">if</span> a.count(b-j) &gt; <span class="number">0</span> <span class="keyword">and</span> a.index(b-j)!=i].pop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = range(<span class="number">20</span>)</span><br><span class="line">    b = <span class="number">18</span></span><br><span class="line">    <span class="comment"># a = [49,1,2,3,50,51]</span></span><br><span class="line">    <span class="comment"># b=99</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'list:&#123;&#125;,data:&#123;&#125;'</span>.format(a,b)</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">print</span> main(a,b)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'main_time_used:&#123;&#125;'</span>.format(time.time()-start)</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">print</span> main2(a,b)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'main2_time_used:&#123;&#125;'</span>.format(time.time()-start)</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">print</span> main3(a,b)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'main3_time_used:&#123;&#125;'</span>.format(time.time()-start)</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">print</span> main4(a,b)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'main4_time_used:&#123;&#125;'</span>.format(time.time()-start)</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">print</span> main5(a,b)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'main5_time_used:&#123;&#125;'</span>.format(time.time()-start)</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">print</span> main6(a,b)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'main6_time_used:&#123;&#125;'</span>.format(time.time()-start)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-28 python interval  区间处理</title>
      <link href="/2017/08/28/2017-8-28-python-interval-%E5%8C%BA%E9%97%B4%E5%A4%84%E7%90%86/"/>
      <url>/2017/08/28/2017-8-28-python-interval-%E5%8C%BA%E9%97%B4%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>volume1 = Interval.between(<span class="string">"A"</span>, <span class="string">"Foe"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>volume2 = Interval.between(<span class="string">"Fog"</span>, <span class="string">"McAfee"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>volume3 = Interval.between(<span class="string">"McDonalds"</span>, <span class="string">"Space"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>volume4 = Interval.between(<span class="string">"Spade"</span>, <span class="string">"Zygote"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encyclopedia = IntervalSet([volume1, volume2, volume3, volume4])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySet = IntervalSet([volume1, volume3, volume4])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Meteor"</span> <span class="keyword">in</span> encyclopedia</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Goose"</span> <span class="keyword">in</span> encyclopedia</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Goose"</span> <span class="keyword">in</span> mySet</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>volume2 <span class="keyword">in</span> (encyclopedia ^ mySet)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a= <span class="number">112</span> </span><br><span class="line">In [<span class="number">4</span>]:  a <span class="keyword">in</span> range(<span class="number">300</span>,<span class="number">400</span>) </span><br><span class="line">   ...: </span><br><span class="line">Out[<span class="number">4</span>]: <span class="keyword">False</span> </span><br><span class="line">In [<span class="number">5</span>]:  a <span class="keyword">in</span> range(<span class="number">101</span>,<span class="number">300</span>) </span><br><span class="line">   ...: </span><br><span class="line">Out[<span class="number">5</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">python强大的区间处理库interval用法介绍</span><br><span class="line">原文发表在我的博客主页，转载请注明出处</span><br><span class="line"></span><br><span class="line">前言</span><br><span class="line"></span><br><span class="line">这个库是在阅读别人的源码的时候看到的，觉得十分好用，然而在网上找到的相关资料甚少，所以阅读了源码来做一个简单的用法总结。在网络的路由表中，经常会通过掩码来表示流表的匹配域，在python中有的时候为了方便的模拟流表的匹配过程，可以通过一个整数区间来表示诸如IP等的匹配范围，而本文介绍的库在区间处理上是十分的强大与方便。</span><br><span class="line"></span><br><span class="line">用法举例</span><br><span class="line"></span><br><span class="line">不论是在Linux系统还是Windows系统上，我们都可以方便的安装pip或者easy_install库来方便的安装大多数python库，interval也不例外。</span><br><span class="line">在这个库中提供了两个主要的类，分别是Interval和IntervalSet两个类。</span><br><span class="line">Interval类描述了一个连续的范围区间，这个区间可以是闭、开、半闭半开、无穷的，他的区间值不一定是数字，可以包含任何的数据类型，比如字符串，时间等等，同时他和python的各种操作（&lt;, &lt;=, ==, &gt;=, &gt;等）也是兼容的。IntervalSet包含了一个或多个互不相交的Interval集合。下面的这几个例子是源码中的。</span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt;volume1 = Interval.between(<span class="string">"A"</span>, <span class="string">"Foe"</span>)</span><br><span class="line">&gt;&gt;&gt;volume2 = Interval.between(<span class="string">"Fog"</span>, <span class="string">"McAfee"</span>)</span><br><span class="line">&gt;&gt;&gt;volume3 = Interval.between(<span class="string">"McDonalds"</span>, <span class="string">"Space"</span>)</span><br><span class="line">&gt;&gt;&gt;volume4 = Interval.between(<span class="string">"Spade"</span>, <span class="string">"Zygote"</span>)</span><br><span class="line">&gt;&gt;&gt;encyclopedia = IntervalSet([volume1, volume2, volume3, volume4])</span><br><span class="line">&gt;&gt;&gt;mySet = IntervalSet([volume1, volume3, volume4])</span><br><span class="line">&gt;&gt;&gt;<span class="string">"Meteor"</span> <span class="keyword">in</span> encyclopedia</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"Goose"</span> <span class="keyword">in</span> encyclopedia</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"Goose"</span> <span class="keyword">in</span> mySet</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;volume2 <span class="keyword">in</span> (encyclopedia ^ mySet)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">前面的三个例子比较容易理解，最后一个例子中，encyclopedia的区别就是mySet多了一个volume2，而异或就是将两个集合中相同的元素去掉，不同的元素保留，所以最后只剩下了volume2。</span><br><span class="line">除了字符串，利用interval还可以很方便的处理时间，下面的例子同样来自于源码。</span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt;officeHours = IntervalSet.between(<span class="string">"08:00"</span>, <span class="string">"17:00"</span>)</span><br><span class="line">&gt;&gt;&gt;myLunch = IntervalSet.between(<span class="string">"11:30"</span>, <span class="string">"12:30"</span>)</span><br><span class="line">&gt;&gt;&gt;myHours = IntervalSet.between(<span class="string">"08:30"</span>, <span class="string">"19:30"</span>) - myLunch</span><br><span class="line">&gt;&gt;&gt;myHours.issubset(officeHours)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"12:00"</span> <span class="keyword">in</span> myHours</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">"15:30"</span> <span class="keyword">in</span> myHours</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;inOffice = officeHours &amp; myHours</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> inOffice</span><br><span class="line">[<span class="string">'08:30'</span>..<span class="string">'11:30'</span>),(<span class="string">'12:30'</span>..<span class="string">'17:00'</span>]</span><br><span class="line">&gt;&gt;&gt;overtime = myHours - officeHours</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> overtime</span><br><span class="line">(<span class="string">'17:00'</span>..<span class="string">'19:30'</span>]</span><br><span class="line">在前言中说道interval库可以处理IP地址，简单的列举应用如下：</span><br><span class="line"></span><br><span class="line"> <span class="comment"># coding</span></span><br><span class="line">r1 = IntervalSet([Interval(<span class="number">1</span>, <span class="number">1000</span>), Interval(<span class="number">1100</span>, <span class="number">1200</span>)])</span><br><span class="line">r2 = IntervalSet([Interval(<span class="number">30</span>, <span class="number">50</span>), Interval(<span class="number">60</span>, <span class="number">200</span>), Interval(<span class="number">1150</span>, <span class="number">1300</span>)])</span><br><span class="line"></span><br><span class="line">r3 = IntervalSet([Interval(<span class="number">1000</span>, <span class="number">3000</span>)])</span><br><span class="line">r4 = IntervalSet([Interval(<span class="number">1000</span>, <span class="number">3000</span>)])</span><br><span class="line">r5 = IntervalSet([Interval(<span class="number">30000</span>, <span class="number">12000</span>)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (r3 - r4), (r4 - r3), r3 &amp; r4</span><br><span class="line"><span class="keyword">print</span> len(IntervalSet.empty())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r3 &amp; r4 == r4:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'yes'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> r3 &amp; r4</span><br><span class="line"><span class="keyword">if</span> (r3 - r4).empty():</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"true"</span></span><br><span class="line"><span class="keyword">print</span> (r3 - r4).empty()</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">&lt;Empty&gt; &lt;Empty&gt; [<span class="number">1000.</span><span class="number">.3000</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line">yes</span><br><span class="line">[<span class="number">1000.</span><span class="number">.3000</span>]</span><br><span class="line">&lt;Empty&gt;</span><br><span class="line">常用方法</span><br><span class="line"></span><br><span class="line">interval对象初始化参数（lower_bound=-Inf, upper_bound=Inf, **kwargs）三个boolean参数closed,lower_closed,upper_closed分表表示全闭，左闭右开，左开右闭。比如：r = Interval(upper_bound=<span class="number">62</span>, closed=<span class="keyword">False</span>)</span><br><span class="line">between(a, b, closed=<span class="keyword">True</span>)：返回以a和b为界的区间</span><br><span class="line">less_than(a)：小于a的所有值构成interval，类似的还有less_than_or_equal_to，greater_than，greater_than_or_equal_to函数</span><br><span class="line">join(other)：将两个连续的intervals组合起来</span><br><span class="line">overlaps(other)：两个区间是否有重叠</span><br><span class="line">adjacent_to(other)：两个区间是否不重叠的毗邻</span><br><span class="line">总结</span><br><span class="line"></span><br><span class="line">是一篇总结文章，并没有什么深度，只是为了不再重复造轮子，在必要的时候一个库可以极大的提高效率。</span><br><span class="line">MeasureMeasure</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 区间 </tag>
            
            <tag> interval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-28 Pandas agg 使用lambda</title>
      <link href="/2017/08/28/2017-8-28-Pandas-agg-%E4%BD%BF%E7%94%A8lambda/"/>
      <url>/2017/08/28/2017-8-28-Pandas-agg-%E4%BD%BF%E7%94%A8lambda/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">N = <span class="number">100</span></span><br><span class="line">data = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">'type'</span>: np.random.randint(<span class="number">10</span>, size=N),</span><br><span class="line">    <span class="string">'status'</span>: np.random.randint(<span class="number">10</span>, size=N),</span><br><span class="line">    <span class="string">'name'</span>: np.random.randint(<span class="number">10</span>, size=N),</span><br><span class="line">    <span class="string">'value'</span>: np.random.randint(<span class="number">10</span>, size=N),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">reading = np.random.random(<span class="number">10</span>,)</span><br><span class="line"></span><br><span class="line">data = data.groupby([<span class="string">'type'</span>, <span class="string">'status'</span>, <span class="string">'name'</span>])[<span class="string">'value'</span>].agg(&#123;</span><br><span class="line">    <span class="string">'one'</span> : np.mean, </span><br><span class="line">    <span class="string">'two'</span> : <span class="keyword">lambda</span> value: <span class="number">100</span>* ((value&gt;<span class="number">32</span>).sum() / reading.mean()), </span><br><span class="line">    <span class="string">'test2'</span>: <span class="keyword">lambda</span> value: <span class="number">100</span>* ((value &gt; <span class="number">45</span>).sum() / value.mean())</span><br><span class="line">&#125;)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><h3 id="获取一列数据中最大值"><a href="#获取一列数据中最大值" class="headerlink" title="获取一列数据中最大值"></a>获取一列数据中最大值</h3><p><code>`</code>python<br>In [34]: df.loc[df[‘Value’].idxmax()]<br>Out[34]:<br>Country        US<br>Place      Kansas<br>Value         894<br>Name: 7</p><p>df = df.reset_index()</p><p>data.groupby([‘Country’,’Place’])[‘Value’].max().item()</p><p>df.groupby([‘country’,’place’], as_index=False)[‘value’].max()</p><p>df.groupby(“country”).apply(lambda df:df.irow(df.value.argmax()))</p><p>In [5]: df = pandas.DataFrame(np.random.randn(10,3),columns=[‘A’,’B’,’C’])</p><p>In [6]: df<br>Out[6]:<br>          A         B         C<br>0  2.001289  0.482561  1.579985<br>1 -0.991646 -0.387835  1.320236<br>2  0.143826 -1.096889  1.486508<br>3 -0.193056 -0.499020  1.536540<br>4 -2.083647 -3.074591  0.175772<br>5 -0.186138 -1.949731  0.287432<br>6 -0.480790 -1.771560 -0.930234<br>7  0.227383 -0.278253  2.102004<br>8 -0.002592  1.434192 -1.624915<br>9  0.404911 -2.167599 -0.452900</p><p>In [7]: df.idxmax()<br>Out[7]:<br>A    0<br>B    8<br>C    7</p><p>In [8]: df.ix[df[‘A’].idxmax()]<br>Out[8]:<br>A    2.001289<br>B    0.482561<br>C    1.579985</p><p>···</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> lambda </tag>
            
            <tag> agg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-27 dataframe与序列相乘</title>
      <link href="/2017/08/27/2017-8-27-Pandas-dataframe%E4%B8%8E%E5%BA%8F%E5%88%97%E7%9B%B8%E4%B9%98/"/>
      <url>/2017/08/27/2017-8-27-Pandas-dataframe%E4%B8%8E%E5%BA%8F%E5%88%97%E7%9B%B8%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote><p>继续完成项目中的评分卡部分，拿到分好箱的数据后，如何进行加权得到最后的分数就是我们接下来要考虑的问题了。</p></blockquote><a id="more"></a><h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1:"></a>demo1:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = dataframe.mul(series, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2:"></a>demo2:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tile_df</span><span class="params">(df, n, m)</span>:</span></span><br><span class="line"> dfn = df.T</span><br><span class="line"> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, m):</span><br><span class="line"> dfn = dfn.append(df.T, ignore_index=<span class="keyword">True</span>)</span><br><span class="line"> dfm = dfn.T</span><br><span class="line"> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line"> dfm = dfm.append(dfn.T, ignore_index=<span class="keyword">True</span>)</span><br><span class="line"> <span class="keyword">return</span> dfm</span><br><span class="line"> </span><br><span class="line">df = pandas.DataFrame([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tile_df(df, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 0 1 2 3 4 5</span></span><br><span class="line"><span class="comment"># 0 1 2 1 2 1 2</span></span><br><span class="line"><span class="comment"># 1 3 4 3 4 3 4</span></span><br><span class="line"><span class="comment"># 2 1 2 1 2 1 2</span></span><br><span class="line"><span class="comment"># 3 3 4 3 4 3 4</span></span><br></pre></td></tr></table></figure><h4 id="demo3"><a href="#demo3" class="headerlink" title="demo3:"></a>demo3:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">7</span>  <span class="number">7</span>  <span class="number">5</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">6</span></span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">4</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">9</span>  <span class="number">5</span></span><br><span class="line"><span class="number">4</span>  <span class="number">3</span>  <span class="number">8</span>  <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.prod(axis=<span class="number">1</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">245</span></span><br><span class="line"><span class="number">1</span>     <span class="number">48</span></span><br><span class="line"><span class="number">2</span>    <span class="number">128</span></span><br><span class="line"><span class="number">3</span>     <span class="number">90</span></span><br><span class="line"><span class="number">4</span>    <span class="number">168</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">9</span>  <span class="number">3</span>  <span class="number">3</span></span><br><span class="line"><span class="number">1</span>  <span class="number">8</span>  <span class="number">5</span>  <span class="number">4</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"><span class="number">3</span>  <span class="number">9</span>  <span class="number">8</span>  <span class="number">5</span></span><br><span class="line"><span class="number">4</span>  <span class="number">7</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.apply(np.prod, axis=<span class="number">1</span>)</span><br><span class="line"><span class="number">0</span>     <span class="number">81</span></span><br><span class="line"><span class="number">1</span>    <span class="number">160</span></span><br><span class="line"><span class="number">2</span>    <span class="number">126</span></span><br><span class="line"><span class="number">3</span>    <span class="number">360</span></span><br><span class="line"><span class="number">4</span>     <span class="number">14</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h4 id="demo4"><a href="#demo4" class="headerlink" title="demo4:"></a>demo4:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">In[<span class="number">197</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">In [<span class="number">198</span>]: df = pd.DataFrame(np.arange(<span class="number">40.</span>).reshape((<span class="number">8</span>, <span class="number">5</span>)), columns=list(<span class="string">'abcde'</span>));</span><br><span class="line"></span><br><span class="line">In [<span class="number">199</span>]: df</span><br><span class="line">Out[<span class="number">199</span>]:</span><br><span class="line">      a     b     c     d     e</span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span>   <span class="number">4.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">5.0</span>   <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span>   <span class="number">9.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">10.0</span>  <span class="number">11.0</span>  <span class="number">12.0</span>  <span class="number">13.0</span>  <span class="number">14.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">15.0</span>  <span class="number">16.0</span>  <span class="number">17.0</span>  <span class="number">18.0</span>  <span class="number">19.0</span></span><br><span class="line"><span class="number">4</span>  <span class="number">20.0</span>  <span class="number">21.0</span>  <span class="number">22.0</span>  <span class="number">23.0</span>  <span class="number">24.0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">25.0</span>  <span class="number">26.0</span>  <span class="number">27.0</span>  <span class="number">28.0</span>  <span class="number">29.0</span></span><br><span class="line"><span class="number">6</span>  <span class="number">30.0</span>  <span class="number">31.0</span>  <span class="number">32.0</span>  <span class="number">33.0</span>  <span class="number">34.0</span></span><br><span class="line"><span class="number">7</span>  <span class="number">35.0</span>  <span class="number">36.0</span>  <span class="number">37.0</span>  <span class="number">38.0</span>  <span class="number">39.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">200</span>]: ser = pd.Series(np.arange(<span class="number">8</span>) * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">In [<span class="number">201</span>]: ser</span><br><span class="line">Out[<span class="number">201</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">10</span></span><br><span class="line"><span class="number">2</span>    <span class="number">20</span></span><br><span class="line"><span class="number">3</span>    <span class="number">30</span></span><br><span class="line"><span class="number">4</span>    <span class="number">40</span></span><br><span class="line"><span class="number">5</span>    <span class="number">50</span></span><br><span class="line"><span class="number">6</span>    <span class="number">60</span></span><br><span class="line"><span class="number">7</span>    <span class="number">70</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">202</span>]: func = <span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser)</span><br><span class="line"></span><br><span class="line">In [<span class="number">203</span>]: df.apply(func)</span><br><span class="line">Out[<span class="number">203</span>]:</span><br><span class="line">        a       b       c       d       e</span><br><span class="line"><span class="number">0</span>     <span class="number">0.0</span>     <span class="number">0.0</span>     <span class="number">0.0</span>     <span class="number">0.0</span>     <span class="number">0.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">50.0</span>    <span class="number">60.0</span>    <span class="number">70.0</span>    <span class="number">80.0</span>    <span class="number">90.0</span></span><br><span class="line"><span class="number">2</span>   <span class="number">200.0</span>   <span class="number">220.0</span>   <span class="number">240.0</span>   <span class="number">260.0</span>   <span class="number">280.0</span></span><br><span class="line"><span class="number">3</span>   <span class="number">450.0</span>   <span class="number">480.0</span>   <span class="number">510.0</span>   <span class="number">540.0</span>   <span class="number">570.0</span></span><br><span class="line"><span class="number">4</span>   <span class="number">800.0</span>   <span class="number">840.0</span>   <span class="number">880.0</span>   <span class="number">920.0</span>   <span class="number">960.0</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1250.0</span>  <span class="number">1300.0</span>  <span class="number">1350.0</span>  <span class="number">1400.0</span>  <span class="number">1450.0</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1800.0</span>  <span class="number">1860.0</span>  <span class="number">1920.0</span>  <span class="number">1980.0</span>  <span class="number">2040.0</span></span><br><span class="line"><span class="number">7</span>  <span class="number">2450.0</span>  <span class="number">2520.0</span>  <span class="number">2590.0</span>  <span class="number">2660.0</span>  <span class="number">2730.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">204</span>]: df.apply(func).a</span><br><span class="line">Out[<span class="number">204</span>]:</span><br><span class="line"><span class="number">0</span>       <span class="number">0.0</span></span><br><span class="line"><span class="number">1</span>      <span class="number">50.0</span></span><br><span class="line"><span class="number">2</span>     <span class="number">200.0</span></span><br><span class="line"><span class="number">3</span>     <span class="number">450.0</span></span><br><span class="line"><span class="number">4</span>     <span class="number">800.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">1250.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1800.0</span></span><br><span class="line"><span class="number">7</span>    <span class="number">2450.0</span></span><br><span class="line">Name: a, dtype: float64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行相乘</span></span><br><span class="line">In[<span class="number">205</span>]: ser2 = pd.Series(np.arange(<span class="number">5</span>) *<span class="number">5</span>); </span><br><span class="line"></span><br><span class="line">In [<span class="number">206</span>]: ser2</span><br><span class="line">Out[<span class="number">206</span>]: </span><br><span class="line"> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"> <span class="number">2</span> <span class="number">10</span></span><br><span class="line"> <span class="number">3</span> <span class="number">15</span></span><br><span class="line"> <span class="number">4</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">In[<span class="number">207</span>]: func2 = <span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser2)</span><br><span class="line"></span><br><span class="line">In[<span class="number">8</span>]: df.apply(func2, axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">208</span>]: </span><br><span class="line"> a b c d e</span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">20</span> <span class="number">45</span> <span class="number">80</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">30</span> <span class="number">70</span> <span class="number">120</span> <span class="number">180</span></span><br><span class="line"> <span class="number">2</span> <span class="number">0</span> <span class="number">55</span> <span class="number">120</span> <span class="number">195</span> <span class="number">280</span></span><br><span class="line"> <span class="number">3</span> <span class="number">0</span> <span class="number">80</span> <span class="number">170</span> <span class="number">270</span> <span class="number">380</span></span><br><span class="line"> <span class="number">4</span> <span class="number">0</span> <span class="number">105</span> <span class="number">220</span> <span class="number">345</span> <span class="number">480</span></span><br><span class="line"> <span class="number">5</span> <span class="number">0</span> <span class="number">130</span> <span class="number">270</span> <span class="number">420</span> <span class="number">580</span></span><br><span class="line"> <span class="number">6</span> <span class="number">0</span> <span class="number">155</span> <span class="number">320</span> <span class="number">495</span> <span class="number">680</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0</span> <span class="number">180</span> <span class="number">370</span> <span class="number">570</span> <span class="number">780</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 进阶版</span></span><br><span class="line">In[<span class="number">209</span>]: df.apply(<span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser))</span><br><span class="line">Out[<span class="number">209</span>]: </span><br><span class="line"> a b c d e</span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">50</span> <span class="number">60</span> <span class="number">70</span> <span class="number">80</span> <span class="number">90</span></span><br><span class="line"> <span class="number">2</span> <span class="number">200</span> <span class="number">220</span> <span class="number">240</span> <span class="number">260</span> <span class="number">280</span></span><br><span class="line"> <span class="number">3</span> <span class="number">450</span> <span class="number">480</span> <span class="number">510</span> <span class="number">540</span> <span class="number">570</span></span><br><span class="line"> <span class="number">4</span> <span class="number">800</span> <span class="number">840</span> <span class="number">880</span> <span class="number">920</span> <span class="number">960</span></span><br><span class="line"> <span class="number">5</span> <span class="number">1250</span> <span class="number">1300</span> <span class="number">1350</span> <span class="number">1400</span> <span class="number">1450</span></span><br><span class="line"> <span class="number">6</span> <span class="number">1800</span> <span class="number">1860</span> <span class="number">1920</span> <span class="number">1980</span> <span class="number">2040</span></span><br><span class="line"> <span class="number">7</span> <span class="number">2450</span> <span class="number">2520</span> <span class="number">2590</span> <span class="number">2660</span> <span class="number">2730</span></span><br><span class="line"> </span><br><span class="line">In [<span class="number">210</span>]: df.apply(<span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser)).a</span><br><span class="line">Out[<span class="number">210</span>]:</span><br><span class="line"><span class="number">0</span>       <span class="number">0.0</span></span><br><span class="line"><span class="number">1</span>      <span class="number">50.0</span></span><br><span class="line"><span class="number">2</span>     <span class="number">200.0</span></span><br><span class="line"><span class="number">3</span>     <span class="number">450.0</span></span><br><span class="line"><span class="number">4</span>     <span class="number">800.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">1250.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1800.0</span></span><br><span class="line"><span class="number">7</span>    <span class="number">2450.0</span></span><br><span class="line">Name: a, dtype: float64</span><br><span class="line"></span><br><span class="line">In[<span class="number">211</span>]: df.apply(<span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser2), axis=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">211</span>]:</span><br><span class="line"> a b c d e</span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">20</span> <span class="number">45</span> <span class="number">80</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">30</span> <span class="number">70</span> <span class="number">120</span> <span class="number">180</span></span><br><span class="line"> <span class="number">2</span> <span class="number">0</span> <span class="number">55</span> <span class="number">120</span> <span class="number">195</span> <span class="number">280</span></span><br><span class="line"> <span class="number">3</span> <span class="number">0</span> <span class="number">80</span> <span class="number">170</span> <span class="number">270</span> <span class="number">380</span></span><br><span class="line"> <span class="number">4</span> <span class="number">0</span> <span class="number">105</span> <span class="number">220</span> <span class="number">345</span> <span class="number">480</span></span><br><span class="line"> <span class="number">5</span> <span class="number">0</span> <span class="number">130</span> <span class="number">270</span> <span class="number">420</span> <span class="number">580</span></span><br><span class="line"> <span class="number">6</span> <span class="number">0</span> <span class="number">155</span> <span class="number">320</span> <span class="number">495</span> <span class="number">680</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0</span> <span class="number">180</span> <span class="number">370</span> <span class="number">570</span> <span class="number">780</span></span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p>这样，我们总分也就拿到了，最后只需将每个项目的总分求和即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> DataFrame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-27 python 协程加速</title>
      <link href="/2017/08/27/2017-8-27-python-%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F/"/>
      <url>/2017/08/27/2017-8-27-python-%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote><p>上周，由于产品嫌报告生成太慢，经过使用<code>profile/gprof2dot</code>研究后，发现主要时间耗费在接口网络请求上，于是我决定在项目中大量处理I/O网络请求的地方使用<code>gevent</code>,以缓解报告生成压力。</p></blockquote><a id="more"></a><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey, pool</span><br><span class="line">monkey.patch_socket()</span><br><span class="line">p = pool.Pool(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requests_parse</span><span class="params">(self, tel_tuple)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">主要处理requests请求</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">'Size of pool'</span>, len(p))</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_label</span><span class="params">(self, tel_data)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用gevent实现协程处理I/O网络请求</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">jobs = [p.spawn(self.requests_parse, tel) <span class="keyword">for</span> tel <span class="keyword">in</span> tel_data]</span><br><span class="line">gevent.joinall(jobs)</span><br><span class="line"></span><br><span class="line">tlist = [x.value <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">in</span> tlist:</span><br><span class="line">message_list = [x.exception <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</span><br><span class="line">self.logger.error(tlist)</span><br><span class="line">self.logger.error(message_list)</span><br><span class="line"><span class="keyword">raise</span> Exception(message_list)</span><br><span class="line"><span class="keyword">return</span> tlist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_data_step</span><span class="params">(self, tel)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">主要将请求回来处理好的数据写入数据库（mongo）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">res = self.db.update()</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">tel_data = [……] <span class="comment"># 一大堆待请求参数list</span></span><br><span class="line">tlist = self.generator_label(set(tel_data))</span><br><span class="line">map(<span class="keyword">lambda</span> x: self.update_data_step(x[<span class="number">0</span>])(x[<span class="number">1</span>],x[<span class="number">2</span>],x[<span class="number">3</span>],x[<span class="number">4</span>],x[<span class="number">5</span>],x[<span class="number">6</span>]), tlist)</span><br></pre></td></tr></table></figure><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><blockquote><p>上线后发现，代码运行一段时间后，请求一上来，任务数直线上升，一直增加：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-8-27%20python%20%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F_1.png" alt="enter description here"><br>但是，pool的数量是正常的：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-8-27%20python%20%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F_2.png" alt="enter description here"><br>之后log里报错信息：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">"run.py"</span>, line <span class="number">42</span>, <span class="keyword">in</span> update_data</span><br><span class="line">  File <span class="string">"report/generate/calls_sa_by_tel.py"</span>, line <span class="number">396</span>, <span class="keyword">in</span> run</span><br><span class="line">  File <span class="string">"report/generate/calls_sa_by_tel.py"</span>, line <span class="number">38</span>, <span class="keyword">in</span> base_call</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/cursor.py"</span>, line <span class="number">729</span>, <span class="keyword">in</span> count</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/collection.py"</span>, line <span class="number">1344</span>, <span class="keyword">in</span> _count</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/mongo_client.py"</span>, line <span class="number">904</span>, <span class="keyword">in</span> _socket_for_reads</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/mongo_client.py"</span>, line <span class="number">870</span>, <span class="keyword">in</span> _get_socket</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/server.py"</span>, line <span class="number">168</span>, <span class="keyword">in</span> get_socket</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">844</span>, <span class="keyword">in</span> get_socket</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">881</span>, <span class="keyword">in</span> _get_socket_no_auth</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">817</span>, <span class="keyword">in</span> connect</span><br><span class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">263</span>, <span class="keyword">in</span> _raise_connection_failure</span><br><span class="line">AutoReconnect: xxx.xxx.xxx<span class="number">.117</span>:<span class="number">27017</span>: [Errno <span class="number">24</span>] Too many open files</span><br></pre></td></tr></table></figure><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><blockquote><p>经过分析，解决办法：<code>monkey.patch_socket()</code>换为<code>monkey.patch_all()</code>，或者，在使用完<code>gevent</code>后使用<code>reload(socket)</code>将socket初始化。<br>原因：应该是mongo写数据是阻塞的，请求快于写操作，导致写操作堆积越来越多，最终导致程序抛出<code>Too many open files</code>错误。<br>最终代码，如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey, pool</span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_label</span><span class="params">(self, tel_data)</span>:</span></span><br><span class="line">p = pool.Pool(<span class="number">10</span>)</span><br><span class="line">jobs = [p.spawn(self.requests_parse, tel) <span class="keyword">for</span> tel <span class="keyword">in</span> tel_data]</span><br><span class="line">gevent.joinall(jobs)</span><br><span class="line"><span class="comment"># print [x.value for x in jobs]</span></span><br><span class="line">tlist = [x.value <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">in</span> tlist:</span><br><span class="line">message_list = [x.exception <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</span><br><span class="line">self.logger.error(tlist)</span><br><span class="line">self.logger.error(message_list)</span><br><span class="line"><span class="keyword">raise</span> Exception(message_list)</span><br><span class="line"><span class="keyword">return</span> tlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line">p = pool.Pool(<span class="number">10</span>)</span><br><span class="line">jobs = [p.spawn(self.requests_parse, tel) <span class="keyword">for</span> tel <span class="keyword">in</span> tel_data]</span><br><span class="line">gevent.joinall(jobs)</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">reload(socket)</span><br></pre></td></tr></table></figure><h4 id="另一个用例："><a href="#另一个用例：" class="headerlink" title="另一个用例："></a>另一个用例：</h4><blockquote><p>给传递两个参数，直接后面跟着就行，逗号分开；<br>返回如是多个情况的，value是一个以tuple为元素的list。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p = pool.Pool(<span class="number">10</span>)</span><br><span class="line">jobs = []</span><br><span class="line"><span class="comment"># date ('2017-07-01', '2017-07-14')</span></span><br><span class="line">jobs = [p.spawn(self.crawl_a_call_log, date[<span class="number">0</span>], date[<span class="number">1</span>]) <span class="keyword">for</span> date <span class="keyword">in</span> dates]</span><br><span class="line">gevent.joinall(jobs)</span><br><span class="line">data_list = [x.value <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</span><br><span class="line"><span class="keyword">print</span> data_list</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">in</span> data_list:</span><br><span class="line">message_list = [x.exception <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</span><br><span class="line">self.log(<span class="string">'crawler'</span>, data_list, message_list)</span><br><span class="line"><span class="keyword">raise</span> Exception(message_list)</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>协程(gevent)是把双刃剑，monkey.patch 是一个邪恶的东西；<br>提升效果不要太好，耗时足足降了60%，而且，请求越多，效果越明显。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> gevent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-27 Pandas 分箱操作（cut）</title>
      <link href="/2017/08/27/2017-8-27-Pandas-%E5%88%86%E7%AE%B1%E6%93%8D%E4%BD%9C%EF%BC%88cut%EF%BC%89/"/>
      <url>/2017/08/27/2017-8-27-Pandas-%E5%88%86%E7%AE%B1%E6%93%8D%E4%BD%9C%EF%BC%88cut%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote><p>最新，项目中涉及到评分卡操作，评分项目有大概几十项，每项基本都是按频次区间给一个分数，最后，累计所有项目的分数得出最后所需要的分数。</p></blockquote><a id="more"></a><h3 id="demo1："><a href="#demo1：" class="headerlink" title="demo1："></a>demo1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pandas.DataFrame(&#123;<span class="string">"a"</span>: np.random.random(<span class="number">100</span>), <span class="string">"b"</span>: np.random.random(<span class="number">100</span>), <span class="string">"id"</span>: np.arange(<span class="number">100</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bin the data frame by "a" with 10 bins...</span></span><br><span class="line">bins = np.linspace(df.a.min(), df.a.max(), <span class="number">10</span>)</span><br><span class="line"><span class="comment"># array([ 0.00282977,  0.11097259,  0.2191154 ,  0.32725822,  0.43540104,</span></span><br><span class="line">        <span class="number">0.54354385</span>,  <span class="number">0.65168667</span>,  <span class="number">0.75982948</span>,  <span class="number">0.8679723</span> ,  <span class="number">0.97611511</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># bins = np.linspace(0, 1, 11) # 优化版</span></span><br><span class="line"><span class="comment"># array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])</span></span><br><span class="line"></span><br><span class="line">groups = df.groupby(np.digitize(df.a, bins))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the mean of each bin:</span></span><br><span class="line"><span class="keyword">print</span> groups.mean() <span class="comment"># Also could do "groups.aggregate(np.mean)"</span></span><br><span class="line">&gt;&gt;&gt;output:</span><br><span class="line">           a         b         id</span><br><span class="line"><span class="number">1</span>   <span class="number">0.044003</span>  <span class="number">0.525964</span>  <span class="number">56.307692</span></span><br><span class="line"><span class="number">2</span>   <span class="number">0.167568</span>  <span class="number">0.506078</span>  <span class="number">55.454545</span></span><br><span class="line"><span class="number">3</span>   <span class="number">0.268109</span>  <span class="number">0.510612</span>  <span class="number">44.636364</span></span><br><span class="line"><span class="number">4</span>   <span class="number">0.375014</span>  <span class="number">0.544154</span>  <span class="number">69.833333</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0.481702</span>  <span class="number">0.590031</span>  <span class="number">48.500000</span></span><br><span class="line"><span class="number">6</span>   <span class="number">0.599587</span>  <span class="number">0.488921</span>  <span class="number">38.076923</span></span><br><span class="line"><span class="number">7</span>   <span class="number">0.696548</span>  <span class="number">0.643555</span>  <span class="number">50.642857</span></span><br><span class="line"><span class="number">8</span>   <span class="number">0.830064</span>  <span class="number">0.620650</span>  <span class="number">50.571429</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0.928396</span>  <span class="number">0.545460</span>  <span class="number">44.166667</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0.976115</span>  <span class="number">0.693051</span>  <span class="number">28.000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly, the median:</span></span><br><span class="line"><span class="keyword">print</span> groups.median()</span><br><span class="line">&gt;&gt;&gt;output:</span><br><span class="line">          a         b    id</span><br><span class="line"><span class="number">1</span>   <span class="number">0.028901</span>  <span class="number">0.536857</span>  <span class="number">61.0</span></span><br><span class="line"><span class="number">2</span>   <span class="number">0.167054</span>  <span class="number">0.557716</span>  <span class="number">49.0</span></span><br><span class="line"><span class="number">3</span>   <span class="number">0.267337</span>  <span class="number">0.534911</span>  <span class="number">43.0</span></span><br><span class="line"><span class="number">4</span>   <span class="number">0.374787</span>  <span class="number">0.487063</span>  <span class="number">73.0</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0.480395</span>  <span class="number">0.737007</span>  <span class="number">49.5</span></span><br><span class="line"><span class="number">6</span>   <span class="number">0.603701</span>  <span class="number">0.676479</span>  <span class="number">42.0</span></span><br><span class="line"><span class="number">7</span>   <span class="number">0.695939</span>  <span class="number">0.689144</span>  <span class="number">57.5</span></span><br><span class="line"><span class="number">8</span>   <span class="number">0.836665</span>  <span class="number">0.690757</span>  <span class="number">41.0</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0.924245</span>  <span class="number">0.646487</span>  <span class="number">47.0</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0.976115</span>  <span class="number">0.693051</span>  <span class="number">28.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply some arbitrary function to aggregate binned data</span></span><br><span class="line"><span class="keyword">print</span> groups.aggregate(<span class="keyword">lambda</span> x: np.mean(x[x &gt; <span class="number">0.5</span>]))</span><br><span class="line">&gt;&gt;&gt;output:</span><br><span class="line">           a         b         id</span><br><span class="line"><span class="number">1</span>        NaN  <span class="number">0.671236</span>  <span class="number">56.307692</span></span><br><span class="line"><span class="number">2</span>        NaN  <span class="number">0.704379</span>  <span class="number">55.454545</span></span><br><span class="line"><span class="number">3</span>        NaN  <span class="number">0.768609</span>  <span class="number">44.636364</span></span><br><span class="line"><span class="number">4</span>        NaN  <span class="number">0.804354</span>  <span class="number">69.833333</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0.514166</span>  <span class="number">0.796151</span>  <span class="number">48.500000</span></span><br><span class="line"><span class="number">6</span>   <span class="number">0.599587</span>  <span class="number">0.755381</span>  <span class="number">41.250000</span></span><br><span class="line"><span class="number">7</span>   <span class="number">0.696548</span>  <span class="number">0.779524</span>  <span class="number">50.642857</span></span><br><span class="line"><span class="number">8</span>   <span class="number">0.830064</span>  <span class="number">0.766095</span>  <span class="number">50.571429</span></span><br><span class="line"><span class="number">9</span>   <span class="number">0.928396</span>  <span class="number">0.902529</span>  <span class="number">44.166667</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0.976115</span>  <span class="number">0.693051</span>  <span class="number">28.000000</span></span><br></pre></td></tr></table></figure><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2 :"></a>demo2 :</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line">df = pandas.DataFrame(&#123;<span class="string">"a"</span>: np.random.random(<span class="number">100</span>), </span><br><span class="line">                       <span class="string">"b"</span>: np.random.random(<span class="number">100</span>) + <span class="number">10</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bin the data frame by "a" with 10 bins...</span></span><br><span class="line">bins = np.linspace(df.a.min(), df.a.max(), <span class="number">10</span>)</span><br><span class="line">groups = df.groupby(pandas.cut(df.a, bins))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the mean of b, binned by the values in a</span></span><br><span class="line"><span class="keyword">print</span> groups.mean().b</span><br><span class="line">&gt;&gt;&gt;output:</span><br><span class="line">a</span><br><span class="line">(<span class="number">0.000351</span>, <span class="number">0.11</span>]    <span class="number">10.596542</span></span><br><span class="line">(<span class="number">0.11</span>, <span class="number">0.22</span>]        <span class="number">10.690010</span></span><br><span class="line">(<span class="number">0.22</span>, <span class="number">0.33</span>]        <span class="number">10.250080</span></span><br><span class="line">(<span class="number">0.33</span>, <span class="number">0.44</span>]        <span class="number">10.546134</span></span><br><span class="line">(<span class="number">0.44</span>, <span class="number">0.549</span>]       <span class="number">10.471454</span></span><br><span class="line">(<span class="number">0.549</span>, <span class="number">0.659</span>]      <span class="number">10.455624</span></span><br><span class="line">(<span class="number">0.659</span>, <span class="number">0.769</span>]      <span class="number">10.501616</span></span><br><span class="line">(<span class="number">0.769</span>, <span class="number">0.879</span>]      <span class="number">10.588354</span></span><br><span class="line">(<span class="number">0.879</span>, <span class="number">0.989</span>]      <span class="number">10.461848</span></span><br><span class="line">Name: b, dtype: float64</span><br></pre></td></tr></table></figure><h4 id="demo3"><a href="#demo3" class="headerlink" title="demo3:"></a>demo3:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">144</span>]: df = DataFrame(&#123;<span class="string">"a"</span>: np.random.random(<span class="number">100</span>), <span class="string">"b"</span>: np.random.random(<span class="number">100</span>), <span class="string">"id"</span>:   np.arange(<span class="number">100</span>)&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">145</span>]: bins = [<span class="number">0</span>, <span class="number">.25</span>, <span class="number">.5</span>, <span class="number">.75</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">146</span>]: a_bins = df.a.groupby(cut(df.a,bins))</span><br><span class="line"></span><br><span class="line">In [<span class="number">147</span>]: b_bins = df.b.groupby(cut(df.b,bins))</span><br><span class="line"></span><br><span class="line">In [<span class="number">148</span>]: a_bins.agg([mean,median])</span><br><span class="line">Out[<span class="number">148</span>]:</span><br><span class="line">                 mean    median</span><br><span class="line">a</span><br><span class="line">(<span class="number">0</span>, <span class="number">0.25</span>]    <span class="number">0.124173</span>  <span class="number">0.114613</span></span><br><span class="line">(<span class="number">0.25</span>, <span class="number">0.5</span>]  <span class="number">0.367703</span>  <span class="number">0.358866</span></span><br><span class="line">(<span class="number">0.5</span>, <span class="number">0.75</span>]  <span class="number">0.624251</span>  <span class="number">0.626730</span></span><br><span class="line">(<span class="number">0.75</span>, <span class="number">1</span>]    <span class="number">0.875395</span>  <span class="number">0.869843</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: b_bins.agg([mean,median])</span><br><span class="line">Out[<span class="number">149</span>]:</span><br><span class="line">                 mean    median</span><br><span class="line">b</span><br><span class="line">(<span class="number">0</span>, <span class="number">0.25</span>]    <span class="number">0.147936</span>  <span class="number">0.166900</span></span><br><span class="line">(<span class="number">0.25</span>, <span class="number">0.5</span>]  <span class="number">0.394918</span>  <span class="number">0.386729</span></span><br><span class="line">(<span class="number">0.5</span>, <span class="number">0.75</span>]  <span class="number">0.636111</span>  <span class="number">0.655247</span></span><br><span class="line">(<span class="number">0.75</span>, <span class="number">1</span>]    <span class="number">0.851227</span>  <span class="number">0.838805</span></span><br></pre></td></tr></table></figure><h4 id="demo4"><a href="#demo4" class="headerlink" title="demo4:"></a>demo4:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">168</span>]: filter_values = [<span class="number">0</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">33</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">169</span>]: df = pd.DataFrame(np.random.random(<span class="number">100</span>)*<span class="number">100</span>, columns  = [<span class="string">'filtercol'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: out = pd.cut(df.filtercol, bins = filter_values)</span><br><span class="line"></span><br><span class="line">In [<span class="number">171</span>]: counts = pd.value_counts(out)</span><br><span class="line">Out[<span class="number">171</span>]:</span><br><span class="line">(<span class="number">17</span>, <span class="number">33</span>]    <span class="number">16</span></span><br><span class="line">(<span class="number">5</span>, <span class="number">17</span>]     <span class="number">11</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">5</span>]       <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">counts = counts.reindex(out.cat.categories)</span><br><span class="line">counts = counts.sort_index()</span><br><span class="line"></span><br><span class="line">In [<span class="number">172</span>]: counts = counts.reindex(out.cat.categories)</span><br><span class="line">In [<span class="number">173</span>]: counts</span><br><span class="line">Out[<span class="number">173</span>]:</span><br><span class="line">(<span class="number">0</span>, <span class="number">5</span>]       <span class="number">5</span></span><br><span class="line">(<span class="number">5</span>, <span class="number">17</span>]     <span class="number">11</span></span><br><span class="line">(<span class="number">17</span>, <span class="number">33</span>]    <span class="number">16</span></span><br><span class="line">Name: filtercol, dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置索引(reset index)</span></span><br><span class="line">out = counts.reset_index(drop=<span class="keyword">True</span>) <span class="comment"># counts 不变</span></span><br><span class="line">counts.reset_index(drop=<span class="keyword">True</span>, inplace=<span class="keyword">True</span>) <span class="comment"># 直接改变counts</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: out = counts.reset_index(drop=<span class="keyword">True</span>)</span><br><span class="line">In [<span class="number">175</span>]: out</span><br><span class="line">Out[<span class="number">175</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">11</span></span><br><span class="line"><span class="number">2</span>    <span class="number">16</span></span><br><span class="line">Name: filtercol, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">176</span>]: counts</span><br><span class="line">Out[<span class="number">176</span>]:</span><br><span class="line">(<span class="number">0</span>, <span class="number">5</span>]       <span class="number">5</span></span><br><span class="line">(<span class="number">5</span>, <span class="number">17</span>]     <span class="number">11</span></span><br><span class="line">(<span class="number">17</span>, <span class="number">33</span>]    <span class="number">16</span></span><br><span class="line">Name: filtercol, dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">177</span>]: counts.reset_index(drop=<span class="keyword">True</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">In [<span class="number">178</span>]: counts</span><br><span class="line">Out[<span class="number">178</span>]:</span><br><span class="line"><span class="number">0</span>     <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">11</span></span><br><span class="line"><span class="number">2</span>    <span class="number">16</span></span><br><span class="line">Name: filtercol, dtype: int64</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>第四个demo基本就可以完成当前目标了；<br>后续需要操作的是封装一个合适的通用方法，将每个项目评分标准代入即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> cut </tag>
            
            <tag> 评分卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-23 mongo insert_many BulkWriteError</title>
      <link href="/2017/08/23/2017-8-23-mongo-insert-many-BulkWriteError/"/>
      <url>/2017/08/23/2017-8-23-mongo-insert-many-BulkWriteError/</url>
      
        <content type="html"><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><blockquote><p>在对mongo插入数据时，报写入问题，报错信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/root/crs/call_history_crawler/worker/communicate.py&quot;, line 149, in insert_db_data</span><br><span class="line">    if db[table].insert_many(data):</span><br><span class="line">  File &quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/collection.py&quot;, line 684, in insert_many</span><br><span class="line">    blk.execute(self.write_concern.document)</span><br><span class="line">  File &quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/bulk.py&quot;, line 470, in execute</span><br><span class="line">    return self.execute_command(sock_info, generator, write_concern)</span><br><span class="line">  File &quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/bulk.py&quot;, line 314, in execute_command</span><br><span class="line">    raise BulkWriteError(full_result)</span><br><span class="line">BulkWriteError: batch op errors occurred</span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>问题出现在，对同一文本进行多次插入，官方说法：<code>insert_many() with a list of references to a single document raises BulkWriteError</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; doc = &#123;&#125;</span><br><span class="line">&gt;&gt;&gt; collection.insert_many(doc for _ in range(10))</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">pymongo.errors.BulkWriteError: batch op errors occurred</span><br><span class="line">&gt;&gt;&gt; doc</span><br><span class="line">&#123;&apos;_id&apos;: ObjectId(&apos;560f171cfba52279f0b0da0c&apos;)&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; docs = [&#123;&#125;]</span><br><span class="line">&gt;&gt;&gt; collection.insert_many(docs * 10)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">pymongo.errors.BulkWriteError: batch op errors occurred</span><br><span class="line">&gt;&gt;&gt; docs</span><br><span class="line">[&#123;&apos;_id&apos;: ObjectId(&apos;560f1933fba52279f0b0da0e&apos;)&#125;]</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> mongo </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-14 JSON文件 读写 格式化</title>
      <link href="/2017/08/14/2017-8-14-JSON%E6%96%87%E4%BB%B6-%E8%AF%BB%E5%86%99-%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2017/08/14/2017-8-14-JSON%E6%96%87%E4%BB%B6-%E8%AF%BB%E5%86%99-%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="写文件，格式化"><a href="#写文件，格式化" class="headerlink" title="写文件，格式化"></a>写文件，格式化</h3><blockquote><p><code>indent</code>: 缩进（一般填4，缩进4格）；<br><code>sort_keys</code>: 是否排序（默认<code>False</code>–不排序）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_info</span><span class="params">(file_name, file_info)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'&#123;&#125;.json'</span>.format(file_name), <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        json.dump(file_info, fp, indent=<span class="number">4</span>, sort_keys=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">write_info(<span class="string">'report'</span>, dict(report_data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h3 id="读文件，格式化"><a href="#读文件，格式化" class="headerlink" title="读文件，格式化"></a>读文件，格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pp_json</span><span class="params">(json_thing, sort=True, indents=<span class="number">4</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(json_thing) <span class="keyword">is</span> str:</span><br><span class="line">        print(json.dumps(json.loads(json_thing), sort_keys=sort, indent=indents))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(json.dumps(json_thing, sort_keys=sort, indent=indents))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">pp_json(your_json_string_or_dict)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>your_json = <span class="string">'["foo", &#123;"bar":["baz", null, 1.0, 2]&#125;]'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parsed = json.loads(your_json)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> json.dumps(parsed, indent=<span class="number">4</span>, sort_keys=<span class="keyword">True</span>)</span><br><span class="line">[</span><br><span class="line">    <span class="string">"foo"</span>, </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"bar"</span>: [</span><br><span class="line">            <span class="string">"baz"</span>, </span><br><span class="line">            null, </span><br><span class="line">            <span class="number">1.0</span>, </span><br><span class="line">            <span class="number">2</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-13 三元表达式（条件表达式）</title>
      <link href="/2017/08/13/2017-8-13-%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
      <url>/2017/08/13/2017-8-13-%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="条件表达式："><a href="#条件表达式：" class="headerlink" title="条件表达式："></a>条件表达式：</h3><blockquote><p>使用一行代码快速判断，替换复杂的多行if语句，使得代码简单可维护。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果条件为真，返回真，否则返回假</span></span><br><span class="line">condition_is_true <span class="keyword">if</span> condition <span class="keyword">else</span> condition_is_false</span><br><span class="line"></span><br><span class="line">is_fat = <span class="keyword">True</span></span><br><span class="line">state = <span class="string">"fat"</span> <span class="keyword">if</span> is_fat <span class="keyword">else</span> <span class="string">"not fat"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="元组条件表达式："><a href="#元组条件表达式：" class="headerlink" title="元组条件表达式："></a>元组条件表达式：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (返回假，返回真)[真或假]</span></span><br><span class="line">(if_test_is_false, if_test_is_true)[test]</span><br><span class="line"></span><br><span class="line">fat = true</span><br><span class="line">fitness = (<span class="string">"skinny"</span>, <span class="string">"fat"</span>)[fat]</span><br><span class="line">print(<span class="string">'All is '</span>, fitness)</span><br><span class="line"><span class="comment"># 输出： All is fat</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>原理：python中，True == 1，False == 0，相当于元组中使用0和1来选取数据；</li><li>这种写法不被推荐，原因：不Pythonic；容易把数据与true/false弄混；元祖中两个条件都执行，而<code>if-else</code>的条件表达式不会；</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">condition = <span class="keyword">True</span></span><br><span class="line">python(<span class="number">2</span> <span class="keyword">if</span> condition <span class="keyword">else</span> <span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 输出：2</span></span><br><span class="line"></span><br><span class="line">print(<span class="number">1</span>/<span class="number">0</span>, <span class="number">2</span>)[condition]</span><br><span class="line"><span class="comment"># 输出：ZeroDivisionError异常</span></span><br></pre></td></tr></table></figure><blockquote><p>解释：</p><ul><li>元组先建数据，然后用True(1)/False(0)来索引数据；</li><li><code>if-else</code>条件表达式遵循普通的<code>if-else</code>逻辑树；</li><li>如果逻辑中有异常条件或重计算型（计算较久）的情况下，避免使用元组条件表达式。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 条件表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-10 调试 Pdb（Python debugger）</title>
      <link href="/2017/08/10/2017-8-10-%E8%B0%83%E8%AF%95-Pdb%EF%BC%88Python-debugger%EF%BC%89/"/>
      <url>/2017/08/10/2017-8-10-%E8%B0%83%E8%AF%95-Pdb%EF%BC%88Python-debugger%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Pdb（Python-debugger）："><a href="#Pdb（Python-debugger）：" class="headerlink" title="Pdb（Python debugger）："></a>Pdb（Python debugger）：</h2><h3 id="命令行运行："><a href="#命令行运行：" class="headerlink" title="命令行运行："></a>命令行运行：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pdb my_script.py</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="脚本内部运行："><a href="#脚本内部运行：" class="headerlink" title="脚本内部运行："></a>脚本内部运行：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line">pdb.set_trace()</span><br></pre></td></tr></table></figure><h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c ：继续执行；</span><br><span class="line">w：显示上下文；</span><br><span class="line">a：打印当前函数参数列表；</span><br><span class="line">s：单步进入，进入函数内部（step）；</span><br><span class="line">n：单步跳过，不进入函数（next）；</span><br><span class="line">q：退出Pdb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Debugger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-10 string 去掉标点符号</title>
      <link href="/2017/08/10/2017-8-10-string-%E5%8E%BB%E6%8E%89%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7/"/>
      <url>/2017/08/10/2017-8-10-string-%E5%8E%BB%E6%8E%89%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="Python-字符串去掉标点符号最佳实践"><a href="#Python-字符串去掉标点符号最佳实践" class="headerlink" title="Python 字符串去掉标点符号最佳实践"></a>Python 字符串去掉标点符号最佳实践</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><blockquote><p><code>str.isalnum</code>：<br>S.isalnum() -&gt; bool<br>Return True if all characters in S are alphanumeric and there is at least one character in S, False otherwise.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Special $#! characters   spaces 888323"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(e <span class="keyword">for</span> e <span class="keyword">in</span> string <span class="keyword">if</span> e.isalnum())</span><br><span class="line"><span class="string">'Specialcharactersspaces888323'</span></span><br></pre></td></tr></table></figure><blockquote><p>特点：</p><ul><li>只能识别字母和数字，杀伤力大，会把中文、空格之类的也干掉<a id="more"></a></li></ul></blockquote><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><blockquote><p>string.punctuation</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re, string</span><br><span class="line"></span><br><span class="line">s =<span class="string">"string. With. Punctuation?"</span> <span class="comment"># Sample string </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法一：</span></span><br><span class="line">out = s.translate(string.maketrans(<span class="string">""</span>,<span class="string">""</span>), string.punctuation)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二：</span></span><br><span class="line">out = s.translate(<span class="keyword">None</span>, string.punctuation)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三：</span></span><br><span class="line">exclude = set(string.punctuation)</span><br><span class="line">out = <span class="string">''</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> exclude)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法四：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> string.punctuation:</span><br><span class="line">s = s.replace(c,<span class="string">""</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'string With Punctuation'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法五：</span></span><br><span class="line">out = re.sub(<span class="string">'[%s]'</span> % re.escape(string.punctuation), <span class="string">''</span>, s)</span><br><span class="line"><span class="comment">## re.escape:对字符串中所有可能被解释为正则运算符的字符进行转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法六：</span></span><br><span class="line"><span class="comment"># string.punctuation 只包括 ascii 格式； 想要一个包含更广（但是更慢）的方法是使用： unicodedata module :</span></span><br><span class="line"><span class="keyword">from</span> unicodedata <span class="keyword">import</span> category</span><br><span class="line">s = <span class="string">u'String — with - «Punctuation »...'</span></span><br><span class="line">out = re.sub(<span class="string">'[%s]'</span> % re.escape(string.punctuation), <span class="string">''</span>, s)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Stripped'</span>, out</span><br><span class="line"><span class="comment"># 输出：u'Stripped String \u2014 with  \xabPunctuation \xbb'</span></span><br><span class="line">out = <span class="string">''</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> category(ch)[<span class="number">0</span>] != <span class="string">'P'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Stripped'</span>, out</span><br><span class="line"><span class="comment"># 输出：u'Stripped String  with  Punctuation '</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># For Python 3 str or Python 2 unicode values, str.translate() only takes a dictionary; codepoints (integers) are looked up in that mapping and anything mapped to None is removed.</span></span><br><span class="line"><span class="comment"># To remove (some?) punctuation then, use:</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">remove_punct_map = dict.fromkeys(map(ord, string.punctuation))</span><br><span class="line">s.translate(remove_punct_map)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your method doesn't work in Python 3, as the translate method doesn't accept the second argument any more. </span></span><br><span class="line"><span class="keyword">import</span> unicodedata</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">tbl = dict.fromkeys(i <span class="keyword">for</span> i <span class="keyword">in</span> range(sys.maxunicode) <span class="keyword">if</span> unicodedata.category(chr(i)).startswith(<span class="string">'P'</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_punctuation</span><span class="params">(text)</span>:</span></span><br><span class="line"><span class="keyword">return</span> text.translate(tbl)</span><br></pre></td></tr></table></figure><h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><blockquote><p>re</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s =<span class="string">"string. With. Punctuation?"</span></span><br><span class="line">s = re.sub(<span class="string">r'[^\w\s]'</span>,<span class="string">''</span>,s)</span><br></pre></td></tr></table></figure><h3 id="测时："><a href="#测时：" class="headerlink" title="测时："></a>测时：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re, string, timeit</span><br><span class="line"></span><br><span class="line">s =<span class="string">"string. With. Punctuation"</span></span><br><span class="line"></span><br><span class="line">exclude = set(string.punctuation)</span><br><span class="line">table = string.maketrans(<span class="string">""</span>,<span class="string">""</span>)</span><br><span class="line">regex = re.compile(<span class="string">'[%s]'</span> % re.escape(string.punctuation))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_set</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> exclude)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_re</span><span class="params">(s)</span>:</span> </span><br><span class="line"><span class="keyword">return</span> regex.sub(<span class="string">''</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_trans</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="keyword">return</span> s.translate(table, string.punctuation)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_repl</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string.punctuation:</span><br><span class="line">s=s.replace(c,<span class="string">""</span>)</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span><span class="string">"sets :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_set as f'</span>).timeit(<span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">print</span><span class="string">"regex :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_re as f'</span>).timeit(<span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">print</span><span class="string">"translate :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_trans as f'</span>).timeit(<span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">print</span><span class="string">"replace :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_repl as f'</span>).timeit(<span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">out_put:</span><br><span class="line"><span class="comment"># sets : 19.8566138744</span></span><br><span class="line"><span class="comment"># regex : 6.86155414581</span></span><br><span class="line"><span class="comment"># translate : 2.12455511093</span></span><br><span class="line"><span class="comment"># replace : 28.4436721802</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-9 Map、Filter、Reduce</title>
      <link href="/2017/08/09/2017-8-9-Map%E3%80%81Filter%E3%80%81Reduce/"/>
      <url>/2017/08/09/2017-8-9-Map%E3%80%81Filter%E3%80%81Reduce/</url>
      
        <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>将一个函数映射到一个输入列表的所有元素上。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">squared = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, items))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="map作用于一列表的函数："><a href="#map作用于一列表的函数：" class="headerlink" title="map作用于一列表的函数："></a>map作用于一列表的函数：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (x*x)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (x+x)</span><br><span class="line"></span><br><span class="line">funcs = [multiply, add]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>):</span><br><span class="line">    value = map(<span class="keyword">lambda</span> x: x(i), funcs)</span><br><span class="line">    print(list(value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># [0, 0]</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br><span class="line"><span class="comment"># [4, 4]</span></span><br><span class="line"><span class="comment"># [9, 6]</span></span><br><span class="line"><span class="comment"># [16, 8]</span></span><br></pre></td></tr></table></figure><blockquote><p>注：上面<code>print</code>加list转换，是为了python2/3的兼容，在python2中map直接返回列表，但在python3中返回迭代器。</p></blockquote><h3 id="Filter："><a href="#Filter：" class="headerlink" title="Filter："></a>Filter：</h3><blockquote><p>过滤列表元素，返回符合要求的元素所组成的列表；<br>filter类似for循环，但更快。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number_list = range(<span class="number">-5</span>, <span class="number">5</span>)</span><br><span class="line">less_than_zero = filter(<span class="keyword">lambda</span> x: x &lt; <span class="number">0</span>, number_list)</span><br><span class="line">print(list(less_than_zero))  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Output: </span></span><br><span class="line">[<span class="number">-5</span>, <span class="number">-4</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Reduce："><a href="#Reduce：" class="headerlink" title="Reduce："></a>Reduce：</h3><blockquote><p>对列表进行计算并返回结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算列表乘积：</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">product = reduce( (<span class="keyword">lambda</span> x, y: x * y), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] )</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output: </span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算静默期：</span></span><br><span class="line">count_times：func，计算静默时间</span><br><span class="line">blank_ret：list</span><br><span class="line">reduce(count_times, sorted(blank_ret))</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Map </tag>
            
            <tag> Filter </tag>
            
            <tag> Reduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-8 profile cProfile 效率分析</title>
      <link href="/2017/08/08/2017-8-8-profile-cProfile-%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/"/>
      <url>/2017/08/08/2017-8-8-profile-cProfile-%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="test-py："><a href="#test-py：" class="headerlink" title="test.py："></a>test.py：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(filename)</span>:</span></span><br><span class="line"><span class="keyword">print</span> filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (dirpath, dirnames, filenames) <span class="keyword">in</span> os.walk(sys.argv[<span class="number">1</span>]):</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">process(filename)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="cProfile用法："><a href="#cProfile用法：" class="headerlink" title="cProfile用法："></a>cProfile用法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成.pstats分析文档</span></span><br><span class="line">python -m cProfile -o profile.pstats test.py /usr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">python -m cProfile -s tottime myscript.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pstats文档</span></span><br><span class="line">python -m pstats profile.pstats</span><br><span class="line"><span class="comment"># ?: 查看可用指令；sort cumtime:排序；stats:查看pstats文档</span></span><br><span class="line"></span><br><span class="line">-s 选项：</span><br><span class="line"><span class="string">'calls'</span> (call count)</span><br><span class="line"><span class="string">'cumulative'</span> (cumulative time)</span><br><span class="line"><span class="string">'cumtime'</span> (cumulative time)</span><br><span class="line"><span class="string">'file'</span> (file name)</span><br><span class="line"><span class="string">'filename'</span> (file name)</span><br><span class="line"><span class="string">'module'</span> (file name)</span><br><span class="line"><span class="string">'ncalls'</span> (call count)</span><br><span class="line"><span class="string">'pcalls'</span> (primitive call count)</span><br><span class="line"><span class="string">'line'</span> (line number)</span><br><span class="line"><span class="string">'name'</span> (function name)</span><br><span class="line"><span class="string">'nfl'</span> (name/file/line)</span><br><span class="line"><span class="string">'stdname'</span> (standard name)</span><br><span class="line"><span class="string">'time'</span> (internal time)</span><br><span class="line"><span class="string">'tottime'</span> (internal time)</span><br></pre></td></tr></table></figure><p><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-8-8%20profile%20cProfile%20%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90.png" alt=""></p><h3 id="gprof2dot用法"><a href="#gprof2dot用法" class="headerlink" title="gprof2dot用法:"></a><a href="https://github.com/jrfonseca/gprof2dot" target="_blank" rel="noopener">gprof2dot</a>用法:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 gprof2dot</span></span><br><span class="line">pip install gprof2dot</span><br><span class="line"><span class="comment"># 通过.pstats文档生成相应的dot文档</span></span><br><span class="line">python -m gprof2dot -f pstats profile.pstats</span><br><span class="line"><span class="comment"># 安装graphviz（centOS系统）</span></span><br><span class="line">sudo yum install graphviz</span><br><span class="line"><span class="comment"># 输出png文档</span></span><br><span class="line">python -m gprof2dot -f pstats profile.pstats | dot -T png -o profile.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> cProfile </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-7 pandas 获取不符合条件的dataframe</title>
      <link href="/2017/08/07/2017-8-7-pandas-%E8%8E%B7%E5%8F%96%E4%B8%8D%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84dataframe/"/>
      <url>/2017/08/07/2017-8-7-pandas-%E8%8E%B7%E5%8F%96%E4%B8%8D%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84dataframe/</url>
      
        <content type="html"><![CDATA[<h2 id="search-for-“does-not-contain”-on-a-dataframe-in-pandas"><a href="#search-for-“does-not-contain”-on-a-dataframe-in-pandas" class="headerlink" title="search for “does-not-contain” on a dataframe in pandas"></a>search for “does-not-contain” on a dataframe in pandas</h2><blockquote><p>问题来源：做项目时，想拿到不符合条件的所有数据，比如：通话类型有好多种（主叫、被叫、呼转……），现在想分析所有非主叫数据，那么问题就来了。</p></blockquote><a id="more"></a><h3 id="方法一：df-df-col-str-contains-word"><a href="#方法一：df-df-col-str-contains-word" class="headerlink" title="方法一：df[~df.col.str.contains(word)]"></a>方法一：df[~df.col.str.contains(word)]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">"A"</span>: [<span class="string">"Hello"</span>, <span class="string">"this"</span>, <span class="string">"World"</span>, <span class="string">"apple"</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.A.str.contains(<span class="string">"Hello|World"</span>)</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line">Name: A, dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>~df.A.str.contains(<span class="string">"Hello|World"</span>)</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line">Name: A, dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[~df.A.str.contains(<span class="string">"Hello|World"</span>)]</span><br><span class="line">       A</span><br><span class="line"><span class="number">1</span>   this</span><br><span class="line"><span class="number">3</span>  apple</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span> rows x <span class="number">1</span> columns]</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>似乎 <code>df[~(df.A.str.contains(&quot;Hello&quot;) | (df.A.str.contains(&quot;World&quot;)))]</code>比上面使用正则，速度会快点</li><li>获取“非”数据的条数：<code>(~df.col3.str.contains(&#39;u|z&#39;)).sum()</code></li></ul></blockquote><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">"col"</span>].str.contains(<span class="string">'this'</span>|<span class="string">'that'</span>)==<span class="keyword">False</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">"A"</span>: [<span class="string">"Hello"</span>, <span class="string">"this"</span>, <span class="string">"World"</span>, <span class="string">"apple"</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[df[<span class="string">'A'</span>].str.contains(<span class="string">"Hello|World"</span>)==<span class="keyword">False</span>]</span><br><span class="line">       A</span><br><span class="line"><span class="number">1</span>   this</span><br><span class="line"><span class="number">3</span>  apple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个条件情况下：</span></span><br><span class="line"><span class="comment"># df[df["col1"].str.contains('this|that')==False and df["col2"].str.contains('foo|bar')==True]</span></span><br></pre></td></tr></table></figure><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">"A"</span>: [<span class="string">"Hello"</span>, <span class="string">"this"</span>, <span class="string">"World"</span>, <span class="string">"apple"</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">'A'</span>].str.contains(<span class="string">r'^(?:(?!Hello|World).)*$'</span>)</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line">Name: A, dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[df[<span class="string">'A'</span>].str.contains(<span class="string">r'^(?:(?!Hello|World).)*$'</span>)]</span><br><span class="line">       A</span><br><span class="line"><span class="number">1</span>   this</span><br><span class="line"><span class="number">3</span>  apple</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
            <tag> Contains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-7 python args and kwargs</title>
      <link href="/2017/08/07/2017-8-7-python-args-and-kwargs/"/>
      <url>/2017/08/07/2017-8-7-python-args-and-kwargs/</url>
      
        <content type="html"><![CDATA[<h3 id="args："><a href="#args：" class="headerlink" title="*args："></a><code>*args</code>：</h3><blockquote><p>传递一个非键值对的可变数量的参数列表给一个函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_args</span><span class="params">(f_arg, *argv)</span>:</span></span><br><span class="line">    print(<span class="string">"first normal arg:"</span>, f_arg)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> argv:</span><br><span class="line">        print(<span class="string">"another arg through *argv:"</span>, arg)</span><br><span class="line"></span><br><span class="line">test_var_args(<span class="string">'yasoob'</span>, <span class="string">'python'</span>, <span class="string">'eggs'</span>, <span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output：</span></span><br><span class="line"><span class="comment"># first normal arg: yasoob</span></span><br><span class="line"><span class="comment"># another arg through *argv: python</span></span><br><span class="line"><span class="comment"># another arg through *argv: eggs</span></span><br><span class="line"><span class="comment"># another arg through *argv: test</span></span><br></pre></td></tr></table></figure></p></blockquote><a id="more"></a><h3 id="kwargs："><a href="#kwargs：" class="headerlink" title="**kwargs："></a><code>**kwargs</code>：</h3><blockquote><p>传递不定长度的键值对（字典）, 作为参数传递给一个函数（即传递带名字的参数）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_me</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(<span class="string">"&#123;0&#125; == &#123;1&#125;"</span>.format(key, value))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet_me(name=<span class="string">"yasoob"</span>)</span><br><span class="line">name == yasoob</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><blockquote><p>不是必须写成<code>*args</code>和<code>**kwargs</code>，只有变量前面的 <code>*</code>(星号)才是必须的；可以写成<code>*var</code> 和<code>**vars</code>，写成<code>*args</code> 和<code>**kwargs</code>只是一个通俗的命名约定；<br><code>*args</code>： 顺序不能变动；<code>**kwargs</code>：可以根据键指定顺序。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_args_kwargs</span><span class="params">(arg1, arg2, arg3)</span>:</span></span><br><span class="line">    print(<span class="string">"arg1:"</span>, arg1)</span><br><span class="line">    print(<span class="string">"arg2:"</span>, arg2)</span><br><span class="line">    print(<span class="string">"arg3:"</span>, arg3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先使用 *args</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="string">"two"</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_args_kwargs(*args)</span><br><span class="line">arg1: two</span><br><span class="line">arg2: <span class="number">3</span></span><br><span class="line">arg3: <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在使用 **kwargs:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kwargs = &#123;<span class="string">"arg3"</span>: <span class="number">3</span>, <span class="string">"arg2"</span>: <span class="string">"two"</span>, <span class="string">"arg1"</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_args_kwargs(**kwargs)</span><br><span class="line">arg1: <span class="number">5</span></span><br><span class="line">arg2: two</span><br><span class="line">arg3: <span class="number">3</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> args </tag>
            
            <tag> kwargs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-6 python string</title>
      <link href="/2017/08/06/2017-8-6-python-string/"/>
      <url>/2017/08/06/2017-8-6-python-string/</url>
      
        <content type="html"><![CDATA[<h2 id="The-most-pythonic-way-to-pad-zeroes-to-string"><a href="#The-most-pythonic-way-to-pad-zeroes-to-string" class="headerlink" title="The most pythonic way to pad zeroes to string"></a>The most pythonic way to pad zeroes to string</h2><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings:"></a>Strings:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="string">'4'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.zfill(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'004'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:0&gt;3&#125;'</span>.format(n)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'004'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;1&#125;&#123;1&#125;&#123;0&#125;'</span>.format(n, <span class="string">'0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'004'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:0&lt;3&#125;'</span>.format(n)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'400'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:-^11&#125;'</span>.format(n)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'-----4-----'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.rjust(<span class="number">3</span>, <span class="string">'0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'004'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n.ljust(<span class="number">3</span>, <span class="string">'0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'400'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'4'</span>.center(<span class="number">11</span>,<span class="string">"-"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'-----4-----'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><code>rjust/zfill</code> 区别:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">zfill:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'--txt'</span>.zfill(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'-00000-txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'++txt'</span>.zfill(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'+00000+txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'..txt'</span>.zfill(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'00000..txt'</span></span><br><span class="line">rjust:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'--txt'</span>.rjust(<span class="number">10</span>, <span class="string">'0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'00000--txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'++txt'</span>.rjust(<span class="number">10</span>, <span class="string">'0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'00000++txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'..txt'</span>.rjust(<span class="number">10</span>, <span class="string">'0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'00000..txt'</span></span><br></pre></td></tr></table></figure></p><h3 id="numbers"><a href="#numbers" class="headerlink" title="numbers:"></a>numbers:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'%03d'</span> % n</span><br><span class="line"><span class="number">004</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> format(n, <span class="string">'03'</span>) <span class="comment"># python &gt;= 2.6</span></span><br><span class="line"><span class="number">004</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'&#123;0:03d&#125;'</span>.format(n)  <span class="comment"># python &gt;= 2.6</span></span><br><span class="line"><span class="number">004</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'&#123;foo:03d&#125;'</span>.format(foo=n)  <span class="comment"># python &gt;= 2.6</span></span><br><span class="line"><span class="number">004</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;:03d&#125;'</span>.format(n))  <span class="comment"># python &gt;= 2.7 + python3</span></span><br><span class="line"><span class="number">004</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'&#123;0:03d&#125;'</span>.format(n))  <span class="comment"># python 3</span></span><br><span class="line"><span class="number">004</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">f'<span class="subst">&#123;n:<span class="number">03</span>&#125;</span>'</span>) <span class="comment"># python &gt;= 3.6</span></span><br><span class="line"><span class="number">004</span></span><br></pre></td></tr></table></figure><blockquote><p> % formatting 已被 string.format 替代</p></blockquote><h3 id="保留小数位："><a href="#保留小数位：" class="headerlink" title="保留小数位："></a>保留小数位：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">format(value, <span class="string">'.6f'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(<span class="number">2.0</span>, <span class="string">'.6f'</span>)</span><br><span class="line"><span class="string">'2.000000'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:.6f&#125;'</span>.format(<span class="number">2.0</span>)</span><br><span class="line"><span class="string">'2.000000'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-8-1 python rrule bug</title>
      <link href="/2017/08/01/2017-8-1-python-rrule-bug/"/>
      <url>/2017/08/01/2017-8-1-python-rrule-bug/</url>
      
        <content type="html"><![CDATA[<p><code>http://dateutil.readthedocs.io/en/stable/_modules/dateutil/rrule.html</code></p><h3 id="月份日期超限-BUG"><a href="#月份日期超限-BUG" class="headerlink" title="月份日期超限 BUG"></a>月份日期超限 BUG</h3><blockquote><p>Per RFC section 3.3.10, recurrence instances falling on invalid dates and times are ignored rather than coerced:<br>Recurrence rules may generate recurrence instances with an invalid date (e.g., February 30) or nonexistent local time (e.g., 1:30 AM  on a day where the local time is moved forward by an hour at 1:00 AM).<br>Such recurrence instances MUST be ignored and MUST NOT be  counted as part of the recurrence set.</p></blockquote><a id="more"></a><p>This can lead to possibly surprising behavior when, for example, the start date occurs at the end of the month:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> dateutil.rrule <span class="keyword">import</span> rrule, MONTHLY</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>start_date = datetime(<span class="number">2014</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(rrule(freq=MONTHLY, count=<span class="number">4</span>, dtstart=start_date))</span><br><span class="line">[datetime.datetime(<span class="number">2014</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">1</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">31</span>, <span class="number">0</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-7-31 python 生成器（Generators）</title>
      <link href="/2017/07/31/2017-7-31-python-%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88Generators%EF%BC%89/"/>
      <url>/2017/07/31/2017-7-31-python-%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88Generators%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="可迭代对象（iterable）："><a href="#可迭代对象（iterable）：" class="headerlink" title="可迭代对象（iterable）："></a>可迭代对象（iterable）：</h3><blockquote><p>能提供迭代器的任意对象；只要定义了一个迭代器的<strong>iter</strong>方法或定义了支持下标索引的<strong>getitem</strong>方法，那就是一个可迭代对象。</p></blockquote><h3 id="迭代器（iterators）："><a href="#迭代器（iterators）：" class="headerlink" title="迭代器（iterators）："></a>迭代器（iterators）：</h3><blockquote><p>任意对象，只要定义了next或者<strong>next</strong>方法，那就是一个迭代器</p></blockquote><h3 id="迭代（iteration）："><a href="#迭代（iteration）：" class="headerlink" title="迭代（iteration）："></a>迭代（iteration）：</h3><blockquote><p>从某个地方（如列表）取出一个元素的过程；使用一个循环来遍历某个东西（如列表），这个过程就是迭代；</p></blockquote><a id="more"></a><h3 id="生成器（Generators）："><a href="#生成器（Generators）：" class="headerlink" title="生成器（Generators）："></a>生成器（Generators）：</h3><blockquote><p>也是一种迭代器，但只能对其迭代一次</p><ul><li>因为它们并没有把所有值存在内存中，而是运行时生成值；</li><li>可通过遍历使用它们，要么使用“for”循环，要么传递给任意可以进行迭代的函数和结构；</li><li>大多时候生成器是以函数实现的，但它们并不返回一个值，而是yield（生出）一个值。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> generator_function():</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output: 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 9</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h4><blockquote><p>不想同一时间将所有计算出来的大量结果集分配到内存当中，特别是结果集里还包含循环；因为这样做会消耗大量资源<br>许多Python 2里的标准库函数都会返回列表，而Python 3都修改成了返回生成器，因为生成器占用更少的资源。</p></blockquote><p>**斐波那契数列的生成器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统模式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibon</span><span class="params">(n)</span>:</span></span><br><span class="line">    a = b = <span class="number">1</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        result.append(a)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器模式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibon</span><span class="params">(n)</span>:</span></span><br><span class="line">    a = b = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now we can use it like this:</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fibon(<span class="number">1000000</span>):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><h3 id="Python内置函数：next"><a href="#Python内置函数：next" class="headerlink" title="Python内置函数：next()"></a>Python内置函数：<code>next()</code></h3><blockquote><p>它允许我们获取一个序列的下一个元素<br>特点：</p><ul><li>在<code>yield</code>掉所有的值后，<code>next()</code>会触发一个<code>StopIteration</code>的异常。提示我们所有的值都已经被<code>yield</code>完了；</li><li>在使用<code>for</code>循环时没有这个异常，因为<code>for</code>循环会自动捕捉到这个异常并停止调用<code>next()</code>。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">gen = generator_function()</span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: 0</span></span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: 1</span></span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#         File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#         StopIteration</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="Python内置函数：iter"><a href="#Python内置函数：iter" class="headerlink" title="Python内置函数：iter()"></a>Python内置函数：<code>iter()</code></h3><blockquote><p>将一个可迭代对象返回一个迭代器对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_string = <span class="string">"Bingo"</span></span><br><span class="line">next(my_string)</span><br><span class="line"><span class="comment"># Output: Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#      File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#    TypeError: str object is not an iterator</span></span><br></pre></td></tr></table></figure></p></blockquote><p>这个异常说<code>str</code>对象是一个可迭代对象，而不是一个迭代器；不能直接对其进行迭代操作，所以，使用<code>iter</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">my_string = <span class="string">"Bingo"</span></span><br><span class="line">my_iter = iter(my_string)</span><br><span class="line">next(my_iter)</span><br><span class="line"><span class="comment"># Output: 'B'</span></span><br><span class="line">next(my_iter)</span><br><span class="line"><span class="comment"># Output: 'i'</span></span><br><span class="line">next(my_iter)</span><br><span class="line"><span class="comment"># Output: 'n'</span></span><br><span class="line">next(my_iter)</span><br><span class="line"><span class="comment"># Output: 'g'</span></span><br><span class="line">next(my_iter)</span><br><span class="line"><span class="comment"># Output: 'o'</span></span><br><span class="line">next(my_iter)</span><br><span class="line"><span class="comment"># Output: Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#         File "&lt;stdin&gt;", line 12, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#         StopIteration</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> generators </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-7-31 python set 交集、并集、差集</title>
      <link href="/2017/07/31/2017-7-31-python-%E4%BA%A4%E9%9B%86%E3%80%81%E5%B9%B6%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/"/>
      <url>/2017/07/31/2017-7-31-python-%E4%BA%A4%E9%9B%86%E3%80%81%E5%B9%B6%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="交集-intersection"><a href="#交集-intersection" class="headerlink" title="交集(intersection)"></a>交集(intersection)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">example：</span><br><span class="line">valid = set([<span class="string">'yellow'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'black'</span>])</span><br><span class="line">input_set = set([<span class="string">'red'</span>, <span class="string">'brown'</span>]) </span><br><span class="line">print(input_set.intersection(valid))</span><br><span class="line"><span class="comment">### 输出：set(['red'])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp = [val <span class="keyword">for</span> val <span class="keyword">in</span> a <span class="keyword">if</span> val <span class="keyword">in</span> b]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tmp</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(set(a).intersection(set(b)))</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三：</span></span><br><span class="line">&gt;&gt;&gt;list(set(a) &amp; set(b))</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="字符串交集"><a href="#字符串交集" class="headerlink" title="字符串交集"></a>字符串交集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line"><span class="string">''</span>.join(sorted(set(str1) &amp; set(str2), key = str1.index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strIntersection</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">  out = <span class="string">""</span></span><br><span class="line">  <span class="keyword">for</span> c <span class="keyword">in</span> s1:</span><br><span class="line">    <span class="keyword">if</span> c <span class="keyword">in</span> s2 <span class="keyword">and</span> <span class="keyword">not</span> c <span class="keyword">in</span> out:</span><br><span class="line">      out += c</span><br><span class="line">  <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'asdfasdfasfd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="string">'qazwsxedc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set(a).intersection(b)</span><br><span class="line">set([<span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法四：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasIntersection</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> set(a).isdisjoint(b)</span><br></pre></td></tr></table></figure><h4 id="最大交集"><a href="#最大交集" class="headerlink" title="最大交集"></a>最大交集</h4><blockquote><p>How to find all intersections (also called the longest common substrings) of two strings and their positions in both strings?<br>For example:<br>if S1=”never” and S2=”forever” then resulted intersection must be [“ever”] and its positions are [(1,3)].<br>If S1=”address” and S2=”oddness” then resulted intersections are [“dd”,”ess”] and their positions are [(1,1),(4,4)].</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line">In [<span class="number">31</span>]: <span class="keyword">import</span> difflib</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: difflib.SequenceMatcher(<span class="keyword">None</span>, <span class="string">"never"</span>, <span class="string">"forever"</span>).get_matching_blocks()</span><br><span class="line">Out[<span class="number">32</span>]: [Match(a=<span class="number">1</span>, b=<span class="number">3</span>, size=<span class="number">4</span>), Match(a=<span class="number">5</span>, b=<span class="number">7</span>, size=<span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: difflib.SequenceMatcher(<span class="keyword">None</span>, <span class="string">"address"</span>, <span class="string">"oddness"</span>).get_matching_blocks()</span><br><span class="line">Out[<span class="number">33</span>]: [Match(a=<span class="number">1</span>, b=<span class="number">1</span>, size=<span class="number">2</span>), Match(a=<span class="number">4</span>, b=<span class="number">4</span>, size=<span class="number">3</span>), Match(a=<span class="number">7</span>, b=<span class="number">7</span>, size=<span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_common_substring</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">   set1 = set(s1[begin:end] <span class="keyword">for</span> (begin, end) <span class="keyword">in</span></span><br><span class="line">              itertools.combinations(range(len(s1)+<span class="number">1</span>), <span class="number">2</span>))</span><br><span class="line">   set2 = set(s2[begin:end] <span class="keyword">for</span> (begin, end) <span class="keyword">in</span></span><br><span class="line">              itertools.combinations(range(len(s2)+<span class="number">1</span>), <span class="number">2</span>))</span><br><span class="line">   common = set1.intersection(set2)</span><br><span class="line">   maximal = [com <span class="keyword">for</span> com <span class="keyword">in</span> common</span><br><span class="line">              <span class="keyword">if</span> sum((s.find(com) <span class="keyword">for</span> s <span class="keyword">in</span> common)) == <span class="number">-1</span> * (len(common)<span class="number">-1</span>)]</span><br><span class="line">   <span class="keyword">return</span> [(s, s1.index(s), s2.index(s)) <span class="keyword">for</span> s <span class="keyword">in</span> maximal]</span><br><span class="line">   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_common_substring(<span class="string">'address'</span>, <span class="string">'oddness'</span>)</span><br><span class="line">[(<span class="string">'dd'</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="string">'ess'</span>, <span class="number">4</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_common_substring(<span class="string">'never'</span>, <span class="string">'forever'</span>)</span><br><span class="line">[(<span class="string">'ever'</span>, <span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_common_substring(<span class="string">'call'</span>, <span class="string">'wall'</span>)</span><br><span class="line">[(<span class="string">'all'</span>, <span class="number">1</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>longest_common_substring(<span class="string">'abcd1234'</span>, <span class="string">'1234abcd'</span>)</span><br><span class="line">[(<span class="string">'abcd'</span>, <span class="number">0</span>, <span class="number">4</span>), (<span class="string">'1234'</span>, <span class="number">4</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure><h3 id="并集-union"><a href="#并集-union" class="headerlink" title="并集(union)"></a>并集(union)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(set(a).union(set(b)))</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(set(b) | (set(a)))</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h3 id="差集-difference"><a href="#差集-difference" class="headerlink" title="差集(difference)"></a>差集(difference)</h3><blockquote><p>差集：找出无效的数据，相当于用一个集合减去另一个集合的数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example：</span></span><br><span class="line">valid = set([<span class="string">'yellow'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'black'</span>])</span><br><span class="line">input_set = set([<span class="string">'red'</span>, <span class="string">'brown'</span>])</span><br><span class="line">print(input_set.difference(valid))</span><br><span class="line"><span class="comment">### 输出: set(['brown'])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(set(b).difference(set(a)))       <span class="comment"># b中有而a中没有的</span></span><br><span class="line">[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(set(b) - (set(a)))</span><br><span class="line">[<span class="number">8</span>]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="集合操作汇总"><a href="#集合操作汇总" class="headerlink" title="集合操作汇总"></a>集合操作汇总</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = set(<span class="string">'abcde'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = set(<span class="string">'bdxyz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>])                    <span class="comment"># 2.6 display format</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'e'</span> <span class="keyword">in</span> x                                      <span class="comment"># Membership 成员</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x – y                                         <span class="comment"># Difference 差集</span></span><br><span class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x | y                                         <span class="comment"># Union 并集</span></span><br><span class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'y'</span>, <span class="string">'x'</span>, <span class="string">'z'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; y                                         <span class="comment"># Intersection 交集</span></span><br><span class="line">set([<span class="string">'b'</span>, <span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x ^ y                                         <span class="comment"># Symmetric difference (XOR) 补集</span></span><br><span class="line">set([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'y'</span>, <span class="string">'x'</span>, <span class="string">'z'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &gt; y, x &lt; y                                  <span class="comment"># Superset, subset  父级，子级</span></span><br><span class="line">(<span class="keyword">False</span>, <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="巨型集合处理（数量在百万，千万甚至更大）"><a href="#巨型集合处理（数量在百万，千万甚至更大）" class="headerlink" title="巨型集合处理（数量在百万，千万甚至更大）"></a>巨型集合处理（数量在百万，千万甚至更大）</h3><blockquote><p>方法一：set<br>特点：</p><ul><li>速度快；</li><li>内存消耗大，一个1万个元素的集合，其占用的内存远大于1万 * 每个元素的大小，因为整个set数据结构占用大量其他空间来存储索引之类的东西。</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">并集：s.union(t) 或者 s | t</span><br><span class="line">交集：s.intersection(t) 或者 s &amp; t</span><br><span class="line">差集：s.difference(t) 或者 s - t</span><br></pre></td></tr></table></figure><blockquote><p>方法二：Numpy<br>特点：</p><ul><li>先把要操作的元素放在数组而不是set中，同样内容的数组占用的内存比set小的多；占用内存小于set的方式；</li><li>速度接近set方式。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">并集： np.union1d(s, t)    <span class="comment"># 返回排序的、去重的两个list的合集</span></span><br><span class="line">交集： np.intersect1d(s, t, assume_unique=<span class="keyword">True</span>)    <span class="comment"># 返回排序的、去重的两个list的交集，尽可能保证传入的两个list是去重的，这可以加快运算速度。</span></span><br><span class="line">差集： np.setdiff1d(s, t, assume_unique=<span class="keyword">True</span>)    <span class="comment"># 返回排序的，去重的差集，assume_unique参数同上。</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>方法三：cmd<br>以上两种方法的缺点就是当集合足够大而内存又不够的时候，会MemoryError（在试验中2000万个长度为24的字符串在4G的内存中就报MemoryError了）；<br>解决办法：使用linux 命令。<br>特点：</p><ul><li>内存消耗小，会使用临时文件来避免内存问题；</li><li>耗时长。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.文件排序，使用sort命令：</span><br><span class="line">sort --buffer-size=1G --output=/path/to/output /path/to/src_file    # --buffer-size在Debian上可用，其他平台未知，不是标准参数.</span><br><span class="line"></span><br><span class="line">并集：sort -m /path/to/src1 /path/tosrc2 -u --output=/path/to/result    # 注意src1, src2必须是已排序的文件，而且结果也是已排序的。</span><br><span class="line">交集：comm -12 file1 file2 &gt; output    # 使用comm命令，注意传入的文件必须都是已排序的。</span><br><span class="line">差集：comm -3 file1 file2 &gt; output    # 使用comm命令，注意传入的文件必须都是已排序的。</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>综上，三种方法依次对内存的依赖减小，耗时增加，可依据集合大小以及硬件环境来选择。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-24 建站日志（二）</title>
      <link href="/2017/05/24/2017-5-24-%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2017/05/24/2017-5-24-%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p>到此，建站告一段落，功能差不多完善了 </p></div><a id="more"></a><h3 id="2017-05-24："><a href="#2017-05-24：" class="headerlink" title="2017-05-24："></a><strong>2017-05-24：</strong></h3><h3 id="Bootstrap-Callout的巨坑BUG"><a href="#Bootstrap-Callout的巨坑BUG" class="headerlink" title="Bootstrap Callout的巨坑BUG"></a>Bootstrap Callout的巨坑BUG</h3><hr><p>在今天新增添加评论后，部署完成后发现，界面变成如下：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E4%B9%B1%E7%A0%81.png" alt=""><br>完全乱码了，真是…<br>经过一晚上排查，发现原因出在：Markdown开头我使用了<code>Bootstrap Callout</code>语句，中间写了其他代码，结尾又再次使用了<code>Bootstrap Callout</code>语句，如下图：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E4%B9%B1%E7%A0%81BUG.png" alt=""><br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E4%B9%B1%E7%A0%81BUG2.png" alt=""><br>把结尾的<code>Bootstrap Callout</code>语句去掉之后，一切又恢复了正常。<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E4%B9%B1%E7%A0%81%E6%AD%A3%E5%B8%B8.png" alt=""></p><p>难道<code>Bootstrap Callout</code>语句一篇文章只能使用一次？？？</p><p>为了验证，做了如下测试：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E4%B9%B1%E7%A0%81BUG4.png" alt=""><br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E4%B9%B1%E7%A0%81BUG3.png" alt=""><br>果然如此，真是绝了…<br>对了，连下面这种情况（<code>Bootstrap Callout</code>）也不能出现，出现了也算一次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&#123;% note info %&#125; ... &#123;% endnote %&#125;` #单引号小代码块</span><br></pre></td></tr></table></figure></p><h3 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h3><hr><p>这里我用的是<code>Hypercomments</code>，国外的一个第三方评论平台，好处之一就是可以支持匿名评论，不用登录就可以进行评论，取代即将入土的多说。</p><p>1.<code>Next</code>主题已经集成了<code>Hypercomments</code>，只需到<a href="https://www.hypercomments.com/" target="_blank" rel="noopener">Hypercomments</a>注册一个账号，绑定网站入口，拿到<code>widget_id</code>即可。<br>具体位置如下：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_Hypercomments.png" alt=""></p><p>代码中找到<code>widget_id:xxxxx</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">widget:&quot;Stream&quot;, widget_id: xxxxx</span><br></pre></td></tr></table></figure></p><p>2.修改<code>主题配置文件</code>，找到如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Hypercomments</span><br><span class="line">#hypercomments_id:</span><br></pre></td></tr></table></figure></p><p>3.取消注释，将拿到的<code>widget_id</code>填入，即可。<br>预览：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E8%AF%84%E8%AE%BA%E6%A0%8F.png" alt=""></p><h3 id="使用七牛做图片图床"><a href="#使用七牛做图片图床" class="headerlink" title="使用七牛做图片图床"></a>使用七牛做图片图床</h3><hr><p>为了提高页面加载速度，方便图片管理，将博客所有图片均同步到七牛云，制成外链，加到博客中。</p><p>步骤很简单，注册一个七牛云账号，新建一个存储空间，将用到的图片传上去，拿到外链，写博客时，如下使用就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://ohhmsby4v.bkt.clouddn.com/image/2017-05-24_%E5%BB.png)</span><br></pre></td></tr></table></figure></p><h3 id="2017-05-21："><a href="#2017-05-21：" class="headerlink" title="2017-05-21："></a><strong>2017-05-21：</strong></h3><h3 id="Markdown内置标签"><a href="#Markdown内置标签" class="headerlink" title="Markdown内置标签"></a>Markdown内置标签</h3><hr><h4 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签别名 --&gt;</span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><p>预览：<br><blockquote class="blockquote-center"><p>人的一切痛苦，本质上都是对自己的无能的愤怒。 </p></blockquote></p><h4 id="突破容器宽度限制的图片"><a href="#突破容器宽度限制的图片" class="headerlink" title="突破容器宽度限制的图片"></a>突破容器宽度限制的图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;full-image&quot; 是必须的 --&gt;</span><br><span class="line">&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% fullimage /image-url, alt, title %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 别名 --&gt;</span><br><span class="line">&#123;% fi /image-url, alt, title %&#125;</span><br></pre></td></tr></table></figure><p>预览：<br><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-21_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_full_img1.jpg" class="full-image" alt="alt" title="时光"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span></p><h4 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note %&#125; Content (md partial supported of **none**) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note default %&#125; Content (md partial supported of **default**) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary %&#125; Content (md partial supported of **primary**) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note success %&#125; Content (md partial supported of **success**) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note info %&#125; Content (md partial supported of **info**) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning %&#125; Content (md partial supported of **warning**) &#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger %&#125; Content (md partial supported of **danger**) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>* <code>class_name</code>可以为：<code>default</code>、<code>primary</code>、<code>success</code>、<code>info</code>、<code>warning</code>、<code>danger</code>，也可以为空。<br>预览：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-21_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_Bootstrap%20Callout.png" alt=""></p><blockquote class="blockquote-center">完</blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-23 一个逗号(,)引起的BUG</title>
      <link href="/2017/05/23/2017-5-23-%E4%B8%80%E4%B8%AA%E9%80%97%E5%8F%B7-%E5%BC%95%E8%B5%B7%E7%9A%84BUG/"/>
      <url>/2017/05/23/2017-5-23-%E4%B8%80%E4%B8%AA%E9%80%97%E5%8F%B7-%E5%BC%95%E8%B5%B7%E7%9A%84BUG/</url>
      
        <content type="html"><![CDATA[<p>昨天工作，突然发现之前好好的list，在赋值给新变量后居然类型变了，一个好好的list几分钟不见妥妥的叛变了，变成了tuple，由此，一场闹剧开始上演…<br><a id="more"></a></p><h3 id="前情回要："><a href="#前情回要：" class="headerlink" title="前情回要："></a>前情回要：</h3><p>话说有一个类对象内有一方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def call_frequency(self, data):</span><br><span class="line">    ...</span><br><span class="line">    return list</span><br></pre></td></tr></table></figure></p><p>返回的是一个list，内部是一个个dict，结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;xx:xxx,xx:xxx&#125;,&#123;xx:xxx,&#125;,&#123;x:xxx&#125;,...]</span><br></pre></td></tr></table></figure></p><h3 id="闹剧上演："><a href="#闹剧上演：" class="headerlink" title="闹剧上演："></a>闹剧上演：</h3><p> ok，开始今天任务，开始在另一方法中调用赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_list = self.call_frequency(data)</span><br></pre></td></tr></table></figure></p><p>结果<code>print data_list</code>，返回值如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([&#123;xx:xxx,xx:xxx&#125;,&#123;xx:xxx,&#125;,&#123;x:xxx&#125;,...],)</span><br></pre></td></tr></table></figure></p><p>what a fxxk，瞬间，凌乱了，还以为发现新天地了，啊！原来，list赋值后会变成tuple，加个马甲，以前怎么没发现呢…<br>还自以为是的在调用<code>data_list</code>时，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_tel_list = [v.get(&quot;call_tel&quot;,&quot;&quot;) for v in data_list[0]]</span><br></pre></td></tr></table></figure></p><h3 id="惊天逆转"><a href="#惊天逆转" class="headerlink" title="惊天逆转"></a>惊天逆转</h3><p>晚上，回家，比较得意，欸，又学到一招，不错哟，积蓄，努力。</p><p>8小时后，天亮了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_list = self.call_frequency(data),</span><br></pre></td></tr></table></figure></p><p>咦，这里怎么有个逗号？</p><p>瞬间，懵逼…</p><p>四下瞅瞅，</p><p>然后，按下←，整个世界清静了，再悄悄把昨天的杰作恢复本来面目，</p><p>嗯，今天，天气真好。</p><p>真的！</p><blockquote class="blockquote-center">完</blockquote>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> list </tag>
            
            <tag> tuple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-17 Markdown 常用语法</title>
      <link href="/2017/05/17/2017-5-17-Markdown-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/05/17/2017-5-17-Markdown-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="标题-一"><a href="#标题-一" class="headerlink" title="标题(一)"></a>标题(一)</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>效果：</p><p><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-18_markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95_%E6%A0%87%E9%A2%981.png" alt=""></p><hr><h2 id="标题-二"><a href="#标题-二" class="headerlink" title="标题(二)"></a>标题(二)</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标题（#）</span><br><span class="line">==</span><br><span class="line">标题（##）</span><br><span class="line">--</span><br></pre></td></tr></table></figure></p><p>效果：</p><p><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-18_markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95_%E6%A0%87%E9%A2%982.png" alt=""></p><hr><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 文本1</span><br><span class="line">   * 二级文本</span><br><span class="line">- 文本2</span><br><span class="line">- 文本3</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><ul><li>文本1<ul><li>二级文本</li></ul></li><li>文本2</li><li>文本3</li></ul></blockquote><hr><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 文本1</span><br><span class="line">2. 文本2</span><br><span class="line">3. 文本3</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><ol><li>文本1</li><li>文本2</li><li>文本3</li></ol></blockquote><hr><h2 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[显示文本](链接地址)</span><br><span class="line">[悟の迹](http://chihweihsu.com/)</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p> <a href="http://chihweihsu.com/">悟の迹</a></p></blockquote><hr><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://chihweihsu.com/&gt;</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p> <a href="http://chihweihsu.com/">http://chihweihsu.com/</a></p></blockquote><hr><h2 id="参考式链接"><a href="#参考式链接" class="headerlink" title="参考式链接"></a>参考式链接</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3],</span><br><span class="line">but most traffic is [悟の迹] [4].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br><span class="line">  [4]: http://chihweihsu.com/    &quot;悟の迹&quot;</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>, but most traffic is <a href="http://chihweihsu.com/" title="悟の迹">悟の迹</a>.</p></blockquote><hr><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt text](图片链接 &quot;title&quot;)</span><br><span class="line">![悟](http://ohhmsby4v.bkt.clouddn.com/image/%E6%82%9F.jpg)</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p> <img src="http://ohhmsby4v.bkt.clouddn.com/image/%E6%82%9F.jpg" alt="悟"></p></blockquote><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p> <code>code</code></p></blockquote><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码（去空格）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">` ` `</span><br><span class="line">  code</span><br><span class="line">` ` `</span><br></pre></td></tr></table></figure></p><p>效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code</span><br></pre></td></tr></table></figure></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用文字</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; 二级引用文字</span><br><span class="line">&gt;</span><br><span class="line">&gt; 引用文字</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p>引用文字</p><blockquote><p>二级引用文字</p></blockquote><p>引用文字</p></blockquote><hr><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体文字*</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p><em>斜体文字</em></p></blockquote><hr><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**粗体文字**</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p><strong>粗体文字</strong></p></blockquote><hr><h2 id="粗斜体"><a href="#粗斜体" class="headerlink" title="粗斜体"></a>粗斜体</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***粗斜体***</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p><strong><em>粗斜体</em></strong></p></blockquote><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p><del>删除线</del></p></blockquote><hr><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个注脚[^footnote1]的样例</span><br><span class="line">[^1]: 我就是悟</span><br></pre></td></tr></table></figure></p><p>效果：</p><p>这是一个注脚[^footnote1]的样例</p><blockquote></blockquote><hr><h2 id="表格-一"><a href="#表格-一" class="headerlink" title="表格(一)"></a>表格(一)</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are            | Cool       |</span><br><span class="line">| -----         | :-----:        | -----:     |</span><br><span class="line">| col 3 is      | right-aligned  | $1600      |</span><br><span class="line">| col 2 is      | center         | $12        |</span><br><span class="line">| zebra stipes  | are neat       | $1         |</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">center</td><td style="text-align:right">$12</td></tr><tr><td>zebra stipes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></blockquote><hr><h2 id="表格-二"><a href="#表格-二" class="headerlink" title="表格(二)"></a>表格(二)</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dog | bird | cat</span><br><span class="line">----|------|-----</span><br><span class="line">foo | foo  | foo</span><br><span class="line">bar | bar  | bar</span><br><span class="line">baz | baz  | baz</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><table><thead><tr><th>dog</th><th>bird</th><th>cat</th></tr></thead><tbody><tr><td>foo</td><td>foo</td><td>foo</td></tr><tr><td>bar</td><td>bar</td><td>bar</td></tr><tr><td>baz</td><td>baz</td><td>baz</td></tr></tbody></table></blockquote><hr><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\*悟の迹\*</span><br><span class="line"></span><br><span class="line">支持以下符号转义：</span><br><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br><span class="line">&gt;   大于号</span><br></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p>*悟の迹*</p></blockquote><p>最近访客</p><div class="ds-recent-visitors" data-num-items="39" data-avatar-size="40" id="ds-recent-visitors"></div>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 速查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-17 建站日志</title>
      <link href="/2017/05/17/2017-5-17-%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/"/>
      <url>/2017/05/17/2017-5-17-%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<div class="note success"><p>未完待续… </p></div><a id="more"></a><h3 id="2017-05-19："><a href="#2017-05-19：" class="headerlink" title="2017-05-19："></a><strong>2017-05-19：</strong></h3><h3 id="添加新-Page"><a href="#添加新-Page" class="headerlink" title="添加新 Page"></a>添加新 Page</h3><hr><p>1.用如下命令添加新page:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;Python&quot;</span><br><span class="line">hexo new page &quot;Linux&quot;</span><br><span class="line">hexo new page &quot;Notes&quot;</span><br><span class="line">hexo new page &quot;Something&quot;</span><br><span class="line">hexo new page &quot;Links&quot;</span><br><span class="line">hexo new page &quot;About&quot;</span><br></pre></td></tr></table></figure><p>2.打开<code>主题配置文件`</code>\themes\next_config.yml<code>文件，在</code>menu`中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  Python: /Python</span><br><span class="line">  Linux: /Linux</span><br><span class="line">  Notes: /Notes</span><br><span class="line">  Something: /Something</span><br><span class="line">  Links: /Links</span><br><span class="line">  About: /About</span><br></pre></td></tr></table></figure></p><p>3.打开<code>\themes\next\languages\zh-Hans.yml</code>，修改<code>menu</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  python: Python</span><br><span class="line">  linux: Linux</span><br><span class="line">  notes: 笔记</span><br><span class="line">  something: 有料</span><br><span class="line">  links: 链接</span><br><span class="line">  about: 关于</span><br></pre></td></tr></table></figure></p><p>*注意这里第一列必须全为小写。</p><p>*这是简体中文的配置文件，如果你的博客用的是其他语言，请打开对应的文件。</p><h3 id="修改blog页面配色"><a href="#修改blog页面配色" class="headerlink" title="修改blog页面配色"></a>修改blog页面配色</h3><hr><h4 id="添加自定义颜色"><a href="#添加自定义颜色" class="headerlink" title="添加自定义颜色"></a>添加自定义颜色</h4><p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// Colors</span><br><span class="line">// colors for use across theme.</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$whitesmoke   = #f5f5f5</span><br><span class="line">$gainsboro    = #eee</span><br><span class="line">$gray-lighter = #ddd</span><br><span class="line">$grey-light   = #ccc</span><br><span class="line">$grey         = #bbb</span><br><span class="line">$grey-dark    = #999</span><br><span class="line">$grey-dim     = #666</span><br><span class="line">$black-light  = #555</span><br><span class="line">$black-dim    = #333</span><br><span class="line">$black-deep   = #222</span><br><span class="line">$red          = #ff2a2a</span><br><span class="line">$blue-bright  = #87daff</span><br><span class="line">$blue         = #0684bd</span><br><span class="line">$blue-deep    = #262a30</span><br><span class="line">$orange       = #fc6423</span><br><span class="line">// 下面是我自定义的颜色</span><br><span class="line">$my-link-blue = #0593d3  //链接颜色</span><br><span class="line">$my-link-hover-blue = #0477ab  //鼠标悬停后颜色</span><br><span class="line">$my-code-foreground = #dd0055  // 用``围出的代码块字体颜色</span><br><span class="line">$my-code-background = #eee  // 用``围出的代码块背景颜色</span><br></pre></td></tr></table></figure></p><h4 id="修改超链接颜色"><a href="#修改超链接颜色" class="headerlink" title="修改超链接颜色"></a>修改超链接颜色</h4><p>还是<code>base.styl</code>文件，修改这几行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Global link color.</span><br><span class="line">$link-color                   = $my-link-blue</span><br><span class="line">$link-hover-color             = $my-link-hover-blue</span><br><span class="line">$link-decoration-color        = $gray-lighter</span><br><span class="line">$link-decoration-hover-color  = $my-link-hover-blue</span><br></pre></td></tr></table></figure></p><p>预览：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-19_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E8%B6%85%E9%93%BE%E6%8E%A5.png" alt=""></p><h4 id="修改小型代码块颜色"><a href="#修改小型代码块颜色" class="headerlink" title="修改小型代码块颜色"></a>修改小型代码块颜色</h4><p>依旧是<code>base.styl</code>文件，修改<code>$code-background</code>和<code>$code-foreground</code>的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Code &amp; Code Blocks</span><br><span class="line">// 用``围出的代码块</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$code-font-family               = $font-family-monospace</span><br><span class="line">$code-font-size                 = 15px</span><br><span class="line">$code-background                = $my-code-background</span><br><span class="line">$code-foreground                = $my-code-foreground</span><br><span class="line">$code-border-radius             = 4px</span><br></pre></td></tr></table></figure></p><p>预览：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-19_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E4%BB%A3%E7%A0%81%E5%9D%97.png" alt=""></p><h3 id="修改blog页面字体大小"><a href="#修改blog页面字体大小" class="headerlink" title="修改blog页面字体大小"></a>修改blog页面字体大小</h3><hr><p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Font size</span><br><span class="line">$font-size-base           = 14px</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base           = 16px</span><br></pre></td></tr></table></figure></p><h3 id="修改blog页面宽度"><a href="#修改blog页面宽度" class="headerlink" title="修改blog页面宽度"></a>修改blog页面宽度</h3><hr><p>现在一般都用宽屏显示器，博客页面两侧留白太多，调整一下宽度。</p><p>1.打开<code>\themes\next\source\css\_common\components\post\post-expand.styl</code>，找到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: 767px)</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: 1080px)</span><br></pre></td></tr></table></figure></p><p>2.打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$main-desktop                   = 960px</span><br><span class="line">$main-desktop-large             = 1200px</span><br><span class="line">$content-desktop                = 700px</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$main-desktop                   = 1080px</span><br><span class="line">$main-desktop-large             = 1200px</span><br><span class="line">$content-desktop                = 810px</span><br></pre></td></tr></table></figure></p><h3 id="修改博客部署的message"><a href="#修改博客部署的message" class="headerlink" title="修改博客部署的message"></a>修改博客部署的message</h3><hr><p>在<code>\node_modules\hexo-deployer-git\lib\deployer.js</code>文件末尾找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>改得个性化一点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">好家伙又改版了悟の迹: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Github项目主页添加README"><a href="#Github项目主页添加README" class="headerlink" title="Github项目主页添加README"></a>Github项目主页添加README</h3><hr><h4 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h4><p>Github上博客的仓库主页没有README，如果把<code>README.md</code>放入<code>source</code>文件夹，<code>hexo g</code>生成时会被解析成html文件，而放到<code>public</code>文件夹中，生成时又会自动删除。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h4><p>在<code>source</code>目录下新建文件<code>README.mdown</code>，在里面写README即可。<code>hexo g</code>会把它复制到<code>public</code>文件夹，且不会被解析成html</p><h3 id="Github项目主页添加LICENSE"><a href="#Github项目主页添加LICENSE" class="headerlink" title="Github项目主页添加LICENSE"></a>Github项目主页添加LICENSE</h3><hr><p>修改<code>主题配置文件</code>，找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># http://creativecommons.org/</span><br><span class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line">creative_commons: by-nc-sa</span><br><span class="line">#creative_commons:</span><br></pre></td></tr></table></figure></p><p>将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。</p><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><hr><p>为优化SEO，更改首页标题格式为「关键词-网站名称 - 网站描述」</p><p>打开<code>\themes\next\layout\index.swig</code>文件，找到这行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>把它改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125;</span><br><span class="line">  &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加“Fork-me-on-Github”-ribbon"><a href="#添加“Fork-me-on-Github”-ribbon" class="headerlink" title="添加“Fork me on Github” ribbon"></a>添加“Fork me on Github” ribbon</h3><hr><p>1.点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">Fork me on Github</a>；</p><p>2.给blog主页选择一个绶带（ribbon），并复制相应代码；</p><p>3.找到正在使用的<code>theme</code>下的<code>layout</code>文件，将代码插入即可；</p><p>4.比如我选择了<code>红色</code>的ribbon，使用的<code>themes</code>为next，那么只要打开 <code>blog\themes\next\layout\_layout.swig</code>文件，复制下面这段代码，放在最后，标签之前即可。（注意将<code>https://github.com/you</code>改为你自己的github链接）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;https://github.com/you&quot;&gt;</span><br><span class="line">    &lt;img style=&quot;position: absolute; top: 0; right: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67&quot;</span><br><span class="line">    alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h3 id="添加404公益页面"><a href="#添加404公益页面" class="headerlink" title="添加404公益页面"></a>添加404公益页面</h3><hr><p>在<code>blog/source</code>下新建自己的<code>404.html</code>文件即可，强推<a href="http://www.qq.com/404/" target="_blank" rel="noopener">腾讯公益404</a>，代码可参考如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: default</span><br><span class="line">---</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">         &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">         &lt;title&gt;404&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">         &lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;http://chihweihsu.com/&quot; homePageName=&quot;回到悟の迹&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="文章阅读次数统计"><a href="#文章阅读次数统计" class="headerlink" title="文章阅读次数统计"></a>文章阅读次数统计</h3><hr><p>1.注册<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">LeanCloud</a>帐号并验证邮箱；</p><p>2.创建应用，新建一个应用来专门进行博客的访问统计的数据操作；</p><p>3.创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置；</p><p>4.新建一个Class用来专门保存我们博客的文章访问量等数据；</p><p>5.新建Class名字必须为Counter，设置默认的ACL权限，建议在此处选择无限制；</p><p>6.选择左侧的<code>应用Key</code>选项，拿到我们创建应用的<code>AppID</code>以及<code>AppKey</code>；</p><p>7.编辑 <code>主题配置文件</code>，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class="line">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure></p><p>8.ok，部署后可见。</p><h3 id="2017-05-18："><a href="#2017-05-18：" class="headerlink" title="2017-05-18："></a><strong>2017-05-18：</strong></h3><h3 id="配置导航栏网站小图标"><a href="#配置导航栏网站小图标" class="headerlink" title="配置导航栏网站小图标"></a>配置导航栏网站小图标</h3><hr><p>挑选一张图片，名字改为<code>favicon.ico</code>，放到<code>..\blog\source</code>下，配置<code>主题配置文件</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure></p><h3 id="集成百度分享模块"><a href="#集成百度分享模块" class="headerlink" title="集成百度分享模块"></a>集成百度分享模块</h3><hr><p>首先，编辑 <code>站点配置文件</code>，末尾添加字段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidushare: true #百度分享功能</span><br></pre></td></tr></table></figure></p><p>其次，编辑<code>主题配置文件</code>，找到如下代码位置，去掉最后两行#注释，并选择展示方式，建议slide悬浮状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Baidu Share</span><br><span class="line"># Available value:</span><br><span class="line">#    button | slide</span><br><span class="line"># Warning: Baidu Share does not support https.</span><br><span class="line">baidushare:</span><br><span class="line"> type: slide #百度分享展示的方式button|slide</span><br></pre></td></tr></table></figure></p><p>*注意：百度分享不支持https方式，可以自己买个域名绑定，或者搜下<code>百度分享不支持https的解决方案</code>，有前辈做出解答。</p><p>其实，现在已经完成了；但是，为了折腾，我们接着来自定义百度分享的显示，点击<a href="http://share.baidu.com/code" target="_blank" rel="noopener">代码获取</a>，一步步进行定制，走完流程，点击<code>直接获取代码</code>，拿到一段js代码，类似如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window._bd_share_config = &#123;</span><br><span class="line">        &quot;common&quot;: &#123;</span><br><span class="line">            &quot;bdSnsKey&quot;: &#123;&#125;,</span><br><span class="line">            &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">            &quot;bdMini&quot;: &quot;2&quot;,</span><br><span class="line">            &quot;bdMiniList&quot;: [</span><br><span class="line">                &quot;mshare&quot;,</span><br><span class="line">                &quot;bdysc&quot;,</span><br><span class="line">                &quot;evernotecn&quot;,</span><br><span class="line">                &quot;tqq&quot;,</span><br><span class="line">                &quot;weixin&quot;,</span><br><span class="line">                &quot;sqq&quot;,</span><br><span class="line">                &quot;qzone&quot;,</span><br><span class="line">                &quot;douban&quot;,</span><br><span class="line">                &quot;tsina&quot;,</span><br><span class="line">                &quot;tieba&quot;,</span><br><span class="line">                &quot;youdao&quot;,</span><br><span class="line">                &quot;isohu&quot;,</span><br><span class="line">                &quot;mail&quot;,</span><br><span class="line">                &quot;ty&quot;,</span><br><span class="line">                &quot;fbook&quot;,</span><br><span class="line">                &quot;twi&quot;,</span><br><span class="line">                &quot;linkedin&quot;,</span><br><span class="line">                &quot;copy&quot;,</span><br><span class="line">                &quot;print&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;bdPic&quot;: &quot;&quot;,</span><br><span class="line">            &quot;bdStyle&quot;: &quot;0&quot;,</span><br><span class="line">            &quot;bdSize&quot;: &quot;16&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;slide&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;slide&quot;,</span><br><span class="line">            &quot;bdImg&quot;: &quot;5&quot;,</span><br><span class="line">            &quot;bdPos&quot;: &quot;right&quot;,</span><br><span class="line">            &quot;bdTop&quot;: &quot;53.5&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;image&quot;: &#123;</span><br><span class="line">            &quot;viewList&quot;: [</span><br><span class="line">                &quot;weixin&quot;,</span><br><span class="line">                &quot;qzone&quot;,</span><br><span class="line">                &quot;tsina&quot;,</span><br><span class="line">                &quot;evernotecn&quot;,</span><br><span class="line">                &quot;douban&quot;,</span><br><span class="line">                &quot;bdysc&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;viewText&quot;: &quot;分享到：&quot;,</span><br><span class="line">            &quot;viewSize&quot;: &quot;16&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;selectShare&quot;: &#123;</span><br><span class="line">            &quot;bdContainerClass&quot;: null,</span><br><span class="line">            &quot;bdSelectMiniList&quot;: [</span><br><span class="line">                &quot;weixin&quot;,</span><br><span class="line">                &quot;qzone&quot;,</span><br><span class="line">                &quot;tsina&quot;,</span><br><span class="line">                &quot;evernotecn&quot;,</span><br><span class="line">                &quot;douban&quot;,</span><br><span class="line">                &quot;bdysc&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>最后，打开如下文件<code>blog\themes\next\layout\_partials\share\baidushare.swing</code>，替换掉里面的js代码，本文以<code>slide</code>模式为例，替换掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.baidushare.type === &quot;slide&quot; %&#125;</span><br></pre></td></tr></table></figure></p><p>后面的<code>&lt;script&gt;...&lt;/script&gt;</code>即可。</p><h3 id="2017-05-17："><a href="#2017-05-17：" class="headerlink" title="2017-05-17："></a><strong>2017-05-17：</strong></h3><h3 id="markdown写文章时，添加居中引用模块"><a href="#markdown写文章时，添加居中引用模块" class="headerlink" title="markdown写文章时，添加居中引用模块"></a>markdown写文章时，添加居中引用模块</h3><hr><p>只需在写文章时，添加如下标签即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;</span><br><span class="line">    优秀的人，不是不合群，而是他们合群的人里面没有你</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure></p><p>预览：</p><blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><h3 id="2017-05-16："><a href="#2017-05-16：" class="headerlink" title="2017-05-16："></a><strong>2017-05-16：</strong></h3><h3 id="首页文章预览添加图片"><a href="#首页文章预览添加图片" class="headerlink" title="首页文章预览添加图片"></a>首页文章预览添加图片</h3><hr><p>打开<code>scaffolds/post.md</code>文件，在默认参数中添加如下参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 首页文章预览添加图片：</span><br><span class="line">photos:</span><br><span class="line">    - http://xxx.com/photo1.jpg</span><br><span class="line">    - http://xxx.com/photo2.jpg</span><br></pre></td></tr></table></figure></p><p>预览：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-17_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_pandas.png" alt=""></p><h3 id="首页文章摘要模式"><a href="#首页文章摘要模式" class="headerlink" title="首页文章摘要模式"></a>首页文章摘要模式</h3><hr><p>首页开启文章摘要模式，不全文显示，而是出现<code>阅读全文&gt;</code>，只需在<code>主题配置文件</code>中找到<code>auto_excerpt</code>属性进行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true #改写为true</span><br><span class="line">  length: 150 #默认展示的高度</span><br></pre></td></tr></table></figure></p><p>或者，在Markdown文章中不想显示的位置，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里显示</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">这里不显示</span><br></pre></td></tr></table></figure></p><p>预览：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-05-17_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-17 命运从不缺席</title>
      <link href="/2017/05/17/2017-5-17-%E5%91%BD%E8%BF%90%E4%BB%8E%E4%B8%8D%E7%BC%BA%E5%B8%AD/"/>
      <url>/2017/05/17/2017-5-17-%E5%91%BD%E8%BF%90%E4%BB%8E%E4%B8%8D%E7%BC%BA%E5%B8%AD/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><p>纽约时间比加州时间早三个小时,<br><code>New York is 3 hours ahead of California,</code></p><p>但加州时间并没有变慢。<br><code>but it does not make California slow.</code></p><p>有人22岁就毕业了，<br><code>Someone graduated at the age of 22,</code></p><p>但等了五年才找到好的工作！<br><code>but waited 5 years before securing a good job!</code><br><a id="more"></a></p><p>有人25岁就当上CEO，<br><code>Someone became a CEO at 25,</code></p><p>却在50岁去世。<br><code>and died at 50.</code></p><p>也有人迟到50岁才当上CEO，<br><code>While another became a CEO at 50,</code></p><p>然后活到90岁。<br><code>and lived to 90 years.</code></p><p>有人依然单身，<br><code>Someone is still single,</code></p><p>同时也有人已婚。<br><code>while someone else got married.</code><br><code>奥巴马55岁就退休，</code>Obama retires at 55,`</p><p>川普70岁才开始当总统。<br><code>but Trump starts at 70.</code></p><p>世上每个人本来就有自己的发展时区。<br><code>Absolutely everyone in this world works based on their Time Zone.</code></p><p>身边有些人看似走在你前面，<br><code>People around you might seem to go ahead of you,</code></p><p>也有人看似走在你后面。<br><code>some might seem to be behind you.</code></p><p>但其实每个人在自己的时区有自己的步程。<br><code>But everyone is running their own RACE, in their own TIME.</code></p><p>不用嫉妒或嘲笑他们。<br><code>Don’t envy them or mock them.</code></p><p>他们都在自己的时区里，你也是！<br><code>They are in their TIME ZONE, and you are in yours!</code></p><p>生命就是等待正确的行动时机。<br><code>Life is about waiting for the right moment to act.</code></p><p>所以，放轻松。<br><code>So, RELAX.</code></p><p>你没有落后。<br><code>You’re not LATE.</code></p><p>你没有领先。<br><code>You’re not EARLY.</code></p><p>在命运为你安排的属于自己的时区里，一切都准时。<br><code>You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</code></p>]]></content>
      
      
      <categories>
          
          <category> Writings </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美文 </tag>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-16 从字典中提取子集</title>
      <link href="/2017/05/16/2017-5-16-%E4%BB%8E%E5%AD%97%E5%85%B8%E4%B8%AD%E6%8F%90%E5%8F%96%E5%AD%90%E9%9B%86/"/>
      <url>/2017/05/16/2017-5-16-%E4%BB%8E%E5%AD%97%E5%85%B8%E4%B8%AD%E6%8F%90%E5%8F%96%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>给你一个条件，从已给字典中构造一个符合条件的新字典，为原字典的子集。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用字典推导式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prices = &#123;</span><br><span class="line">    <span class="string">'ACME'</span>: 45.23,</span><br><span class="line">    <span class="string">'AAPL'</span>: 612.78,</span><br><span class="line">    <span class="string">'IBM'</span>: 205.55,</span><br><span class="line">    <span class="string">'HPQ'</span>: 37.20,</span><br><span class="line">    <span class="string">'FB'</span>: 10.75</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Make a dictionary of all prices over 200</span></span><br><span class="line">p1 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> value &gt; 200&#125;</span><br><span class="line"><span class="comment"># Make a dictionary of tech stocks</span></span><br><span class="line">tech_names = &#123;<span class="string">'AAPL'</span>, <span class="string">'IBM'</span>, <span class="string">'HPQ'</span>, <span class="string">'MSFT'</span>&#125;</span><br><span class="line">p2 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> key <span class="keyword">in</span> tech_names&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需求：输出phone_bill中每月不为'0.00'的项目</span></span><br><span class="line"><span class="string">"phone_bill"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_zengzhifei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_qita"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"46.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.20"</span>,</span><br><span class="line">            <span class="string">"bill_daishoufei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_data"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_calls"</span> : <span class="string">"0.00"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_zengzhifei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_qita"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"46.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.60"</span>,</span><br><span class="line">            <span class="string">"bill_daishoufei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_data"</span> : <span class="string">"15.62"</span>,</span><br><span class="line">            <span class="string">"bill_ext_calls"</span> : <span class="string">"4.18"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_zengzhifei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_qita"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"56.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.30"</span>,</span><br><span class="line">            <span class="string">"bill_daishoufei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_data"</span> : <span class="string">"9.36"</span>,</span><br><span class="line">            <span class="string">"bill_ext_calls"</span> : <span class="string">"7.03"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_zengzhifei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_qita"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"46.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.30"</span>,</span><br><span class="line">            <span class="string">"bill_daishoufei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_data"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_calls"</span> : <span class="string">"0.00"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_zengzhifei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_qita"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"10.58"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_daishoufei"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_data"</span> : <span class="string">"0.00"</span>,</span><br><span class="line">            <span class="string">"bill_ext_calls"</span> : <span class="string">"0.00"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理逻辑</span></span><br><span class="line"><span class="keyword">for</span> cursor <span class="keyword">in</span> xrange(0,5):</span><br><span class="line">     phone_bill_tmp = &#123;key: value[:-1] <span class="keyword">for</span> key, value <span class="keyword">in</span> phone_bill[cursor].items() <span class="keyword">if</span> value not <span class="keyword">in</span> [<span class="string">''</span>,<span class="string">'0.00'</span>]&#125;</span><br><span class="line">     phone_bill.append(phone_bill_tmp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="string">"phone_bill"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"46.0"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"46.0"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.6"</span>,</span><br><span class="line">            <span class="string">"bill_ext_data"</span> : <span class="string">"15.6"</span>,</span><br><span class="line">            <span class="string">"bill_ext_calls"</span> : <span class="string">"4.1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"56.0"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.3"</span>,</span><br><span class="line">            <span class="string">"bill_ext_data"</span> : <span class="string">"9.3"</span>,</span><br><span class="line">            <span class="string">"bill_ext_calls"</span> : <span class="string">"7.0"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"46.0"</span>,</span><br><span class="line">            <span class="string">"bill_ext_sms"</span> : <span class="string">"0.3"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"bill_package"</span> : <span class="string">"10.5"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>大多数情况下字典推导能做到的，通过创建一个元组序列然后把它传给 dict() 函数也能实现。比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 = dict((key, value) <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> value &gt; 200)</span><br></pre></td></tr></table></figure></p><p>但是，字典推导方式表意更清晰，并且实际上也会运行的更快些 (在这个p1中，实际测试几乎比 dcit() 函数方式快整整一倍)。</p><p>有时候完成同一件事会有多种方式。比如，p2程序也可以像这样重写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Make a dictionary of tech stocks</span></span><br><span class="line">tech_names = &#123; <span class="string">'AAPL'</span>, <span class="string">'IBM'</span>, <span class="string">'HPQ'</span>, <span class="string">'MSFT'</span> &#125;</span><br><span class="line">p2 = &#123; key:prices[key] <span class="keyword">for</span> key <span class="keyword">in</span> prices.keys() &amp; tech_names &#125;</span><br></pre></td></tr></table></figure></p><p>但是，运行时间测试结果显示这种方案大概比第一种方案慢1.6倍。</p><p>所以，完成一个需求，方案并不是唯一的，也并没有最完美的，只有更好的解决方案，如果对程序运行性能要求比较高的话，这就需要花点时间去做计时测试了。</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 字典推导式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-15 pandas-入门</title>
      <link href="/2017/05/15/2017-5-15-pandas-%E5%85%A5%E9%97%A8/"/>
      <url>/2017/05/15/2017-5-15-pandas-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Series: 类似于一维数组的对象；索引（index）在左，数据（value）在右，索引自动创建</span><br><span class="line">DataFrame: 一种表格型数据结构；二维结构，每列可以存不同类型的值，索引包含行索引及列索引</span><br></pre></td></tr></table></figure><h3 id="创建Series"><a href="#创建Series" class="headerlink" title="创建Series"></a>创建Series</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">ser_obj = pd.Series(range(10, 20))</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="获取数据及索引"><a href="#获取数据及索引" class="headerlink" title="获取数据及索引"></a>获取数据及索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取索引</span></span><br><span class="line">ser_obj.index</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">ser_obj.values</span><br></pre></td></tr></table></figure><h3 id="通过索引获取数据"><a href="#通过索引获取数据" class="headerlink" title="通过索引获取数据"></a>通过索引获取数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ser_obj[0]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-5-15 数据分析 入门</title>
      <link href="/2017/05/15/2017-5-15-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%85%A5%E9%97%A8/"/>
      <url>/2017/05/15/2017-5-15-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="DIKW体系"><a href="#DIKW体系" class="headerlink" title="DIKW体系"></a>DIKW体系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D: Data 数据 原始素材</span><br><span class="line">I: Information 信息 加工处理后有逻辑的数据</span><br><span class="line">K: Knowledge 知识 提炼信息之间的联系，行动的能力，完成当下任务</span><br><span class="line">W: Wisdom 智慧 关心未来，具有预测的能力</span><br></pre></td></tr></table></figure><h2 id="数据工程"><a href="#数据工程" class="headerlink" title="数据工程"></a>数据工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据工程：一整套对数据（D）进行**采集**、处理、提取价值（变为I/K）的过程</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="职业划分"><a href="#职业划分" class="headerlink" title="职业划分"></a>职业划分</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Data Engineer 数据工程师 ：分析数据少不了需要运用计算机和各种工具自动化数据处理的过程， 包括数据格式转换， 储存， 更新， 查询。 数据工程师的工作就是开发工具完成自动化的过程， 属于 基础设施/工具（Infrastructure/Tools）层。但是这个角色出现的频率不多 ，因为有现成的MySQL, Oracle等数据库技术， 很多大公司只需要DBA就足够了。而 Hadoop, MongoDB 等 NoSQL 技术的开源， 更是使在大数据的场景下都没有太多 数据工程师 的事，一般都是交给 数据科学家 。</span><br><span class="line"></span><br><span class="line">Data Scientist 数据科学家 : 数据科学家是与数学相结合的中间角色， 需要用数学方法处理原始数据找出肉眼看不到的更高层数据， 一般是运用 统计机器学习（Statistical Machine Learning）或者 深度学习（Deep Learning）。有人称 Data Scientist 为 编程统计学家（Programming Statistician），因为他们需要有很好的统计学基础，但也需要参与程序的开发（基于 Infrastructure 之上），而现在很多很多的数据科学家 职位都要求身兼数据工程师。 数据科学家 是把 D 转为 I 或 K 的主力军。</span><br><span class="line"></span><br><span class="line">Data Analyst 数据分析师： 数据工程师和数据科学家做了大量的工作，用计算机程序尽可能多地提取了价值（I/K），然而真正要从数据中洞察出更高的价值， 则需要依靠丰富的行业经验和洞察力， 这些都需要人力的干预。Data Analyst 需要的是对所在业务有深刻了解， 能熟练运用手上的工具（无论是 Excel， SPSS也好， Python/R也好，工程师给你开发的工具也好，必要时还要能自己充当工程师和科学家，力尽所能得到自己需要的工具），有针对性地对数据作分析，并且需要把发现的成果向其他职能部门呈现出来，最终变为行动，这就是把数据最终得出 Wisdom。</span><br></pre></td></tr></table></figure><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据分析是指用适当的统计分析方法对收集来的大量数据进行分析，提取有用信息和形成结论而对数据加以详细研究和概括总结的过程。这一过程也是质量管理体系的支持过程。在实用中，数据分析可帮助人们作出判断，以便采取适当行动。</span><br></pre></td></tr></table></figure><h2 id="数据分析过程"><a href="#数据分析过程" class="headerlink" title="数据分析过程"></a>数据分析过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据采集：本地数据或者网络数据的采集与操作。</span><br><span class="line">数据处理：数据的规整，按照某种格式进行整合存储。</span><br><span class="line">数据分析：数据的科学计算，使用相关数据工具进行分析。</span><br><span class="line">数据展现：数据可视化，使用相关工具对分析出的数据进行展示。</span><br></pre></td></tr></table></figure><h2 id="数据分析工具"><a href="#数据分析工具" class="headerlink" title="数据分析工具"></a>数据分析工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SAS:SAS（STATISTICAL ANALYSIS SYSTEM，简称SAS）公司开发的统计分析软件，是一个功能强大的数据库整合平台。价格昂贵，银行或者大企业才买的起，做离线的分析或者模型用。</span><br><span class="line">SPSS: SPSS（Statistical Product and Service Solutions，统计产品与服务解决方案）是IBM公司推出的一系列用于统计学分析运算、数据挖掘、预测分析和决策支持任务的产品，迄今已有40余年的成长历史，价格昂贵。</span><br><span class="line">R/MATLAB: 适合做学术性质的数据分析，在实际应用上需要额外转换为Python或Scala来实现，而且MATLAB（MathWorks公司出品的商业数学软件）是收费的。</span><br><span class="line">Scala：是一门函数式编程语言，熟练使用后开发效率较高，配合Spark适合大规模的数据分析和处理，Scala的运行环境是JVM。</span><br><span class="line">Python：Python在数据工程领域和机器学习领域有很多成熟的框架和算法库，完全可以只用Python就可以构建以数据为中心的应用程序。在数据工程领域和机器学习领域，Python非常非常流行。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-05-07 Hexo 常用操作</title>
      <link href="/2017/05/07/2017-5-7-Hexo-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/05/07/2017-5-7-Hexo-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="cyg操作"><a href="#cyg操作" class="headerlink" title="cyg操作"></a>cyg操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /cygdrive/d <span class="comment">#切换到D盘</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Hexo-操作"><a href="#Hexo-操作" class="headerlink" title="Hexo 操作"></a>Hexo 操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo algolia  <span class="comment"># 更新search庫</span></span><br><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new post <span class="string">"title"</span>  <span class="comment"># 生成新文章：\source\_posts\title.md，可省略post</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo clean <span class="comment">#清除部署緩存</span></span><br><span class="line">hexo n == hexo new <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo s == hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo d -g <span class="comment">#生成加部署</span></span><br><span class="line">hexo s -g <span class="comment">#生成加预览</span></span><br></pre></td></tr></table></figure><p>*post、page等可以改成其他layout，可用layout在scaffolds目录下查看。在同目录下创建文件来添加自己的layout，也可以编辑现有的layout，比如post的layout默认是\scaffolds\post.md。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>每次部署的步骤，可按以下两步来进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 速查 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-4-5 you are my sunshine!</title>
      <link href="/2017/04/05/2017-4-5-you-are-my-sunshine/"/>
      <url>/2017/04/05/2017-4-5-you-are-my-sunshine/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<html>    <head><meta name="generator" content="Hexo 3.8.0">         <meta charset="UTF-8">         <title>404</title>    </head>    <body>         <script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" charset="utf-8" homepageurl="http://chihweihsu.com/" homepagename="回到悟の迹"></script>    </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/google1c4a19302d3916a2.html"/>
      <url>/google1c4a19302d3916a2.html</url>
      
        <content type="html"><![CDATA[google-site-verification: google1c4a19302d3916a2.html]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/About/index.html"/>
      <url>/About/index.html</url>
      
        <content type="html"><![CDATA[<!-- ![](http://ohhmsby4v.bkt.clouddn.com/image/2017-05-21_%E5%BB%BA%E7%AB%99%E6%97%A5%E5%BF%97_full_img1.jpg) --><p><img src="http://ohhmsby4v.bkt.clouddn.com/%E6%97%B6%E5%85%89-%E7%81%AB%E8%BD%A6-%E6%A4%85.jpg" alt=""><br><blockquote class="blockquote-center"><p>父母在，人生尚有來處；父母去，人生祗剩歸途。 </p></blockquote></p><hr>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
