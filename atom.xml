<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悟の迹</title>
  <subtitle>You are my sunshine!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chihweihsu.com/"/>
  <updated>2017-09-17T06:46:23.368Z</updated>
  <id>http://chihweihsu.com/</id>
  
  <author>
    <name>Chihwei·Hsu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-9-14 通过__slots__节省内存</title>
    <link href="http://chihweihsu.com/2017/09/14/2017-9-14-%E9%80%9A%E8%BF%87-slots-%E8%8A%82%E7%9C%81%E5%86%85%E5%AD%98/"/>
    <id>http://chihweihsu.com/2017/09/14/2017-9-14-通过-slots-节省内存/</id>
    <published>2017-09-14T07:01:38.000Z</published>
    <updated>2017-09-17T06:46:23.368Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.datadependence.com/2016/07/pythonic-code-video-series-slots/" target="_blank" rel="external">见原文</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Measurement</span>:</span></div><div class="line">    __slots__ = [<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'val'</span>]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y, value)</span>:</span></div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line">        self.val = value</div></pre></td></tr></table></figure></p>
<blockquote>
<p>merge dict </p>
</blockquote>
<p><a href="http://www.datadependence.com/2016/08/pythonic-code-video-series-merging-dictionaries/" target="_blank" rel="external">merged_dict</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dict_merged = &#123;**a, **b, **c&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.datadependence.com/2016/07/pythonic-code-video-series-slots/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;见原文&lt;/a&gt;&lt;br&gt;&lt;figure class
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="内存" scheme="http://chihweihsu.com/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="slots" scheme="http://chihweihsu.com/tags/slots/"/>
    
  </entry>
  
  <entry>
    <title>2017-9-12 str() vs json.dumps()</title>
    <link href="http://chihweihsu.com/2017/09/12/2017-9-12-str-vs-json-dumps/"/>
    <id>http://chihweihsu.com/2017/09/12/2017-9-12-str-vs-json-dumps/</id>
    <published>2017-09-12T01:39:13.000Z</published>
    <updated>2017-09-17T06:46:23.368Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'jsonKey'</span>: <span class="string">'jsonValue'</span>,<span class="string">"title"</span>: <span class="string">"hello world"</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> json.dumps(data)</div><div class="line"></div><div class="line">&#123;<span class="string">"jsonKey"</span>: <span class="string">"jsonValue"</span>, <span class="string">"title"</span>: <span class="string">"hello world"</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> str(data)</div><div class="line"></div><div class="line">&#123;<span class="string">'jsonKey'</span>: <span class="string">'jsonValue'</span>, <span class="string">'title'</span>: <span class="string">'hello world'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(data)</div><div class="line"></div><div class="line"><span class="string">'&#123;"jsonKey": "jsonValue", "title": "hello world"&#125;'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(data)</div><div class="line"></div><div class="line"><span class="string">"&#123;'jsonKey': 'jsonValue', 'title': 'hello world'&#125;"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>In fact, I am more interested in their difference in single quote and double quote in output strings. It seems that I already know one difference between them (mentioned above) and whether json.loads() can load the output string. </p>
<p>json.dumps() is much more than just making a string out of a Python object, it would always produce a valid JSON string (assuming everything inside the object is serializable) following the Type Conversion Table.</p>
<p>For instance, if one of the values is None, the str() would produce an invalid JSON which cannot be loaded:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'jsonKey'</span>: <span class="keyword">None</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(data)</div><div class="line"><span class="string">"&#123;'jsonKey': None&#125;"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(str(data))</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py"</span>, line <span class="number">338</span>, <span class="keyword">in</span> loads</div><div class="line">    <span class="keyword">return</span> _default_decoder.decode(s)</div><div class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py"</span>, line <span class="number">366</span>, <span class="keyword">in</span> decode</div><div class="line">    obj, end = self.raw_decode(s, idx=_w(s, <span class="number">0</span>).end())</div><div class="line">  File <span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/decoder.py"</span>, line <span class="number">382</span>, <span class="keyword">in</span> raw_decode</div><div class="line">    obj, end = self.scan_once(s, idx)</div><div class="line">ValueError: Expecting property name: line <span class="number">1</span> column <span class="number">2</span> (char <span class="number">1</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>But the dumps() would convert None into null making a valid JSON string that can be loaded:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'jsonKey'</span>: <span class="keyword">None</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(data)</div><div class="line"><span class="string">'&#123;"jsonKey": null&#125;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(json.dumps(data))</div><div class="line">&#123;<span class="string">u'jsonKey'</span>: <span class="keyword">None</span>&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>In fact in (I believe most) implementations of Python, str(object) wraps strings in single quotes, which is not valid JSON.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">An example:</div><div class="line"></div><div class="line">In [<span class="number">17</span>]: <span class="keyword">print</span> str(&#123;<span class="string">"a"</span>: <span class="number">1</span>&#125;)</div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</div><div class="line">str(boolean) <span class="keyword">is</span> also <span class="keyword">not</span> valid JSON:</div><div class="line"></div><div class="line">In [<span class="number">18</span>]: <span class="keyword">print</span> str(<span class="keyword">True</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line">__str__, can, however, be overridden <span class="keyword">in</span> user defined classes to ensure that objects <span class="keyword">return</span> JSON representations of themselves.</div></pre></td></tr></table></figure>
<blockquote>
<p>字典转字符串（dict to str）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># If your dictionary isn't too big maybe str + eval can do the work:</span></div><div class="line">dict1 = &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>, <span class="string">'three'</span>: &#123;<span class="string">'three.1'</span>: <span class="number">3.1</span>, <span class="string">'three.2'</span>: <span class="number">3.2</span> &#125;&#125;</div><div class="line">str1 = str(dict1)</div><div class="line"></div><div class="line">dict2 = eval(str1)</div><div class="line"></div><div class="line"><span class="keyword">print</span> dict1==dict2</div><div class="line"><span class="comment"># You can use ast.literal_eval instead of eval for additional security if the source is untrusted.</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment"># convert to string</span></div><div class="line">input = json.dumps(&#123;<span class="string">'id'</span>: id &#125;)</div><div class="line"></div><div class="line"><span class="comment"># load to dict</span></div><div class="line">my_dict = json.loads(input)</div></pre></td></tr></table></figure></p>
<p>字符串转字典（str to dict）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># str to dict</span></div><div class="line">In [<span class="number">33</span>]: <span class="keyword">import</span> ast</div><div class="line">In [<span class="number">34</span>]: ast.literal_eval(<span class="string">"&#123;'x':1, 'y':2&#125;"</span>)</div><div class="line">Out[<span class="number">34</span>]: &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure></p>
<p>转换已转义的字符串转字典（str to dict）</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = '&#123;\\"name\\":\\"michael\\"&#125;'</div><div class="line">&gt;&gt;&gt; print a</div><div class="line">&#123;\"name\":\"michael\"&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt; type(json.loads('“' + a + '”'))</div><div class="line">&lt;type 'unicode'&gt;</div><div class="line">&gt;&gt;&gt; type(json.loads(json.loads('“' + a + '”')))</div><div class="line">&lt;type 'dict'&gt;</div><div class="line"># 第一次json.loads是将里面的\"这样的字符串转为"(只有一个双引号)，第二次再将其转为一个字典，记得不要漏掉前面先加双引号。</div></pre></td></tr></table></figure>
<blockquote>
<p><code>pymongo</code> 根据ObjectId进行查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</div><div class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> dbm.neo_nodes.find(&#123;<span class="string">"_id"</span>: ObjectId(obj_id_to_find)&#125;)]</div></pre></td></tr></table></figure></p>
<p>float nan</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x=float(<span class="string">'nan'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>math.isnan(x)</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># The usual way to test for a NaN is to see if it's equal to itself, since nan isn't equal anything.</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isNaN</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="keyword">return</span> num != num</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="string" scheme="http://chihweihsu.com/tags/string/"/>
    
      <category term="json" scheme="http://chihweihsu.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>2017-9-7 机器学习分类</title>
    <link href="http://chihweihsu.com/2017/09/07/2017-9-7-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB/"/>
    <id>http://chihweihsu.com/2017/09/07/2017-9-7-机器学习分类/</id>
    <published>2017-09-07T00:19:51.000Z</published>
    <updated>2017-09-17T06:46:23.369Z</updated>
    
    <content type="html"><![CDATA[<h4 id="机器学习："><a href="#机器学习：" class="headerlink" title="机器学习："></a>机器学习：</h4><blockquote>
<ul>
<li>线性回归<ul>
<li>岭回归</li>
<li>LASSO</li>
<li>弹性网络</li>
</ul>
</li>
<li>逻辑回归<ul>
<li>Softmax 回归</li>
</ul>
</li>
<li>决策树<ul>
<li>ID3</li>
<li>C4.5</li>
<li>CART</li>
</ul>
</li>
<li>神经网络<ul>
<li>普通网络</li>
<li>CNN</li>
<li>RNN</li>
<li>GAN</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="架构总览："><a href="#架构总览：" class="headerlink" title="架构总览："></a>架构总览：</h4><blockquote>
<p>数据仓库</p>
<ul>
<li>SparkStreaming<ul>
<li>tensorflow</li>
<li>scikit-learn<br>模型库</li>
</ul>
</li>
<li>django<ul>
<li>xgboost</li>
<li>SparkMLLib<br>特征库</li>
</ul>
</li>
<li>redis<ul>
<li>numpy</li>
<li>pandas</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;机器学习：&quot;&gt;&lt;a href=&quot;#机器学习：&quot; class=&quot;headerlink&quot; title=&quot;机器学习：&quot;&gt;&lt;/a&gt;机器学习：&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;线性回归&lt;ul&gt;
&lt;li&gt;岭回归&lt;/li&gt;
&lt;li&gt;LASSO&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="机器学习" scheme="http://chihweihsu.com/categories/Notes/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="机器学习" scheme="http://chihweihsu.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2017-9-7 机器学习路线</title>
    <link href="http://chihweihsu.com/2017/09/07/2017-9-7-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://chihweihsu.com/2017/09/07/2017-9-7-机器学习路线/</id>
    <published>2017-09-06T23:21:28.000Z</published>
    <updated>2017-09-17T06:46:23.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备知识："><a href="#准备知识：" class="headerlink" title="准备知识："></a>准备知识：</h3><blockquote>
<p>编程语言：Python，C++，Spark（大数据环境下）；<br>知识储备：英语、线性代数、概率论、图论、神经科学。</p>
</blockquote>
<h4 id="第一步-统领大局："><a href="#第一步-统领大局：" class="headerlink" title="第一步 统领大局："></a>第一步 统领大局：</h4><blockquote>
<p>建立大局观，是入门第一要务； 从宏观了解机器学习的全貌；<br>机器学习：根据已有特征，选择模型，训练模型，预测未知数据；<br>推荐书籍：<br>-《图解机器学习》：通俗易懂，算法图解，入门必备；<br>-《集体智慧编程》：代码实现，一个字“敲”；<br>-《机器学习（周志华西瓜书）》：系统严谨，数学推导；</p>
</blockquote>
<h4 id="第二步-了解算法："><a href="#第二步-了解算法：" class="headerlink" title="第二步 了解算法："></a>第二步 了解算法：</h4><blockquote>
<p>看遍所有算法原理，主要书籍：《机器学习（周志华）》；<br><code>coursera</code> 上Andrew NG的机器学习公开课，网易云也开了；<br>邹博的《机器学习实战》；<br>李沐《一起动手学习深度学习》；<br>必学：线性回归，Logistics回归，决策树。</p>
</blockquote>
<h4 id="第三步-利用框架："><a href="#第三步-利用框架：" class="headerlink" title="第三步 利用框架："></a>第三步 利用框架：</h4><blockquote>
<p>利用<code>scikit-learn</code>实现所学的算法（推荐鸢尾花分类、MNIST分类）</p>
</blockquote>
<h4 id="第四步-神经网络："><a href="#第四步-神经网络：" class="headerlink" title="第四步 神经网络："></a>第四步 神经网络：</h4><blockquote>
<p>看懂<code>Tensorflow</code>官网demo：RNN、CNN、GAN；<br>莫凡<code>Tensorflow</code>；</p>
</blockquote>
<h4 id="第五步-实操演练："><a href="#第五步-实操演练：" class="headerlink" title="第五步 实操演练："></a>第五步 实操演练：</h4><blockquote>
<p>注册<code>kangle</code>，奋斗吧！<br>上线一个小模型（django+scikit-learn）</p>
</blockquote>
<h4 id="第六步-关注落地："><a href="#第六步-关注落地：" class="headerlink" title="第六步 关注落地："></a>第六步 关注落地：</h4><blockquote>
<p>机器学习MVP开发；<br>针对小规模，有质量、已标注的数据进行训练；<br>明确需求、特征量化、目标量化、特征清洗、模型选型、模型训练、线下验证、模型上线、特征清洗、模型预测、结果应用、运行监控；</p>
<p>实例一：客户动用率预测：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">明确需求：与业务同事讨论本次需求的目标是什么，这里说的就是动用率预测；</div><div class="line">特征量化：选出可能有影响的特征，如：年龄，性别，近三个月是否动用等；</div><div class="line">目标量化：选择是否动用为目标；</div><div class="line">特征清洗：样本筛选，缺失值补全，利用先验知识去掉明显不符合常理的数据；</div><div class="line">模型选择：直接丢个逻辑回归试试看；</div><div class="line">模型训练：看训练集和测试集，讨论出一个精准度即可；</div><div class="line">模型上线：丢上线去跑跑看，看看结果，暂时不接入关键流程即可。</div></pre></td></tr></table></figure></p>
<p>实例二：客户逾期率预测：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">明确需求：与业务同事讨论本次需求的目标是什么，这里说的就是逾期率预测；</div><div class="line">特征量化：选出可能有影响的特征，如：年龄，性别，近三个月是否逾期等；</div><div class="line">目标量化：选择客户是否逾期作为目标；</div><div class="line">特征清洗：样本筛选，缺失值补全，利用先验知识去掉明显不符合常理的数据；</div><div class="line">模型选择：直接丢个softmax回归试试看；</div><div class="line">模型训练：看训练集和测试集，讨论出一个精准度即可；</div><div class="line">模型上线：丢上线去跑跑看，看看结果，暂时不接入关键流程即可。</div></pre></td></tr></table></figure></p>
<p>实例三：客户风险级别预测：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">明确需求：与业务同事讨论本次需求的目标是什么，这里说的就是风险级别预测；</div><div class="line">特征量化：选出可能有影响的特征，如：年龄，性别，近三个月是否逾期等；</div><div class="line">目标量化：选择预期风险等级作为目标；</div><div class="line">特征清洗：样本筛选，缺失值补全，利用先验知识去掉明显不符合常理的数据；</div><div class="line">模型选择：直接丢个决策树试试看；</div><div class="line">模型训练：看训练集和测试集，讨论出一个精准度即可；</div><div class="line">模型上线：丢上线去跑跑看，看看结果，暂时不接入关键流程即可。</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="第七步-补充数学："><a href="#第七步-补充数学：" class="headerlink" title="第七步 补充数学："></a>第七步 补充数学：</h4><blockquote>
<p>《概率论与数理统计》陈希孺<br>《线性代数应该这样学》</p>
</blockquote>
<h4 id="第八步-特征工程："><a href="#第八步-特征工程：" class="headerlink" title="第八步 特征工程："></a>第八步 特征工程：</h4><blockquote>
<p>好的特征决是成功的一半；<br>特征选择，特征清洗，决定模型的上限，算法和优化只是不断趋近这个上限；<br>特征工程非常重要。</p>
</blockquote>
<h4 id="第九步-深入前沿："><a href="#第九步-深入前沿：" class="headerlink" title="第九步 深入前沿："></a>第九步 深入前沿：</h4><blockquote>
<p>深入了解前沿的底层原理<br>阅读实践优秀论文，如：MapReduce原理的，李沐Parameter原理的，GAN原理的，LPA原理的……</p>
</blockquote>
<h4 id="书单："><a href="#书单：" class="headerlink" title="书单："></a>书单：</h4><blockquote>
<p>《深入浅出统计学》<br>《深入浅出数据分析》<br>《大数据智能》<br>《深度学习》<br>《优雅的理性》<br>《创新者的窘境》<br>《数学之美》</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;准备知识：&quot;&gt;&lt;a href=&quot;#准备知识：&quot; class=&quot;headerlink&quot; title=&quot;准备知识：&quot;&gt;&lt;/a&gt;准备知识：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;编程语言：Python，C++，Spark（大数据环境下）；&lt;br&gt;知识储备：英语、线性代
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="机器学习" scheme="http://chihweihsu.com/categories/Notes/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="机器学习" scheme="http://chihweihsu.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="路线" scheme="http://chihweihsu.com/tags/%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>2017-9-5 计算体脂率</title>
    <link href="http://chihweihsu.com/2017/09/05/2017-9-5-%E8%AE%A1%E7%AE%97%E4%BD%93%E8%84%82%E7%8E%87/"/>
    <id>http://chihweihsu.com/2017/09/05/2017-9-5-计算体脂率/</id>
    <published>2017-09-05T09:12:11.000Z</published>
    <updated>2017-09-17T06:46:23.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote>
<p>用来计算一个人的体脂率<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_BFR</span><span class="params">(weight, height, age, gender)</span>:</span></div><div class="line">	<span class="string">"""计算BMI及体脂率</span></div><div class="line">	:param weight: 体重（kg）</div><div class="line">	:param height: 身高（m）</div><div class="line">	:param age: 年龄（岁）</div><div class="line">	:param gender: 性别（男--1，女--0）</div><div class="line">	:returns: 体脂率，float</div><div class="line">	"""</div><div class="line">	<span class="comment"># BMI</span></div><div class="line">	BMI = weight /(height*height)</div><div class="line">	<span class="comment"># 体脂率 </span></div><div class="line">	BFR = <span class="number">1.2</span>*BMI + <span class="number">0.23</span>*age - <span class="number">5.4</span> - <span class="number">10.8</span>*gender</div><div class="line">	<span class="keyword">return</span> BFR</div><div class="line"></div><div class="line">get_BFR(<span class="number">55</span>, <span class="number">1.7</span>, <span class="number">26</span>, <span class="number">1</span>)</div><div class="line"><span class="comment"># 12.61737024221453</span></div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;情景描述：&quot;&gt;&lt;a href=&quot;#情景描述：&quot; class=&quot;headerlink&quot; title=&quot;情景描述：&quot;&gt;&lt;/a&gt;情景描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用来计算一个人的体脂率&lt;br&gt;&lt;figure class=&quot;highlight pytho
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="life" scheme="http://chihweihsu.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>2017-9-5 python  list 排序 sort、sorted</title>
    <link href="http://chihweihsu.com/2017/09/05/2017-9-5-python-list-%E6%8E%92%E5%BA%8F-sort%E3%80%81sorted/"/>
    <id>http://chihweihsu.com/2017/09/05/2017-9-5-python-list-排序-sort、sorted/</id>
    <published>2017-09-05T07:17:50.000Z</published>
    <updated>2017-09-17T06:46:23.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote>
<p>项目中，有一个list，list内部组成元素为dict，现需要根据dict中某个键的值来进行排序。</p>
</blockquote>
<a id="more"></a>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><blockquote>
<p> <code>reverse</code>: False–默认，正序；True–逆序，由大到小；<br> <code>key</code>: 可以根据<code>key</code>值自定义排序；<br> <code>sort</code>与<code>sorted</code>区别: <code>sort</code>list自身发生改变；<code>sorted</code>list本身不发生改变。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">6</span>]        </div><div class="line"> </div><div class="line"> <span class="comment"># sorted 用法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a)                  <span class="comment">#将a从小到大排序,不影响a本身结构 </span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(a,reverse = <span class="keyword">True</span>)   <span class="comment">#将a从大到小排序,不影响a本身结构 </span></div><div class="line">[<span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>] </div><div class="line"> </div><div class="line"> <span class="comment"># sort 用法</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()                   <span class="comment">#将a从小到大排序,影响a本身结构 </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a </div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort(reverse = <span class="keyword">True</span>)     <span class="comment">#将a从大到小排序,影响a本身结构 </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a </div><div class="line">[<span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>] </div><div class="line"> </div><div class="line"><span class="comment"># 注意，a.sort() 已改变其结构，b = a.sort() 是错误的写法! </span></div><div class="line"></div><div class="line"><span class="comment"># 非数字排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">'aa'</span>,<span class="string">'BB'</span>,<span class="string">'bb'</span>,<span class="string">'zz'</span>,<span class="string">'CC'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(b) </div><div class="line">[<span class="string">'BB'</span>, <span class="string">'CC'</span>, <span class="string">'aa'</span>, <span class="string">'bb'</span>, <span class="string">'zz'</span>]    <span class="comment">#按列表中元素每个字母的ascii码从小到大排序,如果要从大到小,请用sorted(b,reverse=True)下同 </span></div><div class="line"> </div><div class="line"> <span class="comment"># 根据key值自定义排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c =[<span class="string">'CCC'</span>, <span class="string">'bb'</span>, <span class="string">'ffff'</span>, <span class="string">'z'</span>]  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(c,key=len)             <span class="comment">#按列表的元素的长度排序 </span></div><div class="line">[<span class="string">'z'</span>, <span class="string">'bb'</span>, <span class="string">'CCC'</span>, <span class="string">'ffff'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d =[<span class="string">'CCC'</span>, <span class="string">'bb'</span>, <span class="string">'ffff'</span>, <span class="string">'z'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(d,key = str.lower )    <span class="comment">#将列表中的每个元素变为小写，再按每个元素中的每个字母的ascii码从小到大排序 </span></div><div class="line">[<span class="string">'bb'</span>, <span class="string">'CCC'</span>, <span class="string">'ffff'</span>, <span class="string">'z'</span>] </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">lastchar</span><span class="params">(s)</span>:</span> </div><div class="line">       <span class="keyword">return</span> s[<span class="number">-1</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>e = [<span class="string">'abc'</span>,<span class="string">'b'</span>,<span class="string">'AAz'</span>,<span class="string">'ef'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(e,key = lastchar)      <span class="comment">#自定义函数排序,lastchar为函数名，这个函数返回列表e中每个元素的最后一个字母 </span></div><div class="line">[<span class="string">'b'</span>, <span class="string">'abc'</span>, <span class="string">'ef'</span>, <span class="string">'AAz'</span>]         <span class="comment">#sorted(e,key=lastchar)作用就是 按列表e中每个元素的最后一个字母的ascii码从小到大排序 </span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = [&#123;<span class="string">'name'</span>:<span class="string">'abc'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'def'</span>,<span class="string">'age'</span>:<span class="number">30</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'ghi'</span>,<span class="string">'age'</span>:<span class="number">25</span>&#125;]     <span class="comment">#列表中的元素为字典 </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(s)</span>:</span> </div><div class="line">       <span class="keyword">return</span> s[<span class="string">'age'</span>] </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ff = sorted(f,key = age)      <span class="comment">#自定义函数按列表f中字典的age从小到大排序  </span></div><div class="line">[&#123;<span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'name'</span>: <span class="string">'abc'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">25</span>, <span class="string">'name'</span>: <span class="string">'ghi'</span>&#125;, &#123;<span class="string">'age'</span>: <span class="number">30</span>, <span class="string">'name'</span>: <span class="string">'def'</span>&#125;] </div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = sorted(f,key = <span class="keyword">lambda</span> x:x[<span class="string">'age'</span>])    <span class="comment">#如果觉得上面定义一个函数代码不美观，可以用lambda的形式来定义函数,效果[&#123;'age': 20, 'name': 'abc'&#125;, &#123;'age': 25, 'name': 'ghi'&#125;, &#123;'age': 30, 'name': 'def'&#125;]</span></div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;情景描述：&quot;&gt;&lt;a href=&quot;#情景描述：&quot; class=&quot;headerlink&quot; title=&quot;情景描述：&quot;&gt;&lt;/a&gt;情景描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;项目中，有一个list，list内部组成元素为dict，现需要根据dict中某个键的值来进行排序。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="list" scheme="http://chihweihsu.com/tags/list/"/>
    
      <category term="sort" scheme="http://chihweihsu.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-31 自动 生成注释文档（docstring）</title>
    <link href="http://chihweihsu.com/2017/08/31/2017-8-31-python-%E8%87%AA%E5%8A%A8-%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E6%96%87%E6%A1%A3%EF%BC%88docstring%EF%BC%89/"/>
    <id>http://chihweihsu.com/2017/08/31/2017-8-31-python-自动-生成注释文档（docstring）/</id>
    <published>2017-08-31T12:22:52.000Z</published>
    <updated>2017-09-17T06:46:23.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote>
<p>项目中，发现很多函数、类没有注释说明，一个个弄比较繁琐，所以……</p>
</blockquote>
<a id="more"></a>
<h3 id="docstring定义："><a href="#docstring定义：" class="headerlink" title="docstring定义："></a><code>docstring</code>定义：</h3><blockquote>
<p>官方：A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition. Such a docstring becomes the <strong>doc</strong> special attribute of that object；<br>人话：“出现在模块、函数、类、方法里的第一个语句，就叫做<code>docsting</code>”；<br>调用：使用<code>__doc__</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">  <span class="string">""" This is function foo"""</span></div><div class="line"></div><div class="line">foo.__doc__</div><div class="line"><span class="comment">#  This is function foo</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="docstring风格："><a href="#docstring风格：" class="headerlink" title="docstring风格："></a><code>docstring</code>风格：</h3><blockquote>
<p>主要四种：<code>javadoc</code>(<code>Epytext</code>), <code>reST</code>, <code>numpydoc</code>, <code>google</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Epytext</span></div><div class="line"><span class="string">"""</span></div><div class="line">This is a javadoc style.</div><div class="line"> </div><div class="line">@param param1: this is a first param</div><div class="line">@param param2: this is a second param</div><div class="line">@return: this is a description of what is returned</div><div class="line">@raise keyError: raises an exception</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="comment"># reST（推荐，reST风格，Sphinx的御用格式）</span></div><div class="line"><span class="string">"""</span></div><div class="line">This is a reST style.</div><div class="line"> </div><div class="line">:param param1: this is a first param</div><div class="line">:param param2: this is a second param</div><div class="line">:returns: this is a description of what is returned</div><div class="line">:raises keyError: raises an exception</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="comment"># Google</span></div><div class="line"><span class="string">"""</span></div><div class="line">This is a groups style docs.</div><div class="line"> </div><div class="line">Parameters:</div><div class="line">  param1 - this is the first param</div><div class="line">  param2 - this is a second param</div><div class="line"> </div><div class="line">Returns:</div><div class="line">  This is a description of what is returned</div><div class="line"> </div><div class="line">Raises:</div><div class="line">  KeyError - raises an exception</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="comment"># Numpydoc (Numpy风格)</span></div><div class="line"><span class="string">"""</span></div><div class="line">My numpydoc description of a kind</div><div class="line">of very exhautive numpydoc format docstring.</div><div class="line"> </div><div class="line">Parameters</div><div class="line">----------</div><div class="line">first : array_like</div><div class="line">  the 1st param name `first`</div><div class="line">second :</div><div class="line">  the 2nd param</div><div class="line">third : &#123;'value', 'other'&#125;, optional</div><div class="line">  the 3rd param, by default 'value'</div><div class="line"> </div><div class="line">Returns</div><div class="line">-------</div><div class="line">string</div><div class="line">  a value in a string</div><div class="line"> </div><div class="line">Raises</div><div class="line">------</div><div class="line">KeyError</div><div class="line">  when a key error</div><div class="line">OtherError</div><div class="line">  when an other error</div><div class="line">"""</div></pre></td></tr></table></figure>
<h3 id="转换工具pyment"><a href="#转换工具pyment" class="headerlink" title="转换工具pyment"></a>转换工具<a href="https://github.com/dadadel/pyment" target="_blank" rel="external"><code>pyment</code></a></h3><blockquote>
<p>用来创建、转换<code>docsting</code>，<a href="https://github.com/dadadel/pyment" target="_blank" rel="external">点击查看安装</a><br>centos中可能使用不了<code>patch</code>，<a href="http://centos-packages.com/7/package/patch/" target="_blank" rel="external">点击下载安装包</a><br><code>pyment</code>命令帮助：<code>pyment -h</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装pyment</span></div><div class="line">$ git clone https://github.com/dadadel/pyment.git  <span class="comment"># or git@github.com:dadadel/pyment.git</span></div><div class="line">$ cd pyment</div><div class="line">$ python setup.py install</div><div class="line"></div><div class="line"><span class="comment"># 安装patch</span></div><div class="line"><span class="comment"># 下载安装包：http://centos-packages.com/7/package/patch/</span></div><div class="line">rpm -i patch<span class="number">-2.7</span><span class="number">.1</span><span class="number">-8.</span>el7.x86_64.rpm</div><div class="line"></div><div class="line"><span class="comment"># 使用方法</span></div><div class="line">$ pyment test.py      <span class="comment">#生成patch</span></div><div class="line">$ patch -p1 &lt; test.py.patch <span class="comment">#打patch</span></div></pre></td></tr></table></figure>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><blockquote>
<p>注释前<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># test.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(param1=True, param2=<span class="string">'default val'</span>)</span>:</span></div><div class="line">    <span class="string">'''Description of func with docstring groups style.</span></div><div class="line"></div><div class="line">    Params:</div><div class="line">        param1 - descr of param1 that has True for default value.</div><div class="line">        param2 - descr of param2</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        some value</div><div class="line"></div><div class="line">    Raises:</div><div class="line">        keyError: raises key exception</div><div class="line">        TypeError: raises type exception</div><div class="line"></div><div class="line">    '''</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, param1, param2=None)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>执行<code>pyment test.py</code>，得到<code>patch</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># Patch generated by Pyment v0.2.0</div><div class="line"></div><div class="line">--- a/test.py</div><div class="line">+++ b/test.py</div><div class="line">@@ -1,20 +1,22 @@</div><div class="line"> def func(param1=True, param2=&apos;default val&apos;):</div><div class="line">-    &apos;&apos;&apos;Description of func with docstring groups style.</div><div class="line">+    &quot;&quot;&quot;Description of func with docstring groups style.</div><div class="line"></div><div class="line">-    Params:</div><div class="line">-        param1 - descr of param1 that has True for default value.</div><div class="line">-        param2 - descr of param2</div><div class="line">+    :param param1: descr of param1 that has True for default value</div><div class="line">+    :param param2: descr of param2 (Default value = &apos;default val&apos;)</div><div class="line">+    :returns: some value</div><div class="line">+    :raises keyError: raises key exception</div><div class="line">+    :raises TypeError: raises type exception</div><div class="line"></div><div class="line">-    Returns:</div><div class="line">-        some value</div><div class="line">-</div><div class="line">-    Raises:</div><div class="line">-        keyError: raises key exception</div><div class="line">-        TypeError: raises type exception</div><div class="line">-</div><div class="line">-    &apos;&apos;&apos;</div><div class="line">+    &quot;&quot;&quot;</div><div class="line">     pass</div><div class="line"></div><div class="line"> class A:</div><div class="line">+    &quot;&quot;&quot; &quot;&quot;&quot;</div><div class="line">     def method(self, param1, param2=None):</div><div class="line">+        &quot;&quot;&quot;</div><div class="line">+</div><div class="line">+        :param param1:</div><div class="line">+        :param param2:  (Default value = None)</div><div class="line">+</div><div class="line">+        &quot;&quot;&quot;</div><div class="line">         pass</div></pre></td></tr></table></figure></p>
<p>执行<code>patch -p1 &lt; test.py.patch</code>，注释后得到</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(param1=True, param2=<span class="string">'default val'</span>)</span>:</span></div><div class="line">    <span class="string">"""Description of func with docstring groups style.</span></div><div class="line"></div><div class="line">    :param param1: descr of param1 that has True for default value</div><div class="line">    :param param2: descr of param2 (Default value = 'default val')</div><div class="line">    :returns: some value</div><div class="line">    :raises keyError: raises key exception</div><div class="line">    :raises TypeError: raises type exception</div><div class="line"></div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="string">""" """</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self, param1, param2=None)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"></div><div class="line">        :param param1:</div><div class="line">        :param param2:  (Default value = None)</div><div class="line"></div><div class="line">        """</div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><blockquote>
<p>使用<code>sphinx</code>的<code>autodoc</code>自动从<code>docstring</code>生产api文档, 避免重复工作，再娄一遍Api文档。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;情景描述：&quot;&gt;&lt;a href=&quot;#情景描述：&quot; class=&quot;headerlink&quot; title=&quot;情景描述：&quot;&gt;&lt;/a&gt;情景描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;项目中，发现很多函数、类没有注释说明，一个个弄比较繁琐，所以……&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="Linux" scheme="http://chihweihsu.com/tags/Linux/"/>
    
      <category term="Docstring" scheme="http://chihweihsu.com/tags/Docstring/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-31 python  two sum 问题</title>
    <link href="http://chihweihsu.com/2017/08/31/2017-8-31-python-two-sum-%E9%97%AE%E9%A2%98/"/>
    <id>http://chihweihsu.com/2017/08/31/2017-8-31-python-two-sum-问题/</id>
    <published>2017-08-31T09:02:59.000Z</published>
    <updated>2017-09-17T06:46:23.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><blockquote>
<p>来自<code>LeetCode</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># Time:  O(n)</div><div class="line"># Space: O(n)</div><div class="line"></div><div class="line"># Given an array of integers, return indices of the two numbers</div><div class="line"># such that they add up to a specific target.</div><div class="line">#</div><div class="line"># You may assume that each input would have exactly one solution.</div><div class="line">#</div><div class="line"># Example:</div><div class="line"># Given nums = [2, 7, 11, 15], target = 9,</div><div class="line">#</div><div class="line"># Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line"># return [0, 1].</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Python-解法："><a href="#Python-解法：" class="headerlink" title="Python 解法："></a>Python 解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        lookup = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">            <span class="keyword">if</span> target - num <span class="keyword">in</span> lookup:</div><div class="line">                <span class="keyword">return</span> [lookup[target - num], i]</div><div class="line">            lookup[num] = i</div><div class="line">        <span class="keyword">return</span> []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum2</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        k = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">            j = target - i</div><div class="line">            k += <span class="number">1</span></div><div class="line">            tmp_nums = nums[k:]</div><div class="line">            <span class="keyword">if</span> j <span class="keyword">in</span> tmp_nums:</div><div class="line">                <span class="keyword">return</span> [k - <span class="number">1</span>, tmp_nums.index(j) + k]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">print</span> Solution().twoSum((<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>), <span class="number">9</span>)</div><div class="line">	</div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="comment"># med = a[int(len(a)/2)]</span></div><div class="line">    c=[<span class="number">-1</span>, <span class="number">-1</span>]</div><div class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(a):</div><div class="line">        <span class="keyword">for</span> j,k <span class="keyword">in</span> enumerate(a[i+<span class="number">1</span>:]):</div><div class="line">            c = [i, i+j+<span class="number">1</span>] <span class="keyword">if</span> v+k==b <span class="keyword">else</span> c</div><div class="line">    <span class="keyword">return</span> c</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main2</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    dict 存放查值</div><div class="line">    """</div><div class="line">    c = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">        <span class="keyword">if</span> b - a[i] <span class="keyword">in</span> c:</div><div class="line">            <span class="keyword">return</span> [c[b-a[i]], i]</div><div class="line">        c[a[i]] = i</div><div class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_number</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    dict 存放差值</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> len(a) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    c = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">        <span class="keyword">if</span> a[i] <span class="keyword">in</span> c:</div><div class="line">            <span class="keyword">return</span> [c[a[i]], i]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            c[b - a[i]] = i</div><div class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main3</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">        <span class="keyword">if</span> (b - a[len(a)-i<span class="number">-1</span>]) <span class="keyword">in</span> a[:len(a)-i<span class="number">-1</span>]:</div><div class="line">            <span class="keyword">return</span> [a.index((b - a[len(a)-i<span class="number">-1</span>])),len(a)-i<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main4</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># print [[a.index((b - a[len(a)-i-1])),len(a)-i-1] for i in range(len(a)) if (b - a[len(a)-i-1]) in a[:len(a)-i-1]]</span></div><div class="line">        <span class="keyword">return</span> [[a.index((b - a[len(a)-i<span class="number">-1</span>])),len(a)-i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)) <span class="keyword">if</span> (b - a[len(a)-i<span class="number">-1</span>]) <span class="keyword">in</span> a[:len(a)-i<span class="number">-1</span>]][<span class="number">0</span>]</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main5</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> [[a.index((b - a[len(a)-i<span class="number">-1</span>])),len(a)-i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)) <span class="keyword">if</span> (b - a[len(a)-i<span class="number">-1</span>]) <span class="keyword">in</span> a[:len(a)-i<span class="number">-1</span>]].pop()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main6</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">return</span> [[a.index(b-j), i] <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(a) <span class="keyword">if</span> a.count(b-j) &gt; <span class="number">0</span> <span class="keyword">and</span> a.index(b-j)!=i].pop()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    a = range(<span class="number">20</span>)</div><div class="line">    b = <span class="number">18</span></div><div class="line">    <span class="comment"># a = [49,1,2,3,50,51]</span></div><div class="line">    <span class="comment"># b=99</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'list:&#123;&#125;,data:&#123;&#125;'</span>.format(a,b)</div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> main(a,b)</div><div class="line">    <span class="keyword">print</span> <span class="string">'main_time_used:&#123;&#125;'</span>.format(time.time()-start)</div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> main2(a,b)</div><div class="line">    <span class="keyword">print</span> <span class="string">'main2_time_used:&#123;&#125;'</span>.format(time.time()-start)</div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> main3(a,b)</div><div class="line">    <span class="keyword">print</span> <span class="string">'main3_time_used:&#123;&#125;'</span>.format(time.time()-start)</div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> main4(a,b)</div><div class="line">    <span class="keyword">print</span> <span class="string">'main4_time_used:&#123;&#125;'</span>.format(time.time()-start)</div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> main5(a,b)</div><div class="line">    <span class="keyword">print</span> <span class="string">'main5_time_used:&#123;&#125;'</span>.format(time.time()-start)</div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">print</span> main6(a,b)</div><div class="line">    <span class="keyword">print</span> <span class="string">'main6_time_used:&#123;&#125;'</span>.format(time.time()-start)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;来自&lt;code&gt;LeetCode&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Time:  O(n)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Space: O(n)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Given an array of integers, return indices of the two numbers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# such that they add up to a specific target.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# You may assume that each input would have exactly one solution.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Example:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Given nums = [2, 7, 11, 15], target = 9,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Because nums[0] + nums[1] = 2 + 7 = 9,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# return [0, 1].&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="算法" scheme="http://chihweihsu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-28 python interval  区间处理</title>
    <link href="http://chihweihsu.com/2017/08/28/2017-8-28-python-interval-%E5%8C%BA%E9%97%B4%E5%A4%84%E7%90%86/"/>
    <id>http://chihweihsu.com/2017/08/28/2017-8-28-python-interval-区间处理/</id>
    <published>2017-08-28T10:25:08.000Z</published>
    <updated>2017-09-17T06:46:23.338Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>volume1 = Interval.between(<span class="string">"A"</span>, <span class="string">"Foe"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>volume2 = Interval.between(<span class="string">"Fog"</span>, <span class="string">"McAfee"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>volume3 = Interval.between(<span class="string">"McDonalds"</span>, <span class="string">"Space"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>volume4 = Interval.between(<span class="string">"Spade"</span>, <span class="string">"Zygote"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>encyclopedia = IntervalSet([volume1, volume2, volume3, volume4])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mySet = IntervalSet([volume1, volume3, volume4])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Meteor"</span> <span class="keyword">in</span> encyclopedia</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Goose"</span> <span class="keyword">in</span> encyclopedia</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Goose"</span> <span class="keyword">in</span> mySet</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>volume2 <span class="keyword">in</span> (encyclopedia ^ mySet)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a= <span class="number">112</span> </div><div class="line">In [<span class="number">4</span>]:  a <span class="keyword">in</span> range(<span class="number">300</span>,<span class="number">400</span>) </div><div class="line">   ...: </div><div class="line">Out[<span class="number">4</span>]: <span class="keyword">False</span> </div><div class="line">In [<span class="number">5</span>]:  a <span class="keyword">in</span> range(<span class="number">101</span>,<span class="number">300</span>) </div><div class="line">   ...: </div><div class="line">Out[<span class="number">5</span>]: <span class="keyword">True</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">python强大的区间处理库interval用法介绍</div><div class="line">原文发表在我的博客主页，转载请注明出处</div><div class="line"></div><div class="line">前言</div><div class="line"></div><div class="line">这个库是在阅读别人的源码的时候看到的，觉得十分好用，然而在网上找到的相关资料甚少，所以阅读了源码来做一个简单的用法总结。在网络的路由表中，经常会通过掩码来表示流表的匹配域，在python中有的时候为了方便的模拟流表的匹配过程，可以通过一个整数区间来表示诸如IP等的匹配范围，而本文介绍的库在区间处理上是十分的强大与方便。</div><div class="line"></div><div class="line">用法举例</div><div class="line"></div><div class="line">不论是在Linux系统还是Windows系统上，我们都可以方便的安装pip或者easy_install库来方便的安装大多数python库，interval也不例外。</div><div class="line">在这个库中提供了两个主要的类，分别是Interval和IntervalSet两个类。</div><div class="line">Interval类描述了一个连续的范围区间，这个区间可以是闭、开、半闭半开、无穷的，他的区间值不一定是数字，可以包含任何的数据类型，比如字符串，时间等等，同时他和python的各种操作（&lt;, &lt;=, ==, &gt;=, &gt;等）也是兼容的。IntervalSet包含了一个或多个互不相交的Interval集合。下面的这几个例子是源码中的。</div><div class="line"></div><div class="line"> &gt;&gt;&gt;volume1 = Interval.between(<span class="string">"A"</span>, <span class="string">"Foe"</span>)</div><div class="line">&gt;&gt;&gt;volume2 = Interval.between(<span class="string">"Fog"</span>, <span class="string">"McAfee"</span>)</div><div class="line">&gt;&gt;&gt;volume3 = Interval.between(<span class="string">"McDonalds"</span>, <span class="string">"Space"</span>)</div><div class="line">&gt;&gt;&gt;volume4 = Interval.between(<span class="string">"Spade"</span>, <span class="string">"Zygote"</span>)</div><div class="line">&gt;&gt;&gt;encyclopedia = IntervalSet([volume1, volume2, volume3, volume4])</div><div class="line">&gt;&gt;&gt;mySet = IntervalSet([volume1, volume3, volume4])</div><div class="line">&gt;&gt;&gt;<span class="string">"Meteor"</span> <span class="keyword">in</span> encyclopedia</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;<span class="string">"Goose"</span> <span class="keyword">in</span> encyclopedia</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;<span class="string">"Goose"</span> <span class="keyword">in</span> mySet</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;volume2 <span class="keyword">in</span> (encyclopedia ^ mySet)</div><div class="line"><span class="keyword">True</span></div><div class="line">前面的三个例子比较容易理解，最后一个例子中，encyclopedia的区别就是mySet多了一个volume2，而异或就是将两个集合中相同的元素去掉，不同的元素保留，所以最后只剩下了volume2。</div><div class="line">除了字符串，利用interval还可以很方便的处理时间，下面的例子同样来自于源码。</div><div class="line"></div><div class="line"> &gt;&gt;&gt;officeHours = IntervalSet.between(<span class="string">"08:00"</span>, <span class="string">"17:00"</span>)</div><div class="line">&gt;&gt;&gt;myLunch = IntervalSet.between(<span class="string">"11:30"</span>, <span class="string">"12:30"</span>)</div><div class="line">&gt;&gt;&gt;myHours = IntervalSet.between(<span class="string">"08:30"</span>, <span class="string">"19:30"</span>) - myLunch</div><div class="line">&gt;&gt;&gt;myHours.issubset(officeHours)</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;<span class="string">"12:00"</span> <span class="keyword">in</span> myHours</div><div class="line"><span class="keyword">False</span></div><div class="line">&gt;&gt;&gt;<span class="string">"15:30"</span> <span class="keyword">in</span> myHours</div><div class="line"><span class="keyword">True</span></div><div class="line">&gt;&gt;&gt;inOffice = officeHours &amp; myHours</div><div class="line">&gt;&gt;&gt;<span class="keyword">print</span> inOffice</div><div class="line">[<span class="string">'08:30'</span>..<span class="string">'11:30'</span>),(<span class="string">'12:30'</span>..<span class="string">'17:00'</span>]</div><div class="line">&gt;&gt;&gt;overtime = myHours - officeHours</div><div class="line">&gt;&gt;&gt;<span class="keyword">print</span> overtime</div><div class="line">(<span class="string">'17:00'</span>..<span class="string">'19:30'</span>]</div><div class="line">在前言中说道interval库可以处理IP地址，简单的列举应用如下：</div><div class="line"></div><div class="line"> <span class="comment"># coding</span></div><div class="line">r1 = IntervalSet([Interval(<span class="number">1</span>, <span class="number">1000</span>), Interval(<span class="number">1100</span>, <span class="number">1200</span>)])</div><div class="line">r2 = IntervalSet([Interval(<span class="number">30</span>, <span class="number">50</span>), Interval(<span class="number">60</span>, <span class="number">200</span>), Interval(<span class="number">1150</span>, <span class="number">1300</span>)])</div><div class="line"></div><div class="line">r3 = IntervalSet([Interval(<span class="number">1000</span>, <span class="number">3000</span>)])</div><div class="line">r4 = IntervalSet([Interval(<span class="number">1000</span>, <span class="number">3000</span>)])</div><div class="line">r5 = IntervalSet([Interval(<span class="number">30000</span>, <span class="number">12000</span>)])</div><div class="line"></div><div class="line"><span class="keyword">print</span> (r3 - r4), (r4 - r3), r3 &amp; r4</div><div class="line"><span class="keyword">print</span> len(IntervalSet.empty())</div><div class="line"></div><div class="line"><span class="keyword">if</span> r3 &amp; r4 == r4:</div><div class="line">    <span class="keyword">print</span> <span class="string">'yes'</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> r3 &amp; r4</div><div class="line"><span class="keyword">if</span> (r3 - r4).empty():</div><div class="line">   <span class="keyword">print</span> <span class="string">"true"</span></div><div class="line"><span class="keyword">print</span> (r3 - r4).empty()</div><div class="line"></div><div class="line"><span class="comment"># output</span></div><div class="line">&lt;Empty&gt; &lt;Empty&gt; [<span class="number">1000.</span><span class="number">.3000</span>]</div><div class="line"><span class="number">0</span></div><div class="line">yes</div><div class="line">[<span class="number">1000.</span><span class="number">.3000</span>]</div><div class="line">&lt;Empty&gt;</div><div class="line">常用方法</div><div class="line"></div><div class="line">interval对象初始化参数（lower_bound=-Inf, upper_bound=Inf, **kwargs）三个boolean参数closed,lower_closed,upper_closed分表表示全闭，左闭右开，左开右闭。比如：r = Interval(upper_bound=<span class="number">62</span>, closed=<span class="keyword">False</span>)</div><div class="line">between(a, b, closed=<span class="keyword">True</span>)：返回以a和b为界的区间</div><div class="line">less_than(a)：小于a的所有值构成interval，类似的还有less_than_or_equal_to，greater_than，greater_than_or_equal_to函数</div><div class="line">join(other)：将两个连续的intervals组合起来</div><div class="line">overlaps(other)：两个区间是否有重叠</div><div class="line">adjacent_to(other)：两个区间是否不重叠的毗邻</div><div class="line">总结</div><div class="line"></div><div class="line">是一篇总结文章，并没有什么深度，只是为了不再重复造轮子，在必要的时候一个库可以极大的提高效率。</div><div class="line">MeasureMeasure</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="区间" scheme="http://chihweihsu.com/tags/%E5%8C%BA%E9%97%B4/"/>
    
      <category term="interval" scheme="http://chihweihsu.com/tags/interval/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-28 Pandas agg 使用lambda</title>
    <link href="http://chihweihsu.com/2017/08/28/2017-8-28-Pandas-agg-%E4%BD%BF%E7%94%A8lambda/"/>
    <id>http://chihweihsu.com/2017/08/28/2017-8-28-Pandas-agg-使用lambda/</id>
    <published>2017-08-28T10:12:25.000Z</published>
    <updated>2017-09-17T06:46:23.338Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">N = <span class="number">100</span></div><div class="line">data = pd.DataFrame(&#123;</div><div class="line">    <span class="string">'type'</span>: np.random.randint(<span class="number">10</span>, size=N),</div><div class="line">    <span class="string">'status'</span>: np.random.randint(<span class="number">10</span>, size=N),</div><div class="line">    <span class="string">'name'</span>: np.random.randint(<span class="number">10</span>, size=N),</div><div class="line">    <span class="string">'value'</span>: np.random.randint(<span class="number">10</span>, size=N),</div><div class="line">&#125;)</div><div class="line"></div><div class="line">reading = np.random.random(<span class="number">10</span>,)</div><div class="line"></div><div class="line">data = data.groupby([<span class="string">'type'</span>, <span class="string">'status'</span>, <span class="string">'name'</span>])[<span class="string">'value'</span>].agg(&#123;</div><div class="line">    <span class="string">'one'</span> : np.mean, </div><div class="line">    <span class="string">'two'</span> : <span class="keyword">lambda</span> value: <span class="number">100</span>* ((value&gt;<span class="number">32</span>).sum() / reading.mean()), </div><div class="line">    <span class="string">'test2'</span>: <span class="keyword">lambda</span> value: <span class="number">100</span>* ((value &gt; <span class="number">45</span>).sum() / value.mean())</div><div class="line">&#125;)</div><div class="line">print(data)</div></pre></td></tr></table></figure>
<h3 id="获取一列数据中最大值"><a href="#获取一列数据中最大值" class="headerlink" title="获取一列数据中最大值"></a>获取一列数据中最大值</h3><p>```python<br>In [34]: df.loc[df[‘Value’].idxmax()]<br>Out[34]:<br>Country        US<br>Place      Kansas<br>Value         894<br>Name: 7</p>
<p>df = df.reset_index()</p>
<p>data.groupby([‘Country’,’Place’])[‘Value’].max().item()</p>
<p>df.groupby([‘country’,’place’], as_index=False)[‘value’].max()</p>
<p>df.groupby(“country”).apply(lambda df:df.irow(df.value.argmax()))</p>
<p>In [5]: df = pandas.DataFrame(np.random.randn(10,3),columns=[‘A’,’B’,’C’])</p>
<p>In [6]: df<br>Out[6]:<br>          A         B         C<br>0  2.001289  0.482561  1.579985<br>1 -0.991646 -0.387835  1.320236<br>2  0.143826 -1.096889  1.486508<br>3 -0.193056 -0.499020  1.536540<br>4 -2.083647 -3.074591  0.175772<br>5 -0.186138 -1.949731  0.287432<br>6 -0.480790 -1.771560 -0.930234<br>7  0.227383 -0.278253  2.102004<br>8 -0.002592  1.434192 -1.624915<br>9  0.404911 -2.167599 -0.452900</p>
<p>In [7]: df.idxmax()<br>Out[7]:<br>A    0<br>B    8<br>C    7</p>
<p>In [8]: df.ix[df[‘A’].idxmax()]<br>Out[8]:<br>A    2.001289<br>B    0.482561<br>C    1.579985</p>
<p>···</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
      <category term="数据分析" scheme="http://chihweihsu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="http://chihweihsu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="http://chihweihsu.com/tags/Pandas/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="lambda" scheme="http://chihweihsu.com/tags/lambda/"/>
    
      <category term="agg" scheme="http://chihweihsu.com/tags/agg/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-27 dataframe与序列相乘</title>
    <link href="http://chihweihsu.com/2017/08/27/2017-8-27-Pandas-dataframe%E4%B8%8E%E5%BA%8F%E5%88%97%E7%9B%B8%E4%B9%98/"/>
    <id>http://chihweihsu.com/2017/08/27/2017-8-27-Pandas-dataframe与序列相乘/</id>
    <published>2017-08-27T10:28:54.000Z</published>
    <updated>2017-09-17T06:46:23.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote>
<p>继续完成项目中的评分卡部分，拿到分好箱的数据后，如何进行加权得到最后的分数就是我们接下来要考虑的问题了。</p>
</blockquote>
<a id="more"></a>
<h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1:"></a>demo1:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = dataframe.mul(series, axis=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2:"></a>demo2:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tile_df</span><span class="params">(df, n, m)</span>:</span></div><div class="line"> dfn = df.T</div><div class="line"> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, m):</div><div class="line"> dfn = dfn.append(df.T, ignore_index=<span class="keyword">True</span>)</div><div class="line"> dfm = dfn.T</div><div class="line"> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line"> dfm = dfm.append(dfn.T, ignore_index=<span class="keyword">True</span>)</div><div class="line"> <span class="keyword">return</span> dfm</div><div class="line"> </div><div class="line">df = pandas.DataFrame([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</div><div class="line">tile_df(df, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment"># 0 1 2 3 4 5</span></div><div class="line"><span class="comment"># 0 1 2 1 2 1 2</span></div><div class="line"><span class="comment"># 1 3 4 3 4 3 4</span></div><div class="line"><span class="comment"># 2 1 2 1 2 1 2</span></div><div class="line"><span class="comment"># 3 3 4 3 4 3 4</span></div></pre></td></tr></table></figure>
<h4 id="demo3"><a href="#demo3" class="headerlink" title="demo3:"></a>demo3:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">3</span>)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df</div><div class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></div><div class="line"><span class="number">0</span>  <span class="number">7</span>  <span class="number">7</span>  <span class="number">5</span></div><div class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">6</span></div><div class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">4</span></div><div class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">9</span>  <span class="number">5</span></div><div class="line"><span class="number">4</span>  <span class="number">3</span>  <span class="number">8</span>  <span class="number">7</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df.prod(axis=<span class="number">1</span>)</div><div class="line"><span class="number">0</span>    <span class="number">245</span></div><div class="line"><span class="number">1</span>     <span class="number">48</span></div><div class="line"><span class="number">2</span>    <span class="number">128</span></div><div class="line"><span class="number">3</span>     <span class="number">90</span></div><div class="line"><span class="number">4</span>    <span class="number">168</span></div><div class="line">dtype: int64</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">3</span>)))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df</div><div class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></div><div class="line"><span class="number">0</span>  <span class="number">9</span>  <span class="number">3</span>  <span class="number">3</span></div><div class="line"><span class="number">1</span>  <span class="number">8</span>  <span class="number">5</span>  <span class="number">4</span></div><div class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span></div><div class="line"><span class="number">3</span>  <span class="number">9</span>  <span class="number">8</span>  <span class="number">5</span></div><div class="line"><span class="number">4</span>  <span class="number">7</span>  <span class="number">1</span>  <span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>df.apply(np.prod, axis=<span class="number">1</span>)</div><div class="line"><span class="number">0</span>     <span class="number">81</span></div><div class="line"><span class="number">1</span>    <span class="number">160</span></div><div class="line"><span class="number">2</span>    <span class="number">126</span></div><div class="line"><span class="number">3</span>    <span class="number">360</span></div><div class="line"><span class="number">4</span>     <span class="number">14</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<h4 id="demo4"><a href="#demo4" class="headerlink" title="demo4:"></a>demo4:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">In[<span class="number">197</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd; <span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"> </div><div class="line">In [<span class="number">198</span>]: df = pd.DataFrame(np.arange(<span class="number">40.</span>).reshape((<span class="number">8</span>, <span class="number">5</span>)), columns=list(<span class="string">'abcde'</span>));</div><div class="line"></div><div class="line">In [<span class="number">199</span>]: df</div><div class="line">Out[<span class="number">199</span>]:</div><div class="line">      a     b     c     d     e</div><div class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span>   <span class="number">4.0</span></div><div class="line"><span class="number">1</span>   <span class="number">5.0</span>   <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span>   <span class="number">9.0</span></div><div class="line"><span class="number">2</span>  <span class="number">10.0</span>  <span class="number">11.0</span>  <span class="number">12.0</span>  <span class="number">13.0</span>  <span class="number">14.0</span></div><div class="line"><span class="number">3</span>  <span class="number">15.0</span>  <span class="number">16.0</span>  <span class="number">17.0</span>  <span class="number">18.0</span>  <span class="number">19.0</span></div><div class="line"><span class="number">4</span>  <span class="number">20.0</span>  <span class="number">21.0</span>  <span class="number">22.0</span>  <span class="number">23.0</span>  <span class="number">24.0</span></div><div class="line"><span class="number">5</span>  <span class="number">25.0</span>  <span class="number">26.0</span>  <span class="number">27.0</span>  <span class="number">28.0</span>  <span class="number">29.0</span></div><div class="line"><span class="number">6</span>  <span class="number">30.0</span>  <span class="number">31.0</span>  <span class="number">32.0</span>  <span class="number">33.0</span>  <span class="number">34.0</span></div><div class="line"><span class="number">7</span>  <span class="number">35.0</span>  <span class="number">36.0</span>  <span class="number">37.0</span>  <span class="number">38.0</span>  <span class="number">39.0</span></div><div class="line"></div><div class="line">In [<span class="number">200</span>]: ser = pd.Series(np.arange(<span class="number">8</span>) * <span class="number">10</span>);</div><div class="line"></div><div class="line">In [<span class="number">201</span>]: ser</div><div class="line">Out[<span class="number">201</span>]:</div><div class="line"><span class="number">0</span>     <span class="number">0</span></div><div class="line"><span class="number">1</span>    <span class="number">10</span></div><div class="line"><span class="number">2</span>    <span class="number">20</span></div><div class="line"><span class="number">3</span>    <span class="number">30</span></div><div class="line"><span class="number">4</span>    <span class="number">40</span></div><div class="line"><span class="number">5</span>    <span class="number">50</span></div><div class="line"><span class="number">6</span>    <span class="number">60</span></div><div class="line"><span class="number">7</span>    <span class="number">70</span></div><div class="line">dtype: int64</div><div class="line"></div><div class="line"></div><div class="line">In [<span class="number">202</span>]: func = <span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser)</div><div class="line"></div><div class="line">In [<span class="number">203</span>]: df.apply(func)</div><div class="line">Out[<span class="number">203</span>]:</div><div class="line">        a       b       c       d       e</div><div class="line"><span class="number">0</span>     <span class="number">0.0</span>     <span class="number">0.0</span>     <span class="number">0.0</span>     <span class="number">0.0</span>     <span class="number">0.0</span></div><div class="line"><span class="number">1</span>    <span class="number">50.0</span>    <span class="number">60.0</span>    <span class="number">70.0</span>    <span class="number">80.0</span>    <span class="number">90.0</span></div><div class="line"><span class="number">2</span>   <span class="number">200.0</span>   <span class="number">220.0</span>   <span class="number">240.0</span>   <span class="number">260.0</span>   <span class="number">280.0</span></div><div class="line"><span class="number">3</span>   <span class="number">450.0</span>   <span class="number">480.0</span>   <span class="number">510.0</span>   <span class="number">540.0</span>   <span class="number">570.0</span></div><div class="line"><span class="number">4</span>   <span class="number">800.0</span>   <span class="number">840.0</span>   <span class="number">880.0</span>   <span class="number">920.0</span>   <span class="number">960.0</span></div><div class="line"><span class="number">5</span>  <span class="number">1250.0</span>  <span class="number">1300.0</span>  <span class="number">1350.0</span>  <span class="number">1400.0</span>  <span class="number">1450.0</span></div><div class="line"><span class="number">6</span>  <span class="number">1800.0</span>  <span class="number">1860.0</span>  <span class="number">1920.0</span>  <span class="number">1980.0</span>  <span class="number">2040.0</span></div><div class="line"><span class="number">7</span>  <span class="number">2450.0</span>  <span class="number">2520.0</span>  <span class="number">2590.0</span>  <span class="number">2660.0</span>  <span class="number">2730.0</span></div><div class="line"></div><div class="line"></div><div class="line">In [<span class="number">204</span>]: df.apply(func).a</div><div class="line">Out[<span class="number">204</span>]:</div><div class="line"><span class="number">0</span>       <span class="number">0.0</span></div><div class="line"><span class="number">1</span>      <span class="number">50.0</span></div><div class="line"><span class="number">2</span>     <span class="number">200.0</span></div><div class="line"><span class="number">3</span>     <span class="number">450.0</span></div><div class="line"><span class="number">4</span>     <span class="number">800.0</span></div><div class="line"><span class="number">5</span>    <span class="number">1250.0</span></div><div class="line"><span class="number">6</span>    <span class="number">1800.0</span></div><div class="line"><span class="number">7</span>    <span class="number">2450.0</span></div><div class="line">Name: a, dtype: float64</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 行相乘</span></div><div class="line">In[<span class="number">205</span>]: ser2 = pd.Series(np.arange(<span class="number">5</span>) *<span class="number">5</span>); </div><div class="line"></div><div class="line">In [<span class="number">206</span>]: ser2</div><div class="line">Out[<span class="number">206</span>]: </div><div class="line"> <span class="number">0</span> <span class="number">0</span></div><div class="line"> <span class="number">1</span> <span class="number">5</span></div><div class="line"> <span class="number">2</span> <span class="number">10</span></div><div class="line"> <span class="number">3</span> <span class="number">15</span></div><div class="line"> <span class="number">4</span> <span class="number">20</span></div><div class="line"></div><div class="line">In[<span class="number">207</span>]: func2 = <span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser2)</div><div class="line"></div><div class="line">In[<span class="number">8</span>]: df.apply(func2, axis=<span class="number">1</span>)</div><div class="line">Out[<span class="number">208</span>]: </div><div class="line"> a b c d e</div><div class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">20</span> <span class="number">45</span> <span class="number">80</span></div><div class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">30</span> <span class="number">70</span> <span class="number">120</span> <span class="number">180</span></div><div class="line"> <span class="number">2</span> <span class="number">0</span> <span class="number">55</span> <span class="number">120</span> <span class="number">195</span> <span class="number">280</span></div><div class="line"> <span class="number">3</span> <span class="number">0</span> <span class="number">80</span> <span class="number">170</span> <span class="number">270</span> <span class="number">380</span></div><div class="line"> <span class="number">4</span> <span class="number">0</span> <span class="number">105</span> <span class="number">220</span> <span class="number">345</span> <span class="number">480</span></div><div class="line"> <span class="number">5</span> <span class="number">0</span> <span class="number">130</span> <span class="number">270</span> <span class="number">420</span> <span class="number">580</span></div><div class="line"> <span class="number">6</span> <span class="number">0</span> <span class="number">155</span> <span class="number">320</span> <span class="number">495</span> <span class="number">680</span></div><div class="line"> <span class="number">7</span> <span class="number">0</span> <span class="number">180</span> <span class="number">370</span> <span class="number">570</span> <span class="number">780</span></div><div class="line"> </div><div class="line"> <span class="comment"># 进阶版</span></div><div class="line">In[<span class="number">209</span>]: df.apply(<span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser))</div><div class="line">Out[<span class="number">209</span>]: </div><div class="line"> a b c d e</div><div class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"> <span class="number">1</span> <span class="number">50</span> <span class="number">60</span> <span class="number">70</span> <span class="number">80</span> <span class="number">90</span></div><div class="line"> <span class="number">2</span> <span class="number">200</span> <span class="number">220</span> <span class="number">240</span> <span class="number">260</span> <span class="number">280</span></div><div class="line"> <span class="number">3</span> <span class="number">450</span> <span class="number">480</span> <span class="number">510</span> <span class="number">540</span> <span class="number">570</span></div><div class="line"> <span class="number">4</span> <span class="number">800</span> <span class="number">840</span> <span class="number">880</span> <span class="number">920</span> <span class="number">960</span></div><div class="line"> <span class="number">5</span> <span class="number">1250</span> <span class="number">1300</span> <span class="number">1350</span> <span class="number">1400</span> <span class="number">1450</span></div><div class="line"> <span class="number">6</span> <span class="number">1800</span> <span class="number">1860</span> <span class="number">1920</span> <span class="number">1980</span> <span class="number">2040</span></div><div class="line"> <span class="number">7</span> <span class="number">2450</span> <span class="number">2520</span> <span class="number">2590</span> <span class="number">2660</span> <span class="number">2730</span></div><div class="line"> </div><div class="line">In [<span class="number">210</span>]: df.apply(<span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser)).a</div><div class="line">Out[<span class="number">210</span>]:</div><div class="line"><span class="number">0</span>       <span class="number">0.0</span></div><div class="line"><span class="number">1</span>      <span class="number">50.0</span></div><div class="line"><span class="number">2</span>     <span class="number">200.0</span></div><div class="line"><span class="number">3</span>     <span class="number">450.0</span></div><div class="line"><span class="number">4</span>     <span class="number">800.0</span></div><div class="line"><span class="number">5</span>    <span class="number">1250.0</span></div><div class="line"><span class="number">6</span>    <span class="number">1800.0</span></div><div class="line"><span class="number">7</span>    <span class="number">2450.0</span></div><div class="line">Name: a, dtype: float64</div><div class="line"></div><div class="line">In[<span class="number">211</span>]: df.apply(<span class="keyword">lambda</span> x: np.asarray(x) * np.asarray(ser2), axis=<span class="number">1</span>)</div><div class="line">Out[<span class="number">211</span>]:</div><div class="line"> a b c d e</div><div class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">20</span> <span class="number">45</span> <span class="number">80</span></div><div class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">30</span> <span class="number">70</span> <span class="number">120</span> <span class="number">180</span></div><div class="line"> <span class="number">2</span> <span class="number">0</span> <span class="number">55</span> <span class="number">120</span> <span class="number">195</span> <span class="number">280</span></div><div class="line"> <span class="number">3</span> <span class="number">0</span> <span class="number">80</span> <span class="number">170</span> <span class="number">270</span> <span class="number">380</span></div><div class="line"> <span class="number">4</span> <span class="number">0</span> <span class="number">105</span> <span class="number">220</span> <span class="number">345</span> <span class="number">480</span></div><div class="line"> <span class="number">5</span> <span class="number">0</span> <span class="number">130</span> <span class="number">270</span> <span class="number">420</span> <span class="number">580</span></div><div class="line"> <span class="number">6</span> <span class="number">0</span> <span class="number">155</span> <span class="number">320</span> <span class="number">495</span> <span class="number">680</span></div><div class="line"> <span class="number">7</span> <span class="number">0</span> <span class="number">180</span> <span class="number">370</span> <span class="number">570</span> <span class="number">780</span></div></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>这样，我们总分也就拿到了，最后只需将每个项目的总分求和即可</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;情景描述：&quot;&gt;&lt;a href=&quot;#情景描述：&quot; class=&quot;headerlink&quot; title=&quot;情景描述：&quot;&gt;&lt;/a&gt;情景描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;继续完成项目中的评分卡部分，拿到分好箱的数据后，如何进行加权得到最后的分数就是我们接下来要考虑的问题了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据分析" scheme="http://chihweihsu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="http://chihweihsu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="http://chihweihsu.com/tags/Pandas/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="DataFrame" scheme="http://chihweihsu.com/tags/DataFrame/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-27 python 协程加速</title>
    <link href="http://chihweihsu.com/2017/08/27/2017-8-27-python-%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F/"/>
    <id>http://chihweihsu.com/2017/08/27/2017-8-27-python-协程加速/</id>
    <published>2017-08-27T08:05:58.000Z</published>
    <updated>2017-09-17T06:46:23.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote>
<p>上周，由于产品嫌报告生成太慢，经过使用<code>profile/gprof2dot</code>研究后，发现主要时间耗费在接口网络请求上，于是我决定在项目中大量处理I/O网络请求的地方使用<code>gevent</code>,以缓解报告生成压力。</p>
</blockquote>
<a id="more"></a>
<h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey, pool</div><div class="line">monkey.patch_socket()</div><div class="line">p = pool.Pool(<span class="number">300</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requests_parse</span><span class="params">(self, tel_tuple)</span>:</span></div><div class="line">	<span class="string">"""</span></div><div class="line">	主要处理requests请求</div><div class="line">	"""</div><div class="line">	print(<span class="string">'Size of pool'</span>, len(p))</div><div class="line">	……</div><div class="line">	……</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_label</span><span class="params">(self, tel_data)</span>:</span></div><div class="line">	<span class="string">"""</span></div><div class="line">	使用gevent实现协程处理I/O网络请求</div><div class="line">	"""</div><div class="line">	jobs = [p.spawn(self.requests_parse, tel) <span class="keyword">for</span> tel <span class="keyword">in</span> tel_data]</div><div class="line">	gevent.joinall(jobs)</div><div class="line"></div><div class="line">	tlist = [x.value <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</div><div class="line">	<span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">in</span> tlist:</div><div class="line">		message_list = [x.exception <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</div><div class="line">		self.logger.error(tlist)</div><div class="line">		self.logger.error(message_list)</div><div class="line">		<span class="keyword">raise</span> Exception(message_list)</div><div class="line">	<span class="keyword">return</span> tlist</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_data_step</span><span class="params">(self, tel)</span>:</span></div><div class="line">	<span class="string">"""</span></div><div class="line">	主要将请求回来处理好的数据写入数据库（mongo）</div><div class="line">	"""</div><div class="line">	res = self.db.update()</div><div class="line">	……</div><div class="line">	……</div><div class="line"></div><div class="line">tel_data = [……] <span class="comment"># 一大堆待请求参数list</span></div><div class="line">tlist = self.generator_label(set(tel_data))</div><div class="line">map(<span class="keyword">lambda</span> x: self.update_data_step(x[<span class="number">0</span>])(x[<span class="number">1</span>],x[<span class="number">2</span>],x[<span class="number">3</span>],x[<span class="number">4</span>],x[<span class="number">5</span>],x[<span class="number">6</span>]), tlist)</div></pre></td></tr></table></figure>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><blockquote>
<p>上线后发现，代码运行一段时间后，请求一上来，任务数直线上升，一直增加：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-8-27%20python%20%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F_1.png" alt="enter description here"><br>但是，pool的数量是正常的：<br><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-8-27%20python%20%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F_2.png" alt="enter description here"><br>之后log里报错信息：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  File <span class="string">"run.py"</span>, line <span class="number">42</span>, <span class="keyword">in</span> update_data</div><div class="line">  File <span class="string">"report/generate/calls_sa_by_tel.py"</span>, line <span class="number">396</span>, <span class="keyword">in</span> run</div><div class="line">  File <span class="string">"report/generate/calls_sa_by_tel.py"</span>, line <span class="number">38</span>, <span class="keyword">in</span> base_call</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/cursor.py"</span>, line <span class="number">729</span>, <span class="keyword">in</span> count</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/collection.py"</span>, line <span class="number">1344</span>, <span class="keyword">in</span> _count</div><div class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/mongo_client.py"</span>, line <span class="number">904</span>, <span class="keyword">in</span> _socket_for_reads</div><div class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/mongo_client.py"</span>, line <span class="number">870</span>, <span class="keyword">in</span> _get_socket</div><div class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/server.py"</span>, line <span class="number">168</span>, <span class="keyword">in</span> get_socket</div><div class="line">  File <span class="string">"/usr/lib64/python2.7/contextlib.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __enter__</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">844</span>, <span class="keyword">in</span> get_socket</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">881</span>, <span class="keyword">in</span> _get_socket_no_auth</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">817</span>, <span class="keyword">in</span> connect</div><div class="line">  File <span class="string">"venv/lib/python2.7/site-packages/pymongo/pool.py"</span>, line <span class="number">263</span>, <span class="keyword">in</span> _raise_connection_failure</div><div class="line">AutoReconnect: xxx.xxx.xxx<span class="number">.117</span>:<span class="number">27017</span>: [Errno <span class="number">24</span>] Too many open files</div></pre></td></tr></table></figure>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><blockquote>
<p>经过分析，解决办法：<code>monkey.patch_socket()</code>换为<code>monkey.patch_all()</code>，或者，在使用完<code>gevent</code>后使用<code>reload(socket)</code>将socket初始化。<br>原因：应该是mongo写数据是阻塞的，请求快于写操作，导致写操作堆积越来越多，最终导致程序抛出<code>Too many open files</code>错误。<br>最终代码，如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gevent</div><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey, pool</div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_label</span><span class="params">(self, tel_data)</span>:</span></div><div class="line">	p = pool.Pool(<span class="number">10</span>)</div><div class="line">	jobs = [p.spawn(self.requests_parse, tel) <span class="keyword">for</span> tel <span class="keyword">in</span> tel_data]</div><div class="line">	gevent.joinall(jobs)</div><div class="line">	<span class="comment"># print [x.value for x in jobs]</span></div><div class="line">	tlist = [x.value <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</div><div class="line">	<span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">in</span> tlist:</div><div class="line">		message_list = [x.exception <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</div><div class="line">		self.logger.error(tlist)</div><div class="line">		self.logger.error(message_list)</div><div class="line">		<span class="keyword">raise</span> Exception(message_list)</div><div class="line">	<span class="keyword">return</span> tlist</div><div class="line">	</div><div class="line">	</div><div class="line"><span class="comment"># 或者使用</span></div><div class="line">p = pool.Pool(<span class="number">10</span>)</div><div class="line">jobs = [p.spawn(self.requests_parse, tel) <span class="keyword">for</span> tel <span class="keyword">in</span> tel_data]</div><div class="line">gevent.joinall(jobs)</div><div class="line"><span class="keyword">import</span> socket</div><div class="line">reload(socket)</div></pre></td></tr></table></figure>
<h4 id="另一个用例："><a href="#另一个用例：" class="headerlink" title="另一个用例："></a>另一个用例：</h4><blockquote>
<p>给传递两个参数，直接后面跟着就行，逗号分开；<br>返回如是多个情况的，value是一个以tuple为元素的list。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">p = pool.Pool(<span class="number">10</span>)</div><div class="line">jobs = []</div><div class="line"><span class="comment"># date ('2017-07-01', '2017-07-14')</span></div><div class="line">jobs = [p.spawn(self.crawl_a_call_log, date[<span class="number">0</span>], date[<span class="number">1</span>]) <span class="keyword">for</span> date <span class="keyword">in</span> dates]</div><div class="line">gevent.joinall(jobs)</div><div class="line">data_list = [x.value <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</div><div class="line"><span class="keyword">print</span> data_list</div><div class="line"><span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">in</span> data_list:</div><div class="line">	message_list = [x.exception <span class="keyword">for</span> x <span class="keyword">in</span> jobs]</div><div class="line">	self.log(<span class="string">'crawler'</span>, data_list, message_list)</div><div class="line">	<span class="keyword">raise</span> Exception(message_list)</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>协程(gevent)是把双刃剑，monkey.patch 是一个邪恶的东西；<br>提升效果不要太好，耗时足足降了60%，而且，请求越多，效果越明显。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;情景描述：&quot;&gt;&lt;a href=&quot;#情景描述：&quot; class=&quot;headerlink&quot; title=&quot;情景描述：&quot;&gt;&lt;/a&gt;情景描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;上周，由于产品嫌报告生成太慢，经过使用&lt;code&gt;profile/gprof2dot&lt;/code&gt;研究后，发现主要时间耗费在接口网络请求上，于是我决定在项目中大量处理I/O网络请求的地方使用&lt;code&gt;gevent&lt;/code&gt;,以缓解报告生成压力。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="gevent" scheme="http://chihweihsu.com/tags/gevent/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-27 Pandas 分箱操作（cut）</title>
    <link href="http://chihweihsu.com/2017/08/27/2017-8-27-Pandas-%E5%88%86%E7%AE%B1%E6%93%8D%E4%BD%9C%EF%BC%88cut%EF%BC%89/"/>
    <id>http://chihweihsu.com/2017/08/27/2017-8-27-Pandas-分箱操作（cut）/</id>
    <published>2017-08-27T03:12:47.000Z</published>
    <updated>2017-09-17T06:46:23.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h3><blockquote>
<p>最新，项目中涉及到评分卡操作，评分项目有大概几十项，每项基本都是按频次区间给一个分数，最后，累计所有项目的分数得出最后所需要的分数。</p>
</blockquote>
<a id="more"></a>
<h3 id="demo1："><a href="#demo1：" class="headerlink" title="demo1："></a>demo1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">df = pandas.DataFrame(&#123;<span class="string">"a"</span>: np.random.random(<span class="number">100</span>), <span class="string">"b"</span>: np.random.random(<span class="number">100</span>), <span class="string">"id"</span>: np.arange(<span class="number">100</span>)&#125;)</div><div class="line"></div><div class="line"><span class="comment"># Bin the data frame by "a" with 10 bins...</span></div><div class="line">bins = np.linspace(df.a.min(), df.a.max(), <span class="number">10</span>)</div><div class="line"><span class="comment"># array([ 0.00282977,  0.11097259,  0.2191154 ,  0.32725822,  0.43540104,</span></div><div class="line">        <span class="number">0.54354385</span>,  <span class="number">0.65168667</span>,  <span class="number">0.75982948</span>,  <span class="number">0.8679723</span> ,  <span class="number">0.97611511</span>])</div><div class="line"></div><div class="line"><span class="comment"># bins = np.linspace(0, 1, 11) # 优化版</span></div><div class="line"><span class="comment"># array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])</span></div><div class="line"></div><div class="line">groups = df.groupby(np.digitize(df.a, bins))</div><div class="line"></div><div class="line"><span class="comment"># Get the mean of each bin:</span></div><div class="line"><span class="keyword">print</span> groups.mean() <span class="comment"># Also could do "groups.aggregate(np.mean)"</span></div><div class="line">&gt;&gt;&gt;output:</div><div class="line">           a         b         id</div><div class="line"><span class="number">1</span>   <span class="number">0.044003</span>  <span class="number">0.525964</span>  <span class="number">56.307692</span></div><div class="line"><span class="number">2</span>   <span class="number">0.167568</span>  <span class="number">0.506078</span>  <span class="number">55.454545</span></div><div class="line"><span class="number">3</span>   <span class="number">0.268109</span>  <span class="number">0.510612</span>  <span class="number">44.636364</span></div><div class="line"><span class="number">4</span>   <span class="number">0.375014</span>  <span class="number">0.544154</span>  <span class="number">69.833333</span></div><div class="line"><span class="number">5</span>   <span class="number">0.481702</span>  <span class="number">0.590031</span>  <span class="number">48.500000</span></div><div class="line"><span class="number">6</span>   <span class="number">0.599587</span>  <span class="number">0.488921</span>  <span class="number">38.076923</span></div><div class="line"><span class="number">7</span>   <span class="number">0.696548</span>  <span class="number">0.643555</span>  <span class="number">50.642857</span></div><div class="line"><span class="number">8</span>   <span class="number">0.830064</span>  <span class="number">0.620650</span>  <span class="number">50.571429</span></div><div class="line"><span class="number">9</span>   <span class="number">0.928396</span>  <span class="number">0.545460</span>  <span class="number">44.166667</span></div><div class="line"><span class="number">10</span>  <span class="number">0.976115</span>  <span class="number">0.693051</span>  <span class="number">28.000000</span></div><div class="line"></div><div class="line"><span class="comment"># Similarly, the median:</span></div><div class="line"><span class="keyword">print</span> groups.median()</div><div class="line">&gt;&gt;&gt;output:</div><div class="line">          a         b    id</div><div class="line"><span class="number">1</span>   <span class="number">0.028901</span>  <span class="number">0.536857</span>  <span class="number">61.0</span></div><div class="line"><span class="number">2</span>   <span class="number">0.167054</span>  <span class="number">0.557716</span>  <span class="number">49.0</span></div><div class="line"><span class="number">3</span>   <span class="number">0.267337</span>  <span class="number">0.534911</span>  <span class="number">43.0</span></div><div class="line"><span class="number">4</span>   <span class="number">0.374787</span>  <span class="number">0.487063</span>  <span class="number">73.0</span></div><div class="line"><span class="number">5</span>   <span class="number">0.480395</span>  <span class="number">0.737007</span>  <span class="number">49.5</span></div><div class="line"><span class="number">6</span>   <span class="number">0.603701</span>  <span class="number">0.676479</span>  <span class="number">42.0</span></div><div class="line"><span class="number">7</span>   <span class="number">0.695939</span>  <span class="number">0.689144</span>  <span class="number">57.5</span></div><div class="line"><span class="number">8</span>   <span class="number">0.836665</span>  <span class="number">0.690757</span>  <span class="number">41.0</span></div><div class="line"><span class="number">9</span>   <span class="number">0.924245</span>  <span class="number">0.646487</span>  <span class="number">47.0</span></div><div class="line"><span class="number">10</span>  <span class="number">0.976115</span>  <span class="number">0.693051</span>  <span class="number">28.0</span></div><div class="line"></div><div class="line"><span class="comment"># Apply some arbitrary function to aggregate binned data</span></div><div class="line"><span class="keyword">print</span> groups.aggregate(<span class="keyword">lambda</span> x: np.mean(x[x &gt; <span class="number">0.5</span>]))</div><div class="line">&gt;&gt;&gt;output:</div><div class="line">           a         b         id</div><div class="line"><span class="number">1</span>        NaN  <span class="number">0.671236</span>  <span class="number">56.307692</span></div><div class="line"><span class="number">2</span>        NaN  <span class="number">0.704379</span>  <span class="number">55.454545</span></div><div class="line"><span class="number">3</span>        NaN  <span class="number">0.768609</span>  <span class="number">44.636364</span></div><div class="line"><span class="number">4</span>        NaN  <span class="number">0.804354</span>  <span class="number">69.833333</span></div><div class="line"><span class="number">5</span>   <span class="number">0.514166</span>  <span class="number">0.796151</span>  <span class="number">48.500000</span></div><div class="line"><span class="number">6</span>   <span class="number">0.599587</span>  <span class="number">0.755381</span>  <span class="number">41.250000</span></div><div class="line"><span class="number">7</span>   <span class="number">0.696548</span>  <span class="number">0.779524</span>  <span class="number">50.642857</span></div><div class="line"><span class="number">8</span>   <span class="number">0.830064</span>  <span class="number">0.766095</span>  <span class="number">50.571429</span></div><div class="line"><span class="number">9</span>   <span class="number">0.928396</span>  <span class="number">0.902529</span>  <span class="number">44.166667</span></div><div class="line"><span class="number">10</span>  <span class="number">0.976115</span>  <span class="number">0.693051</span>  <span class="number">28.000000</span></div></pre></td></tr></table></figure>
<h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2 :"></a>demo2 :</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas</div><div class="line"></div><div class="line">df = pandas.DataFrame(&#123;<span class="string">"a"</span>: np.random.random(<span class="number">100</span>), </div><div class="line">                       <span class="string">"b"</span>: np.random.random(<span class="number">100</span>) + <span class="number">10</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment"># Bin the data frame by "a" with 10 bins...</span></div><div class="line">bins = np.linspace(df.a.min(), df.a.max(), <span class="number">10</span>)</div><div class="line">groups = df.groupby(pandas.cut(df.a, bins))</div><div class="line"></div><div class="line"><span class="comment"># Get the mean of b, binned by the values in a</span></div><div class="line"><span class="keyword">print</span> groups.mean().b</div><div class="line">&gt;&gt;&gt;output:</div><div class="line">a</div><div class="line">(<span class="number">0.000351</span>, <span class="number">0.11</span>]    <span class="number">10.596542</span></div><div class="line">(<span class="number">0.11</span>, <span class="number">0.22</span>]        <span class="number">10.690010</span></div><div class="line">(<span class="number">0.22</span>, <span class="number">0.33</span>]        <span class="number">10.250080</span></div><div class="line">(<span class="number">0.33</span>, <span class="number">0.44</span>]        <span class="number">10.546134</span></div><div class="line">(<span class="number">0.44</span>, <span class="number">0.549</span>]       <span class="number">10.471454</span></div><div class="line">(<span class="number">0.549</span>, <span class="number">0.659</span>]      <span class="number">10.455624</span></div><div class="line">(<span class="number">0.659</span>, <span class="number">0.769</span>]      <span class="number">10.501616</span></div><div class="line">(<span class="number">0.769</span>, <span class="number">0.879</span>]      <span class="number">10.588354</span></div><div class="line">(<span class="number">0.879</span>, <span class="number">0.989</span>]      <span class="number">10.461848</span></div><div class="line">Name: b, dtype: float64</div></pre></td></tr></table></figure>
<h4 id="demo3"><a href="#demo3" class="headerlink" title="demo3:"></a>demo3:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">144</span>]: df = DataFrame(&#123;<span class="string">"a"</span>: np.random.random(<span class="number">100</span>), <span class="string">"b"</span>: np.random.random(<span class="number">100</span>), <span class="string">"id"</span>:   np.arange(<span class="number">100</span>)&#125;)</div><div class="line"></div><div class="line">In [<span class="number">145</span>]: bins = [<span class="number">0</span>, <span class="number">.25</span>, <span class="number">.5</span>, <span class="number">.75</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line">In [<span class="number">146</span>]: a_bins = df.a.groupby(cut(df.a,bins))</div><div class="line"></div><div class="line">In [<span class="number">147</span>]: b_bins = df.b.groupby(cut(df.b,bins))</div><div class="line"></div><div class="line">In [<span class="number">148</span>]: a_bins.agg([mean,median])</div><div class="line">Out[<span class="number">148</span>]:</div><div class="line">                 mean    median</div><div class="line">a</div><div class="line">(<span class="number">0</span>, <span class="number">0.25</span>]    <span class="number">0.124173</span>  <span class="number">0.114613</span></div><div class="line">(<span class="number">0.25</span>, <span class="number">0.5</span>]  <span class="number">0.367703</span>  <span class="number">0.358866</span></div><div class="line">(<span class="number">0.5</span>, <span class="number">0.75</span>]  <span class="number">0.624251</span>  <span class="number">0.626730</span></div><div class="line">(<span class="number">0.75</span>, <span class="number">1</span>]    <span class="number">0.875395</span>  <span class="number">0.869843</span></div><div class="line"></div><div class="line">In [<span class="number">149</span>]: b_bins.agg([mean,median])</div><div class="line">Out[<span class="number">149</span>]:</div><div class="line">                 mean    median</div><div class="line">b</div><div class="line">(<span class="number">0</span>, <span class="number">0.25</span>]    <span class="number">0.147936</span>  <span class="number">0.166900</span></div><div class="line">(<span class="number">0.25</span>, <span class="number">0.5</span>]  <span class="number">0.394918</span>  <span class="number">0.386729</span></div><div class="line">(<span class="number">0.5</span>, <span class="number">0.75</span>]  <span class="number">0.636111</span>  <span class="number">0.655247</span></div><div class="line">(<span class="number">0.75</span>, <span class="number">1</span>]    <span class="number">0.851227</span>  <span class="number">0.838805</span></div></pre></td></tr></table></figure>
<h4 id="demo4"><a href="#demo4" class="headerlink" title="demo4:"></a>demo4:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">In [<span class="number">168</span>]: filter_values = [<span class="number">0</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">33</span>]</div><div class="line"></div><div class="line">In [<span class="number">169</span>]: df = pd.DataFrame(np.random.random(<span class="number">100</span>)*<span class="number">100</span>, columns  = [<span class="string">'filtercol'</span>])</div><div class="line"></div><div class="line">In [<span class="number">170</span>]: out = pd.cut(df.filtercol, bins = filter_values)</div><div class="line"></div><div class="line">In [<span class="number">171</span>]: counts = pd.value_counts(out)</div><div class="line">Out[<span class="number">171</span>]:</div><div class="line">(<span class="number">17</span>, <span class="number">33</span>]    <span class="number">16</span></div><div class="line">(<span class="number">5</span>, <span class="number">17</span>]     <span class="number">11</span></div><div class="line">(<span class="number">0</span>, <span class="number">5</span>]       <span class="number">5</span></div><div class="line"></div><div class="line"><span class="comment"># 排序</span></div><div class="line">counts = counts.reindex(out.cat.categories)</div><div class="line">counts = counts.sort_index()</div><div class="line"></div><div class="line">In [<span class="number">172</span>]: counts = counts.reindex(out.cat.categories)</div><div class="line">In [<span class="number">173</span>]: counts</div><div class="line">Out[<span class="number">173</span>]:</div><div class="line">(<span class="number">0</span>, <span class="number">5</span>]       <span class="number">5</span></div><div class="line">(<span class="number">5</span>, <span class="number">17</span>]     <span class="number">11</span></div><div class="line">(<span class="number">17</span>, <span class="number">33</span>]    <span class="number">16</span></div><div class="line">Name: filtercol, dtype: int64</div><div class="line"></div><div class="line"><span class="comment"># 重置索引(reset index)</span></div><div class="line">out = counts.reset_index(drop=<span class="keyword">True</span>) <span class="comment"># counts 不变</span></div><div class="line">counts.reset_index(drop=<span class="keyword">True</span>, inplace=<span class="keyword">True</span>) <span class="comment"># 直接改变counts</span></div><div class="line"></div><div class="line">In [<span class="number">174</span>]: out = counts.reset_index(drop=<span class="keyword">True</span>)</div><div class="line">In [<span class="number">175</span>]: out</div><div class="line">Out[<span class="number">175</span>]:</div><div class="line"><span class="number">0</span>     <span class="number">5</span></div><div class="line"><span class="number">1</span>    <span class="number">11</span></div><div class="line"><span class="number">2</span>    <span class="number">16</span></div><div class="line">Name: filtercol, dtype: int64</div><div class="line"></div><div class="line">In [<span class="number">176</span>]: counts</div><div class="line">Out[<span class="number">176</span>]:</div><div class="line">(<span class="number">0</span>, <span class="number">5</span>]       <span class="number">5</span></div><div class="line">(<span class="number">5</span>, <span class="number">17</span>]     <span class="number">11</span></div><div class="line">(<span class="number">17</span>, <span class="number">33</span>]    <span class="number">16</span></div><div class="line">Name: filtercol, dtype: int64</div><div class="line"></div><div class="line">In [<span class="number">177</span>]: counts.reset_index(drop=<span class="keyword">True</span>, inplace=<span class="keyword">True</span>)</div><div class="line">In [<span class="number">178</span>]: counts</div><div class="line">Out[<span class="number">178</span>]:</div><div class="line"><span class="number">0</span>     <span class="number">5</span></div><div class="line"><span class="number">1</span>    <span class="number">11</span></div><div class="line"><span class="number">2</span>    <span class="number">16</span></div><div class="line">Name: filtercol, dtype: int64</div></pre></td></tr></table></figure>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote>
<p>第四个demo基本就可以完成当前目标了；<br>后续需要操作的是封装一个合适的通用方法，将每个项目评分标准代入即可。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;情景描述：&quot;&gt;&lt;a href=&quot;#情景描述：&quot; class=&quot;headerlink&quot; title=&quot;情景描述：&quot;&gt;&lt;/a&gt;情景描述：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最新，项目中涉及到评分卡操作，评分项目有大概几十项，每项基本都是按频次区间给一个分数，最后，累计所有项目的分数得出最后所需要的分数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据分析" scheme="http://chihweihsu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="http://chihweihsu.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="http://chihweihsu.com/tags/Pandas/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="cut" scheme="http://chihweihsu.com/tags/cut/"/>
    
      <category term="评分卡" scheme="http://chihweihsu.com/tags/%E8%AF%84%E5%88%86%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-23 mongo insert_many BulkWriteError</title>
    <link href="http://chihweihsu.com/2017/08/23/2017-8-23-mongo-insert-many-BulkWriteError/"/>
    <id>http://chihweihsu.com/2017/08/23/2017-8-23-mongo-insert-many-BulkWriteError/</id>
    <published>2017-08-23T01:31:08.000Z</published>
    <updated>2017-09-17T06:46:23.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><blockquote>
<p>在对mongo插入数据时，报写入问题，报错信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/root/crs/call_history_crawler/worker/communicate.py&quot;, line 149, in insert_db_data</div><div class="line">    if db[table].insert_many(data):</div><div class="line">  File &quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/collection.py&quot;, line 684, in insert_many</div><div class="line">    blk.execute(self.write_concern.document)</div><div class="line">  File &quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/bulk.py&quot;, line 470, in execute</div><div class="line">    return self.execute_command(sock_info, generator, write_concern)</div><div class="line">  File &quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/bulk.py&quot;, line 314, in execute_command</div><div class="line">    raise BulkWriteError(full_result)</div><div class="line">BulkWriteError: batch op errors occurred</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote>
<p>问题出现在，对同一文本进行多次插入，官方说法：<code>insert_many() with a list of references to a single document raises BulkWriteError</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; doc = &#123;&#125;</div><div class="line">&gt;&gt;&gt; collection.insert_many(doc for _ in range(10))</div><div class="line">Traceback (most recent call last):</div><div class="line">...</div><div class="line">pymongo.errors.BulkWriteError: batch op errors occurred</div><div class="line">&gt;&gt;&gt; doc</div><div class="line">&#123;&apos;_id&apos;: ObjectId(&apos;560f171cfba52279f0b0da0c&apos;)&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt; docs = [&#123;&#125;]</div><div class="line">&gt;&gt;&gt; collection.insert_many(docs * 10)</div><div class="line">Traceback (most recent call last):</div><div class="line">...</div><div class="line">pymongo.errors.BulkWriteError: batch op errors occurred</div><div class="line">&gt;&gt;&gt; docs</div><div class="line">[&#123;&apos;_id&apos;: ObjectId(&apos;560f1933fba52279f0b0da0e&apos;)&#125;]</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在对mongo插入数据时，报写入问题，报错信息如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &amp;quot;/root/crs/call_history_crawler/worker/communicate.py&amp;quot;, line 149, in insert_db_data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if db[table].insert_many(data):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &amp;quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/collection.py&amp;quot;, line 684, in insert_many&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    blk.execute(self.write_concern.document)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &amp;quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/bulk.py&amp;quot;, line 470, in execute&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return self.execute_command(sock_info, generator, write_concern)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &amp;quot;/root/crs/call_history_crawler/venv/lib/python2.7/site-packages/pymongo/bulk.py&amp;quot;, line 314, in execute_command&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    raise BulkWriteError(full_result)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BulkWriteError: batch op errors occurred&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Bug" scheme="http://chihweihsu.com/categories/Bug/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Bug/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="Bug" scheme="http://chihweihsu.com/tags/Bug/"/>
    
      <category term="mongo" scheme="http://chihweihsu.com/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-14 JSON文件 读写 格式化</title>
    <link href="http://chihweihsu.com/2017/08/14/2017-8-14-JSON%E6%96%87%E4%BB%B6-%E8%AF%BB%E5%86%99-%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://chihweihsu.com/2017/08/14/2017-8-14-JSON文件-读写-格式化/</id>
    <published>2017-08-14T05:37:04.000Z</published>
    <updated>2017-09-17T06:46:23.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写文件，格式化"><a href="#写文件，格式化" class="headerlink" title="写文件，格式化"></a>写文件，格式化</h3><blockquote>
<p><code>indent</code>: 缩进（一般填4，缩进4格）；<br><code>sort_keys</code>: 是否排序（默认<code>False</code>–不排序）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_info</span><span class="params">(file_name, file_info)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'&#123;&#125;.json'</span>.format(file_name), <span class="string">'w'</span>) <span class="keyword">as</span> fp:</div><div class="line">        json.dump(file_info, fp, indent=<span class="number">4</span>, sort_keys=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">write_info(<span class="string">'report'</span>, dict(report_data))</div><div class="line"></div><div class="line"><span class="keyword">import</span> json</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<h3 id="读文件，格式化"><a href="#读文件，格式化" class="headerlink" title="读文件，格式化"></a>读文件，格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pp_json</span><span class="params">(json_thing, sort=True, indents=<span class="number">4</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> type(json_thing) <span class="keyword">is</span> str:</div><div class="line">        print(json.dumps(json.loads(json_thing), sort_keys=sort, indent=indents))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(json.dumps(json_thing, sort_keys=sort, indent=indents))</div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">pp_json(your_json_string_or_dict)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>your_json = <span class="string">'["foo", &#123;"bar":["baz", null, 1.0, 2]&#125;]'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>parsed = json.loads(your_json)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> json.dumps(parsed, indent=<span class="number">4</span>, sort_keys=<span class="keyword">True</span>)</div><div class="line">[</div><div class="line">    <span class="string">"foo"</span>, </div><div class="line">    &#123;</div><div class="line">        <span class="string">"bar"</span>: [</div><div class="line">            <span class="string">"baz"</span>, </div><div class="line">            null, </div><div class="line">            <span class="number">1.0</span>, </div><div class="line">            <span class="number">2</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写文件，格式化&quot;&gt;&lt;a href=&quot;#写文件，格式化&quot; class=&quot;headerlink&quot; title=&quot;写文件，格式化&quot;&gt;&lt;/a&gt;写文件，格式化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;indent&lt;/code&gt;: 缩进（一般填4，缩进4格）；&lt;br&gt;&lt;code&gt;sort_keys&lt;/code&gt;: 是否排序（默认&lt;code&gt;False&lt;/code&gt;–不排序）&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;write_info&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file_name, file_info)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#125;.json&#39;&lt;/span&gt;.format(file_name), &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; fp:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        json.dump(file_info, fp, indent=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, sort_keys=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;write_info(&lt;span class=&quot;string&quot;&gt;&#39;report&#39;&lt;/span&gt;, dict(report_data))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; json&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="json" scheme="http://chihweihsu.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-13 三元表达式（条件表达式）</title>
    <link href="http://chihweihsu.com/2017/08/13/2017-8-13-%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/"/>
    <id>http://chihweihsu.com/2017/08/13/2017-8-13-三元表达式（条件表达式）/</id>
    <published>2017-08-13T02:41:33.000Z</published>
    <updated>2017-09-17T06:46:23.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件表达式："><a href="#条件表达式：" class="headerlink" title="条件表达式："></a>条件表达式：</h3><blockquote>
<p>使用一行代码快速判断，替换复杂的多行if语句，使得代码简单可维护。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果条件为真，返回真，否则返回假</span></div><div class="line">condition_is_true <span class="keyword">if</span> condition <span class="keyword">else</span> condition_is_false</div><div class="line"></div><div class="line">is_fat = <span class="keyword">True</span></div><div class="line">state = <span class="string">"fat"</span> <span class="keyword">if</span> is_fat <span class="keyword">else</span> <span class="string">"not fat"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="元组条件表达式："><a href="#元组条件表达式：" class="headerlink" title="元组条件表达式："></a>元组条件表达式：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># (返回假，返回真)[真或假]</span></div><div class="line">(if_test_is_false, if_test_is_true)[test]</div><div class="line"></div><div class="line">fat = true</div><div class="line">fitness = (<span class="string">"skinny"</span>, <span class="string">"fat"</span>)[fat]</div><div class="line">print(<span class="string">'All is '</span>, fitness)</div><div class="line"><span class="comment"># 输出： All is fat</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>原理：python中，True == 1，False == 0，相当于元组中使用0和1来选取数据；</li>
<li>这种写法不被推荐，原因：不Pythonic；容易把数据与true/false弄混；元祖中两个条件都执行，而<code>if-else</code>的条件表达式不会；</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">condition = <span class="keyword">True</span></div><div class="line">python(<span class="number">2</span> <span class="keyword">if</span> condition <span class="keyword">else</span> <span class="number">1</span>/<span class="number">0</span>)</div><div class="line"><span class="comment"># 输出：2</span></div><div class="line"></div><div class="line">print(<span class="number">1</span>/<span class="number">0</span>, <span class="number">2</span>)[condition]</div><div class="line"><span class="comment"># 输出：ZeroDivisionError异常</span></div></pre></td></tr></table></figure>
<blockquote>
<p>解释：</p>
<ul>
<li>元组先建数据，然后用True(1)/False(0)来索引数据；</li>
<li><code>if-else</code>条件表达式遵循普通的<code>if-else</code>逻辑树；</li>
<li>如果逻辑中有异常条件或重计算型（计算较久）的情况下，避免使用元组条件表达式。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;条件表达式：&quot;&gt;&lt;a href=&quot;#条件表达式：&quot; class=&quot;headerlink&quot; title=&quot;条件表达式：&quot;&gt;&lt;/a&gt;条件表达式：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;使用一行代码快速判断，替换复杂的多行if语句，使得代码简单可维护。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果条件为真，返回真，否则返回假&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;condition_is_true &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; condition &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; condition_is_false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;is_fat = &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;state = &lt;span class=&quot;string&quot;&gt;&quot;fat&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; is_fat &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;not fat&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="条件表达式" scheme="http://chihweihsu.com/tags/%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-10 调试 Pdb（Python debugger）</title>
    <link href="http://chihweihsu.com/2017/08/10/2017-8-10-%E8%B0%83%E8%AF%95-Pdb%EF%BC%88Python-debugger%EF%BC%89/"/>
    <id>http://chihweihsu.com/2017/08/10/2017-8-10-调试-Pdb（Python-debugger）/</id>
    <published>2017-08-10T14:20:47.000Z</published>
    <updated>2017-09-17T06:46:23.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pdb（Python-debugger）："><a href="#Pdb（Python-debugger）：" class="headerlink" title="Pdb（Python debugger）："></a>Pdb（Python debugger）：</h2><h3 id="命令行运行："><a href="#命令行运行：" class="headerlink" title="命令行运行："></a>命令行运行：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m pdb my_script.py</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="脚本内部运行："><a href="#脚本内部运行：" class="headerlink" title="脚本内部运行："></a>脚本内部运行：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pdb</div><div class="line">pdb.set_trace()</div></pre></td></tr></table></figure>
<h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">c ：继续执行；</div><div class="line">w：显示上下文；</div><div class="line">a：打印当前函数参数列表；</div><div class="line">s：单步进入，进入函数内部（step）；</div><div class="line">n：单步跳过，不进入函数（next）；</div><div class="line">q：退出Pdb</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pdb（Python-debugger）：&quot;&gt;&lt;a href=&quot;#Pdb（Python-debugger）：&quot; class=&quot;headerlink&quot; title=&quot;Pdb（Python debugger）：&quot;&gt;&lt;/a&gt;Pdb（Python debugger）：&lt;/h2&gt;&lt;h3 id=&quot;命令行运行：&quot;&gt;&lt;a href=&quot;#命令行运行：&quot; class=&quot;headerlink&quot; title=&quot;命令行运行：&quot;&gt;&lt;/a&gt;命令行运行：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;python -m pdb my_script.py&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="Debugger" scheme="http://chihweihsu.com/tags/Debugger/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-10 string 去掉标点符号</title>
    <link href="http://chihweihsu.com/2017/08/10/2017-8-10-string-%E5%8E%BB%E6%8E%89%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7/"/>
    <id>http://chihweihsu.com/2017/08/10/2017-8-10-string-去掉标点符号/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2017-09-17T06:46:23.321Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-字符串去掉标点符号最佳实践"><a href="#Python-字符串去掉标点符号最佳实践" class="headerlink" title="Python 字符串去掉标点符号最佳实践"></a>Python 字符串去掉标点符号最佳实践</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><blockquote>
<p><code>str.isalnum</code>：<br>S.isalnum() -&gt; bool<br>Return True if all characters in S are alphanumeric and there is at least one character in S, False otherwise.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">"Special $#! characters   spaces 888323"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(e <span class="keyword">for</span> e <span class="keyword">in</span> string <span class="keyword">if</span> e.isalnum())</div><div class="line"><span class="string">'Specialcharactersspaces888323'</span></div></pre></td></tr></table></figure>
<blockquote>
<p>特点：</p>
<ul>
<li>只能识别字母和数字，杀伤力大，会把中文、空格之类的也干掉<a id="more"></a>
</li>
</ul>
</blockquote>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><blockquote>
<p>string.punctuation</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re, string</div><div class="line"></div><div class="line">s =<span class="string">"string. With. Punctuation?"</span> <span class="comment"># Sample string </span></div><div class="line"></div><div class="line"><span class="comment"># 写法一：</span></div><div class="line">out = s.translate(string.maketrans(<span class="string">""</span>,<span class="string">""</span>), string.punctuation)</div><div class="line"></div><div class="line"><span class="comment"># 写法二：</span></div><div class="line">out = s.translate(<span class="keyword">None</span>, string.punctuation)</div><div class="line"></div><div class="line"><span class="comment"># 写法三：</span></div><div class="line">exclude = set(string.punctuation)</div><div class="line">out = <span class="string">''</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> exclude)</div><div class="line"></div><div class="line"><span class="comment"># 写法四：</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> string.punctuation:</div><div class="line">			s = s.replace(c,<span class="string">""</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">'string With Punctuation'</span></div><div class="line"></div><div class="line"><span class="comment"># 写法五：</span></div><div class="line">out = re.sub(<span class="string">'[%s]'</span> % re.escape(string.punctuation), <span class="string">''</span>, s)</div><div class="line"><span class="comment">## re.escape:对字符串中所有可能被解释为正则运算符的字符进行转义</span></div><div class="line"></div><div class="line"><span class="comment"># 写法六：</span></div><div class="line"><span class="comment"># string.punctuation 只包括 ascii 格式； 想要一个包含更广（但是更慢）的方法是使用： unicodedata module :</span></div><div class="line"><span class="keyword">from</span> unicodedata <span class="keyword">import</span> category</div><div class="line">s = <span class="string">u'String — with - «Punctuation »...'</span></div><div class="line">out = re.sub(<span class="string">'[%s]'</span> % re.escape(string.punctuation), <span class="string">''</span>, s)</div><div class="line"><span class="keyword">print</span> <span class="string">'Stripped'</span>, out</div><div class="line"><span class="comment"># 输出：u'Stripped String \u2014 with  \xabPunctuation \xbb'</span></div><div class="line">out = <span class="string">''</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> category(ch)[<span class="number">0</span>] != <span class="string">'P'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Stripped'</span>, out</div><div class="line"><span class="comment"># 输出：u'Stripped String  with  Punctuation '</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># For Python 3 str or Python 2 unicode values, str.translate() only takes a dictionary; codepoints (integers) are looked up in that mapping and anything mapped to None is removed.</span></div><div class="line"><span class="comment"># To remove (some?) punctuation then, use:</span></div><div class="line"><span class="keyword">import</span> string</div><div class="line">remove_punct_map = dict.fromkeys(map(ord, string.punctuation))</div><div class="line">s.translate(remove_punct_map)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Your method doesn't work in Python 3, as the translate method doesn't accept the second argument any more. </span></div><div class="line"><span class="keyword">import</span> unicodedata</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">tbl = dict.fromkeys(i <span class="keyword">for</span> i <span class="keyword">in</span> range(sys.maxunicode) <span class="keyword">if</span> unicodedata.category(chr(i)).startswith(<span class="string">'P'</span>))</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_punctuation</span><span class="params">(text)</span>:</span></div><div class="line">	<span class="keyword">return</span> text.translate(tbl)</div></pre></td></tr></table></figure>
<h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><blockquote>
<p>re</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">s =<span class="string">"string. With. Punctuation?"</span></div><div class="line">s = re.sub(<span class="string">r'[^\w\s]'</span>,<span class="string">''</span>,s)</div></pre></td></tr></table></figure>
<h3 id="测时："><a href="#测时：" class="headerlink" title="测时："></a>测时：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re, string, timeit</div><div class="line"></div><div class="line">s =<span class="string">"string. With. Punctuation"</span></div><div class="line"></div><div class="line">exclude = set(string.punctuation)</div><div class="line">table = string.maketrans(<span class="string">""</span>,<span class="string">""</span>)</div><div class="line">regex = re.compile(<span class="string">'[%s]'</span> % re.escape(string.punctuation))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_set</span><span class="params">(s)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="string">''</span>.join(ch <span class="keyword">for</span> ch <span class="keyword">in</span> s <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> exclude)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_re</span><span class="params">(s)</span>:</span> </div><div class="line">	<span class="keyword">return</span> regex.sub(<span class="string">''</span>, s)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_trans</span><span class="params">(s)</span>:</span></div><div class="line">	<span class="keyword">return</span> s.translate(table, string.punctuation)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_repl</span><span class="params">(s)</span>:</span></div><div class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> string.punctuation:</div><div class="line">		s=s.replace(c,<span class="string">""</span>)</div><div class="line">	<span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="keyword">print</span><span class="string">"sets :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_set as f'</span>).timeit(<span class="number">1000000</span>)</div><div class="line"><span class="keyword">print</span><span class="string">"regex :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_re as f'</span>).timeit(<span class="number">1000000</span>)</div><div class="line"><span class="keyword">print</span><span class="string">"translate :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_trans as f'</span>).timeit(<span class="number">1000000</span>)</div><div class="line"><span class="keyword">print</span><span class="string">"replace :"</span>,timeit.Timer(<span class="string">'f(s)'</span>, <span class="string">'from __main__ import s,test_repl as f'</span>).timeit(<span class="number">1000000</span>)</div><div class="line"></div><div class="line">out_put:</div><div class="line"><span class="comment"># sets : 19.8566138744</span></div><div class="line"><span class="comment"># regex : 6.86155414581</span></div><div class="line"><span class="comment"># translate : 2.12455511093</span></div><div class="line"><span class="comment"># replace : 28.4436721802</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Python-字符串去掉标点符号最佳实践&quot;&gt;&lt;a href=&quot;#Python-字符串去掉标点符号最佳实践&quot; class=&quot;headerlink&quot; title=&quot;Python 字符串去掉标点符号最佳实践&quot;&gt;&lt;/a&gt;Python 字符串去掉标点符号最佳实践&lt;/h3&gt;&lt;h4 id=&quot;方法一：&quot;&gt;&lt;a href=&quot;#方法一：&quot; class=&quot;headerlink&quot; title=&quot;方法一：&quot;&gt;&lt;/a&gt;方法一：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;str.isalnum&lt;/code&gt;：&lt;br&gt;S.isalnum() -&amp;gt; bool&lt;br&gt;Return True if all characters in S are alphanumeric and there is at least one character in S, False otherwise.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;string = &lt;span class=&quot;string&quot;&gt;&quot;Special $#! characters   spaces 888323&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;.join(e &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; e &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; string &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; e.isalnum())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;Specialcharactersspaces888323&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能识别字母和数字，杀伤力大，会把中文、空格之类的也干掉
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="string" scheme="http://chihweihsu.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-9 Map、Filter、Reduce</title>
    <link href="http://chihweihsu.com/2017/08/09/2017-8-9-Map%E3%80%81Filter%E3%80%81Reduce/"/>
    <id>http://chihweihsu.com/2017/08/09/2017-8-9-Map、Filter、Reduce/</id>
    <published>2017-08-08T16:00:00.000Z</published>
    <updated>2017-09-17T06:46:23.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote>
<p>将一个函数映射到一个输入列表的所有元素上。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">squared = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, items))</div><div class="line"></div><div class="line"><span class="comment"># output:</span></div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="map作用于一列表的函数："><a href="#map作用于一列表的函数：" class="headerlink" title="map作用于一列表的函数："></a>map作用于一列表的函数：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x)</span>:</span></div><div class="line">	<span class="keyword">return</span> (x*x)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span></div><div class="line">	<span class="keyword">return</span> (x+x)</div><div class="line"></div><div class="line">funcs = [multiply, add]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">5</span>):</div><div class="line">    value = map(<span class="keyword">lambda</span> x: x(i), funcs)</div><div class="line">    print(list(value))</div><div class="line"></div><div class="line"><span class="comment"># Output:</span></div><div class="line"><span class="comment"># [0, 0]</span></div><div class="line"><span class="comment"># [1, 2]</span></div><div class="line"><span class="comment"># [4, 4]</span></div><div class="line"><span class="comment"># [9, 6]</span></div><div class="line"><span class="comment"># [16, 8]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：上面<code>print</code>加list转换，是为了python2/3的兼容，在python2中map直接返回列表，但在python3中返回迭代器。</p>
</blockquote>
<h3 id="Filter："><a href="#Filter：" class="headerlink" title="Filter："></a>Filter：</h3><blockquote>
<p>过滤列表元素，返回符合要求的元素所组成的列表；<br>filter类似for循环，但更快。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">number_list = range(<span class="number">-5</span>, <span class="number">5</span>)</div><div class="line">less_than_zero = filter(<span class="keyword">lambda</span> x: x &lt; <span class="number">0</span>, number_list)</div><div class="line">print(list(less_than_zero))  </div><div class="line"></div><div class="line"><span class="comment"># Output: </span></div><div class="line">[<span class="number">-5</span>, <span class="number">-4</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="Reduce："><a href="#Reduce：" class="headerlink" title="Reduce："></a>Reduce：</h3><blockquote>
<p>对列表进行计算并返回结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 计算列表乘积：</span></div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line">product = reduce( (<span class="keyword">lambda</span> x, y: x * y), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] )</div><div class="line"></div><div class="line"><span class="comment"># Output: </span></div><div class="line"><span class="number">24</span></div><div class="line"></div><div class="line"><span class="comment"># 计算静默期：</span></div><div class="line">count_times：func，计算静默时间</div><div class="line">blank_ret：list</div><div class="line">reduce(count_times, sorted(blank_ret))</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;将一个函数映射到一个输入列表的所有元素上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;items = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;squared = list(map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x**&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, items))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# output:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="Map" scheme="http://chihweihsu.com/tags/Map/"/>
    
      <category term="Filter" scheme="http://chihweihsu.com/tags/Filter/"/>
    
      <category term="Reduce" scheme="http://chihweihsu.com/tags/Reduce/"/>
    
  </entry>
  
  <entry>
    <title>2017-8-8 profile cProfile 效率分析</title>
    <link href="http://chihweihsu.com/2017/08/08/2017-8-8-profile-cProfile-%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <id>http://chihweihsu.com/2017/08/08/2017-8-8-profile-cProfile-效率分析/</id>
    <published>2017-08-07T16:00:00.000Z</published>
    <updated>2017-09-17T06:46:23.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="test-py："><a href="#test-py：" class="headerlink" title="test.py："></a>test.py：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(filename)</span>:</span></div><div class="line">	<span class="keyword">print</span> filename</div><div class="line"></div><div class="line"><span class="keyword">for</span> (dirpath, dirnames, filenames) <span class="keyword">in</span> os.walk(sys.argv[<span class="number">1</span>]):</div><div class="line">	<span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</div><div class="line">		process(filename)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="cProfile用法："><a href="#cProfile用法：" class="headerlink" title="cProfile用法："></a>cProfile用法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成.pstats分析文档</span></div><div class="line">python -m cProfile -o profile.pstats test.py /usr</div><div class="line"></div><div class="line"><span class="comment"># 排序</span></div><div class="line">python -m cProfile -s tottime myscript.py</div><div class="line"></div><div class="line"><span class="comment"># 查看pstats文档</span></div><div class="line">python -m pstats profile.pstats</div><div class="line"><span class="comment"># ?: 查看可用指令；sort cumtime:排序；stats:查看pstats文档</span></div><div class="line"></div><div class="line">-s 选项：</div><div class="line"><span class="string">'calls'</span> (call count)</div><div class="line"><span class="string">'cumulative'</span> (cumulative time)</div><div class="line"><span class="string">'cumtime'</span> (cumulative time)</div><div class="line"><span class="string">'file'</span> (file name)</div><div class="line"><span class="string">'filename'</span> (file name)</div><div class="line"><span class="string">'module'</span> (file name)</div><div class="line"><span class="string">'ncalls'</span> (call count)</div><div class="line"><span class="string">'pcalls'</span> (primitive call count)</div><div class="line"><span class="string">'line'</span> (line number)</div><div class="line"><span class="string">'name'</span> (function name)</div><div class="line"><span class="string">'nfl'</span> (name/file/line)</div><div class="line"><span class="string">'stdname'</span> (standard name)</div><div class="line"><span class="string">'time'</span> (internal time)</div><div class="line"><span class="string">'tottime'</span> (internal time)</div></pre></td></tr></table></figure>
<p><img src="http://ohhmsby4v.bkt.clouddn.com/image/2017-8-8%20profile%20cProfile%20%E6%95%88%E7%8E%87%E5%88%86%E6%9E%90.png" alt=""></p>
<h3 id="gprof2dot用法"><a href="#gprof2dot用法" class="headerlink" title="gprof2dot用法:"></a><a href="https://github.com/jrfonseca/gprof2dot" target="_blank" rel="external">gprof2dot</a>用法:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 gprof2dot</span></div><div class="line">pip install gprof2dot</div><div class="line"><span class="comment"># 通过.pstats文档生成相应的dot文档</span></div><div class="line">python -m gprof2dot -f pstats profile.pstats</div><div class="line"><span class="comment"># 安装graphviz（centOS系统）</span></div><div class="line">sudo yum install graphviz</div><div class="line"><span class="comment"># 输出png文档</span></div><div class="line">python -m gprof2dot -f pstats profile.pstats | dot -T png -o profile.png</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;test-py：&quot;&gt;&lt;a href=&quot;#test-py：&quot; class=&quot;headerlink&quot; title=&quot;test.py：&quot;&gt;&lt;/a&gt;test.py：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(filename)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; filename&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (dirpath, dirnames, filenames) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; os.walk(sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; filenames:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		process(filename)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://chihweihsu.com/categories/Notes/"/>
    
      <category term="Python" scheme="http://chihweihsu.com/categories/Notes/Python/"/>
    
    
      <category term="Python" scheme="http://chihweihsu.com/tags/Python/"/>
    
      <category term="cProfile" scheme="http://chihweihsu.com/tags/cProfile/"/>
    
      <category term="效率" scheme="http://chihweihsu.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
</feed>
